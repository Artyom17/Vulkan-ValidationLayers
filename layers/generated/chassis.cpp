
// This file is ***GENERATED***.  Do Not Edit.
// See layer_chassis_generator.py for modifications.

/* Copyright (c) 2015-2021 The Khronos Group Inc.
 * Copyright (c) 2015-2021 Valve Corporation
 * Copyright (c) 2015-2021 LunarG, Inc.
 * Copyright (c) 2015-2021 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author: Mark Lobodzinski <mark@lunarg.com>
 */


#include <string.h>
#include <mutex>

#include "chassis.h"
#include "layer_options.h"
#include "layer_chassis_dispatch.h"

small_unordered_map<void*, ValidationObject*, 2> layer_data_map;

// Global unique object identifier.
std::atomic<uint64_t> global_unique_id(1ULL);
// Map uniqueID to actual object handle. Accesses to the map itself are
// internally synchronized.
vl_concurrent_unordered_map<uint64_t, uint64_t, 4, HashedUint64> unique_id_mapping;

bool wrap_handles = true;

#define OBJECT_LAYER_NAME "VK_LAYER_KHRONOS_validation"
#define OBJECT_LAYER_DESCRIPTION "khronos_validation"

// Include layer validation object definitions
#include "best_practices_validation.h"
#include "core_validation.h"
#include "corechecks_optick_instrumentation.h"
#include "gpu_validation.h"
#include "object_lifetime_validation.h"
#include "debug_printf.h"
#include "stateless_validation.h"
#include "synchronization_validation.h"
#include "thread_safety.h"

// Global list of sType,size identifiers
std::vector<std::pair<uint32_t, uint32_t>> custom_stype_info{};

#ifdef INSTRUMENT_OPTICK
static const bool use_optick_instrumentation = true;
#else
static const bool use_optick_instrumentation = false;
#endif

        void ValidationObject::InitObjectDispatchVectors() {
            // Bit zero  = core validation
            // Bit one   = object tracker
            // bit two   = param val
            // bit three = thread_safety

            disp_vecs.resize(16);
            disp_vecs[0]  = {};
            disp_vecs[1]  = {object_dispatch[0]};
            disp_vecs[2]  = {                    object_dispatch[1]};
            disp_vecs[3]  = {object_dispatch[0], object_dispatch[1]};
            disp_vecs[4]  = {                                        object_dispatch[2]};
            disp_vecs[5]  = {object_dispatch[0],                     object_dispatch[2]};
            disp_vecs[6]  = {                    object_dispatch[1], object_dispatch[2]};
            disp_vecs[7]  = {object_dispatch[0], object_dispatch[1], object_dispatch[2]};
            disp_vecs[8]  = {                                                            object_dispatch[3]};
            disp_vecs[9]  = {object_dispatch[0],                                         object_dispatch[3]};
            disp_vecs[10] = {                    object_dispatch[1],                     object_dispatch[3]};
            disp_vecs[11] = {object_dispatch[0], object_dispatch[1],                     object_dispatch[3]};
            disp_vecs[12] = {                                        object_dispatch[2], object_dispatch[3]};
            disp_vecs[13] = {object_dispatch[0],                     object_dispatch[2], object_dispatch[3]};
            disp_vecs[14] = {                    object_dispatch[1], object_dispatch[2], object_dispatch[3]};
            disp_vecs[15] = {object_dispatch[0], object_dispatch[1], object_dispatch[2], object_dispatch[3]};
        disp_pre_val_GetDeviceQueue = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceQueue)        != typeid(&ValidationObject::PreCallValidateGetDeviceQueue)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceQueue) != typeid(&ValidationObject::PreCallValidateGetDeviceQueue)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceQueue)     != typeid(&ValidationObject::PreCallValidateGetDeviceQueue)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceQueue)          != typeid(&ValidationObject::PreCallValidateGetDeviceQueue)) << 3))];

        disp_pre_rec_GetDeviceQueue = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceQueue)        != typeid(&ValidationObject::PreCallRecordGetDeviceQueue)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceQueue) != typeid(&ValidationObject::PreCallRecordGetDeviceQueue)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceQueue)     != typeid(&ValidationObject::PreCallRecordGetDeviceQueue)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceQueue)          != typeid(&ValidationObject::PreCallRecordGetDeviceQueue)) << 3))];

        disp_post_rec_GetDeviceQueue = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceQueue)        != typeid(&ValidationObject::PostCallRecordGetDeviceQueue)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceQueue) != typeid(&ValidationObject::PostCallRecordGetDeviceQueue)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceQueue)     != typeid(&ValidationObject::PostCallRecordGetDeviceQueue)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceQueue)          != typeid(&ValidationObject::PostCallRecordGetDeviceQueue)) << 3))];

        disp_pre_val_QueueSubmit = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateQueueSubmit)        != typeid(&ValidationObject::PreCallValidateQueueSubmit)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateQueueSubmit) != typeid(&ValidationObject::PreCallValidateQueueSubmit)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateQueueSubmit)     != typeid(&ValidationObject::PreCallValidateQueueSubmit)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateQueueSubmit)          != typeid(&ValidationObject::PreCallValidateQueueSubmit)) << 3))];

        disp_pre_rec_QueueSubmit = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordQueueSubmit)        != typeid(&ValidationObject::PreCallRecordQueueSubmit)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordQueueSubmit) != typeid(&ValidationObject::PreCallRecordQueueSubmit)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordQueueSubmit)     != typeid(&ValidationObject::PreCallRecordQueueSubmit)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordQueueSubmit)          != typeid(&ValidationObject::PreCallRecordQueueSubmit)) << 3))];

        disp_post_rec_QueueSubmit = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordQueueSubmit)        != typeid(&ValidationObject::PostCallRecordQueueSubmit)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordQueueSubmit) != typeid(&ValidationObject::PostCallRecordQueueSubmit)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordQueueSubmit)     != typeid(&ValidationObject::PostCallRecordQueueSubmit)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordQueueSubmit)          != typeid(&ValidationObject::PostCallRecordQueueSubmit)) << 3))];

        disp_pre_val_QueueWaitIdle = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateQueueWaitIdle)        != typeid(&ValidationObject::PreCallValidateQueueWaitIdle)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateQueueWaitIdle) != typeid(&ValidationObject::PreCallValidateQueueWaitIdle)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateQueueWaitIdle)     != typeid(&ValidationObject::PreCallValidateQueueWaitIdle)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateQueueWaitIdle)          != typeid(&ValidationObject::PreCallValidateQueueWaitIdle)) << 3))];

        disp_pre_rec_QueueWaitIdle = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordQueueWaitIdle)        != typeid(&ValidationObject::PreCallRecordQueueWaitIdle)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordQueueWaitIdle) != typeid(&ValidationObject::PreCallRecordQueueWaitIdle)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordQueueWaitIdle)     != typeid(&ValidationObject::PreCallRecordQueueWaitIdle)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordQueueWaitIdle)          != typeid(&ValidationObject::PreCallRecordQueueWaitIdle)) << 3))];

        disp_post_rec_QueueWaitIdle = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordQueueWaitIdle)        != typeid(&ValidationObject::PostCallRecordQueueWaitIdle)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordQueueWaitIdle) != typeid(&ValidationObject::PostCallRecordQueueWaitIdle)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordQueueWaitIdle)     != typeid(&ValidationObject::PostCallRecordQueueWaitIdle)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordQueueWaitIdle)          != typeid(&ValidationObject::PostCallRecordQueueWaitIdle)) << 3))];

        disp_pre_val_DeviceWaitIdle = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDeviceWaitIdle)        != typeid(&ValidationObject::PreCallValidateDeviceWaitIdle)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDeviceWaitIdle) != typeid(&ValidationObject::PreCallValidateDeviceWaitIdle)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDeviceWaitIdle)     != typeid(&ValidationObject::PreCallValidateDeviceWaitIdle)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDeviceWaitIdle)          != typeid(&ValidationObject::PreCallValidateDeviceWaitIdle)) << 3))];

        disp_pre_rec_DeviceWaitIdle = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDeviceWaitIdle)        != typeid(&ValidationObject::PreCallRecordDeviceWaitIdle)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDeviceWaitIdle) != typeid(&ValidationObject::PreCallRecordDeviceWaitIdle)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDeviceWaitIdle)     != typeid(&ValidationObject::PreCallRecordDeviceWaitIdle)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDeviceWaitIdle)          != typeid(&ValidationObject::PreCallRecordDeviceWaitIdle)) << 3))];

        disp_post_rec_DeviceWaitIdle = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDeviceWaitIdle)        != typeid(&ValidationObject::PostCallRecordDeviceWaitIdle)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDeviceWaitIdle) != typeid(&ValidationObject::PostCallRecordDeviceWaitIdle)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDeviceWaitIdle)     != typeid(&ValidationObject::PostCallRecordDeviceWaitIdle)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDeviceWaitIdle)          != typeid(&ValidationObject::PostCallRecordDeviceWaitIdle)) << 3))];

        disp_pre_val_AllocateMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateAllocateMemory)        != typeid(&ValidationObject::PreCallValidateAllocateMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateAllocateMemory) != typeid(&ValidationObject::PreCallValidateAllocateMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateAllocateMemory)     != typeid(&ValidationObject::PreCallValidateAllocateMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateAllocateMemory)          != typeid(&ValidationObject::PreCallValidateAllocateMemory)) << 3))];

        disp_pre_rec_AllocateMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordAllocateMemory)        != typeid(&ValidationObject::PreCallRecordAllocateMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordAllocateMemory) != typeid(&ValidationObject::PreCallRecordAllocateMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordAllocateMemory)     != typeid(&ValidationObject::PreCallRecordAllocateMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordAllocateMemory)          != typeid(&ValidationObject::PreCallRecordAllocateMemory)) << 3))];

        disp_post_rec_AllocateMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordAllocateMemory)        != typeid(&ValidationObject::PostCallRecordAllocateMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordAllocateMemory) != typeid(&ValidationObject::PostCallRecordAllocateMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordAllocateMemory)     != typeid(&ValidationObject::PostCallRecordAllocateMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordAllocateMemory)          != typeid(&ValidationObject::PostCallRecordAllocateMemory)) << 3))];

        disp_pre_val_FreeMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateFreeMemory)        != typeid(&ValidationObject::PreCallValidateFreeMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateFreeMemory) != typeid(&ValidationObject::PreCallValidateFreeMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateFreeMemory)     != typeid(&ValidationObject::PreCallValidateFreeMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateFreeMemory)          != typeid(&ValidationObject::PreCallValidateFreeMemory)) << 3))];

        disp_pre_rec_FreeMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordFreeMemory)        != typeid(&ValidationObject::PreCallRecordFreeMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordFreeMemory) != typeid(&ValidationObject::PreCallRecordFreeMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordFreeMemory)     != typeid(&ValidationObject::PreCallRecordFreeMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordFreeMemory)          != typeid(&ValidationObject::PreCallRecordFreeMemory)) << 3))];

        disp_post_rec_FreeMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordFreeMemory)        != typeid(&ValidationObject::PostCallRecordFreeMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordFreeMemory) != typeid(&ValidationObject::PostCallRecordFreeMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordFreeMemory)     != typeid(&ValidationObject::PostCallRecordFreeMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordFreeMemory)          != typeid(&ValidationObject::PostCallRecordFreeMemory)) << 3))];

        disp_pre_val_MapMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateMapMemory)        != typeid(&ValidationObject::PreCallValidateMapMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateMapMemory) != typeid(&ValidationObject::PreCallValidateMapMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateMapMemory)     != typeid(&ValidationObject::PreCallValidateMapMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateMapMemory)          != typeid(&ValidationObject::PreCallValidateMapMemory)) << 3))];

        disp_pre_rec_MapMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordMapMemory)        != typeid(&ValidationObject::PreCallRecordMapMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordMapMemory) != typeid(&ValidationObject::PreCallRecordMapMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordMapMemory)     != typeid(&ValidationObject::PreCallRecordMapMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordMapMemory)          != typeid(&ValidationObject::PreCallRecordMapMemory)) << 3))];

        disp_post_rec_MapMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordMapMemory)        != typeid(&ValidationObject::PostCallRecordMapMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordMapMemory) != typeid(&ValidationObject::PostCallRecordMapMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordMapMemory)     != typeid(&ValidationObject::PostCallRecordMapMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordMapMemory)          != typeid(&ValidationObject::PostCallRecordMapMemory)) << 3))];

        disp_pre_val_UnmapMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateUnmapMemory)        != typeid(&ValidationObject::PreCallValidateUnmapMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateUnmapMemory) != typeid(&ValidationObject::PreCallValidateUnmapMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateUnmapMemory)     != typeid(&ValidationObject::PreCallValidateUnmapMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateUnmapMemory)          != typeid(&ValidationObject::PreCallValidateUnmapMemory)) << 3))];

        disp_pre_rec_UnmapMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordUnmapMemory)        != typeid(&ValidationObject::PreCallRecordUnmapMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordUnmapMemory) != typeid(&ValidationObject::PreCallRecordUnmapMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordUnmapMemory)     != typeid(&ValidationObject::PreCallRecordUnmapMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordUnmapMemory)          != typeid(&ValidationObject::PreCallRecordUnmapMemory)) << 3))];

        disp_post_rec_UnmapMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordUnmapMemory)        != typeid(&ValidationObject::PostCallRecordUnmapMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordUnmapMemory) != typeid(&ValidationObject::PostCallRecordUnmapMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordUnmapMemory)     != typeid(&ValidationObject::PostCallRecordUnmapMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordUnmapMemory)          != typeid(&ValidationObject::PostCallRecordUnmapMemory)) << 3))];

        disp_pre_val_FlushMappedMemoryRanges = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateFlushMappedMemoryRanges)        != typeid(&ValidationObject::PreCallValidateFlushMappedMemoryRanges)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateFlushMappedMemoryRanges) != typeid(&ValidationObject::PreCallValidateFlushMappedMemoryRanges)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateFlushMappedMemoryRanges)     != typeid(&ValidationObject::PreCallValidateFlushMappedMemoryRanges)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateFlushMappedMemoryRanges)          != typeid(&ValidationObject::PreCallValidateFlushMappedMemoryRanges)) << 3))];

        disp_pre_rec_FlushMappedMemoryRanges = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordFlushMappedMemoryRanges)        != typeid(&ValidationObject::PreCallRecordFlushMappedMemoryRanges)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordFlushMappedMemoryRanges) != typeid(&ValidationObject::PreCallRecordFlushMappedMemoryRanges)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordFlushMappedMemoryRanges)     != typeid(&ValidationObject::PreCallRecordFlushMappedMemoryRanges)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordFlushMappedMemoryRanges)          != typeid(&ValidationObject::PreCallRecordFlushMappedMemoryRanges)) << 3))];

        disp_post_rec_FlushMappedMemoryRanges = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordFlushMappedMemoryRanges)        != typeid(&ValidationObject::PostCallRecordFlushMappedMemoryRanges)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordFlushMappedMemoryRanges) != typeid(&ValidationObject::PostCallRecordFlushMappedMemoryRanges)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordFlushMappedMemoryRanges)     != typeid(&ValidationObject::PostCallRecordFlushMappedMemoryRanges)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordFlushMappedMemoryRanges)          != typeid(&ValidationObject::PostCallRecordFlushMappedMemoryRanges)) << 3))];

        disp_pre_val_InvalidateMappedMemoryRanges = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateInvalidateMappedMemoryRanges)        != typeid(&ValidationObject::PreCallValidateInvalidateMappedMemoryRanges)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateInvalidateMappedMemoryRanges) != typeid(&ValidationObject::PreCallValidateInvalidateMappedMemoryRanges)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateInvalidateMappedMemoryRanges)     != typeid(&ValidationObject::PreCallValidateInvalidateMappedMemoryRanges)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateInvalidateMappedMemoryRanges)          != typeid(&ValidationObject::PreCallValidateInvalidateMappedMemoryRanges)) << 3))];

        disp_pre_rec_InvalidateMappedMemoryRanges = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordInvalidateMappedMemoryRanges)        != typeid(&ValidationObject::PreCallRecordInvalidateMappedMemoryRanges)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordInvalidateMappedMemoryRanges) != typeid(&ValidationObject::PreCallRecordInvalidateMappedMemoryRanges)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordInvalidateMappedMemoryRanges)     != typeid(&ValidationObject::PreCallRecordInvalidateMappedMemoryRanges)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordInvalidateMappedMemoryRanges)          != typeid(&ValidationObject::PreCallRecordInvalidateMappedMemoryRanges)) << 3))];

        disp_post_rec_InvalidateMappedMemoryRanges = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordInvalidateMappedMemoryRanges)        != typeid(&ValidationObject::PostCallRecordInvalidateMappedMemoryRanges)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordInvalidateMappedMemoryRanges) != typeid(&ValidationObject::PostCallRecordInvalidateMappedMemoryRanges)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordInvalidateMappedMemoryRanges)     != typeid(&ValidationObject::PostCallRecordInvalidateMappedMemoryRanges)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordInvalidateMappedMemoryRanges)          != typeid(&ValidationObject::PostCallRecordInvalidateMappedMemoryRanges)) << 3))];

        disp_pre_val_GetDeviceMemoryCommitment = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceMemoryCommitment)        != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryCommitment)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceMemoryCommitment) != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryCommitment)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceMemoryCommitment)     != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryCommitment)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceMemoryCommitment)          != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryCommitment)) << 3))];

        disp_pre_rec_GetDeviceMemoryCommitment = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceMemoryCommitment)        != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryCommitment)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceMemoryCommitment) != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryCommitment)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceMemoryCommitment)     != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryCommitment)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceMemoryCommitment)          != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryCommitment)) << 3))];

        disp_post_rec_GetDeviceMemoryCommitment = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceMemoryCommitment)        != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryCommitment)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceMemoryCommitment) != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryCommitment)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceMemoryCommitment)     != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryCommitment)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceMemoryCommitment)          != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryCommitment)) << 3))];

        disp_pre_val_BindBufferMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateBindBufferMemory)        != typeid(&ValidationObject::PreCallValidateBindBufferMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateBindBufferMemory) != typeid(&ValidationObject::PreCallValidateBindBufferMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateBindBufferMemory)     != typeid(&ValidationObject::PreCallValidateBindBufferMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateBindBufferMemory)          != typeid(&ValidationObject::PreCallValidateBindBufferMemory)) << 3))];

        disp_pre_rec_BindBufferMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordBindBufferMemory)        != typeid(&ValidationObject::PreCallRecordBindBufferMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordBindBufferMemory) != typeid(&ValidationObject::PreCallRecordBindBufferMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordBindBufferMemory)     != typeid(&ValidationObject::PreCallRecordBindBufferMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordBindBufferMemory)          != typeid(&ValidationObject::PreCallRecordBindBufferMemory)) << 3))];

        disp_post_rec_BindBufferMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordBindBufferMemory)        != typeid(&ValidationObject::PostCallRecordBindBufferMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordBindBufferMemory) != typeid(&ValidationObject::PostCallRecordBindBufferMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordBindBufferMemory)     != typeid(&ValidationObject::PostCallRecordBindBufferMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordBindBufferMemory)          != typeid(&ValidationObject::PostCallRecordBindBufferMemory)) << 3))];

        disp_pre_val_BindImageMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateBindImageMemory)        != typeid(&ValidationObject::PreCallValidateBindImageMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateBindImageMemory) != typeid(&ValidationObject::PreCallValidateBindImageMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateBindImageMemory)     != typeid(&ValidationObject::PreCallValidateBindImageMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateBindImageMemory)          != typeid(&ValidationObject::PreCallValidateBindImageMemory)) << 3))];

        disp_pre_rec_BindImageMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordBindImageMemory)        != typeid(&ValidationObject::PreCallRecordBindImageMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordBindImageMemory) != typeid(&ValidationObject::PreCallRecordBindImageMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordBindImageMemory)     != typeid(&ValidationObject::PreCallRecordBindImageMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordBindImageMemory)          != typeid(&ValidationObject::PreCallRecordBindImageMemory)) << 3))];

        disp_post_rec_BindImageMemory = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordBindImageMemory)        != typeid(&ValidationObject::PostCallRecordBindImageMemory)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordBindImageMemory) != typeid(&ValidationObject::PostCallRecordBindImageMemory)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordBindImageMemory)     != typeid(&ValidationObject::PostCallRecordBindImageMemory)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordBindImageMemory)          != typeid(&ValidationObject::PostCallRecordBindImageMemory)) << 3))];

        disp_pre_val_GetBufferMemoryRequirements = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetBufferMemoryRequirements)        != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetBufferMemoryRequirements) != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetBufferMemoryRequirements)     != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetBufferMemoryRequirements)          != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements)) << 3))];

        disp_pre_rec_GetBufferMemoryRequirements = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetBufferMemoryRequirements)        != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetBufferMemoryRequirements) != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetBufferMemoryRequirements)     != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetBufferMemoryRequirements)          != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements)) << 3))];

        disp_post_rec_GetBufferMemoryRequirements = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetBufferMemoryRequirements)        != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetBufferMemoryRequirements) != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetBufferMemoryRequirements)     != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetBufferMemoryRequirements)          != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements)) << 3))];

        disp_pre_val_GetImageMemoryRequirements = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetImageMemoryRequirements)        != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetImageMemoryRequirements) != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetImageMemoryRequirements)     != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetImageMemoryRequirements)          != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements)) << 3))];

        disp_pre_rec_GetImageMemoryRequirements = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetImageMemoryRequirements)        != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetImageMemoryRequirements) != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetImageMemoryRequirements)     != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetImageMemoryRequirements)          != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements)) << 3))];

        disp_post_rec_GetImageMemoryRequirements = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetImageMemoryRequirements)        != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetImageMemoryRequirements) != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetImageMemoryRequirements)     != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetImageMemoryRequirements)          != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements)) << 3))];

        disp_pre_val_GetImageSparseMemoryRequirements = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetImageSparseMemoryRequirements)        != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetImageSparseMemoryRequirements) != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetImageSparseMemoryRequirements)     != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetImageSparseMemoryRequirements)          != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements)) << 3))];

        disp_pre_rec_GetImageSparseMemoryRequirements = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetImageSparseMemoryRequirements)        != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetImageSparseMemoryRequirements) != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetImageSparseMemoryRequirements)     != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetImageSparseMemoryRequirements)          != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements)) << 3))];

        disp_post_rec_GetImageSparseMemoryRequirements = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetImageSparseMemoryRequirements)        != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetImageSparseMemoryRequirements) != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetImageSparseMemoryRequirements)     != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetImageSparseMemoryRequirements)          != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements)) << 3))];

        disp_pre_val_QueueBindSparse = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateQueueBindSparse)        != typeid(&ValidationObject::PreCallValidateQueueBindSparse)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateQueueBindSparse) != typeid(&ValidationObject::PreCallValidateQueueBindSparse)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateQueueBindSparse)     != typeid(&ValidationObject::PreCallValidateQueueBindSparse)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateQueueBindSparse)          != typeid(&ValidationObject::PreCallValidateQueueBindSparse)) << 3))];

        disp_pre_rec_QueueBindSparse = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordQueueBindSparse)        != typeid(&ValidationObject::PreCallRecordQueueBindSparse)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordQueueBindSparse) != typeid(&ValidationObject::PreCallRecordQueueBindSparse)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordQueueBindSparse)     != typeid(&ValidationObject::PreCallRecordQueueBindSparse)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordQueueBindSparse)          != typeid(&ValidationObject::PreCallRecordQueueBindSparse)) << 3))];

        disp_post_rec_QueueBindSparse = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordQueueBindSparse)        != typeid(&ValidationObject::PostCallRecordQueueBindSparse)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordQueueBindSparse) != typeid(&ValidationObject::PostCallRecordQueueBindSparse)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordQueueBindSparse)     != typeid(&ValidationObject::PostCallRecordQueueBindSparse)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordQueueBindSparse)          != typeid(&ValidationObject::PostCallRecordQueueBindSparse)) << 3))];

        disp_pre_val_CreateFence = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateFence)        != typeid(&ValidationObject::PreCallValidateCreateFence)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateFence) != typeid(&ValidationObject::PreCallValidateCreateFence)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateFence)     != typeid(&ValidationObject::PreCallValidateCreateFence)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateFence)          != typeid(&ValidationObject::PreCallValidateCreateFence)) << 3))];

        disp_pre_rec_CreateFence = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateFence)        != typeid(&ValidationObject::PreCallRecordCreateFence)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateFence) != typeid(&ValidationObject::PreCallRecordCreateFence)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateFence)     != typeid(&ValidationObject::PreCallRecordCreateFence)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateFence)          != typeid(&ValidationObject::PreCallRecordCreateFence)) << 3))];

        disp_post_rec_CreateFence = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateFence)        != typeid(&ValidationObject::PostCallRecordCreateFence)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateFence) != typeid(&ValidationObject::PostCallRecordCreateFence)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateFence)     != typeid(&ValidationObject::PostCallRecordCreateFence)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateFence)          != typeid(&ValidationObject::PostCallRecordCreateFence)) << 3))];

        disp_pre_val_DestroyFence = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyFence)        != typeid(&ValidationObject::PreCallValidateDestroyFence)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyFence) != typeid(&ValidationObject::PreCallValidateDestroyFence)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyFence)     != typeid(&ValidationObject::PreCallValidateDestroyFence)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyFence)          != typeid(&ValidationObject::PreCallValidateDestroyFence)) << 3))];

        disp_pre_rec_DestroyFence = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyFence)        != typeid(&ValidationObject::PreCallRecordDestroyFence)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyFence) != typeid(&ValidationObject::PreCallRecordDestroyFence)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyFence)     != typeid(&ValidationObject::PreCallRecordDestroyFence)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyFence)          != typeid(&ValidationObject::PreCallRecordDestroyFence)) << 3))];

        disp_post_rec_DestroyFence = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyFence)        != typeid(&ValidationObject::PostCallRecordDestroyFence)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyFence) != typeid(&ValidationObject::PostCallRecordDestroyFence)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyFence)     != typeid(&ValidationObject::PostCallRecordDestroyFence)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyFence)          != typeid(&ValidationObject::PostCallRecordDestroyFence)) << 3))];

        disp_pre_val_ResetFences = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateResetFences)        != typeid(&ValidationObject::PreCallValidateResetFences)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateResetFences) != typeid(&ValidationObject::PreCallValidateResetFences)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateResetFences)     != typeid(&ValidationObject::PreCallValidateResetFences)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateResetFences)          != typeid(&ValidationObject::PreCallValidateResetFences)) << 3))];

        disp_pre_rec_ResetFences = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordResetFences)        != typeid(&ValidationObject::PreCallRecordResetFences)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordResetFences) != typeid(&ValidationObject::PreCallRecordResetFences)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordResetFences)     != typeid(&ValidationObject::PreCallRecordResetFences)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordResetFences)          != typeid(&ValidationObject::PreCallRecordResetFences)) << 3))];

        disp_post_rec_ResetFences = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordResetFences)        != typeid(&ValidationObject::PostCallRecordResetFences)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordResetFences) != typeid(&ValidationObject::PostCallRecordResetFences)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordResetFences)     != typeid(&ValidationObject::PostCallRecordResetFences)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordResetFences)          != typeid(&ValidationObject::PostCallRecordResetFences)) << 3))];

        disp_pre_val_GetFenceStatus = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetFenceStatus)        != typeid(&ValidationObject::PreCallValidateGetFenceStatus)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetFenceStatus) != typeid(&ValidationObject::PreCallValidateGetFenceStatus)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetFenceStatus)     != typeid(&ValidationObject::PreCallValidateGetFenceStatus)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetFenceStatus)          != typeid(&ValidationObject::PreCallValidateGetFenceStatus)) << 3))];

        disp_pre_rec_GetFenceStatus = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetFenceStatus)        != typeid(&ValidationObject::PreCallRecordGetFenceStatus)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetFenceStatus) != typeid(&ValidationObject::PreCallRecordGetFenceStatus)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetFenceStatus)     != typeid(&ValidationObject::PreCallRecordGetFenceStatus)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetFenceStatus)          != typeid(&ValidationObject::PreCallRecordGetFenceStatus)) << 3))];

        disp_post_rec_GetFenceStatus = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetFenceStatus)        != typeid(&ValidationObject::PostCallRecordGetFenceStatus)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetFenceStatus) != typeid(&ValidationObject::PostCallRecordGetFenceStatus)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetFenceStatus)     != typeid(&ValidationObject::PostCallRecordGetFenceStatus)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetFenceStatus)          != typeid(&ValidationObject::PostCallRecordGetFenceStatus)) << 3))];

        disp_pre_val_WaitForFences = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateWaitForFences)        != typeid(&ValidationObject::PreCallValidateWaitForFences)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateWaitForFences) != typeid(&ValidationObject::PreCallValidateWaitForFences)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateWaitForFences)     != typeid(&ValidationObject::PreCallValidateWaitForFences)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateWaitForFences)          != typeid(&ValidationObject::PreCallValidateWaitForFences)) << 3))];

        disp_pre_rec_WaitForFences = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordWaitForFences)        != typeid(&ValidationObject::PreCallRecordWaitForFences)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordWaitForFences) != typeid(&ValidationObject::PreCallRecordWaitForFences)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordWaitForFences)     != typeid(&ValidationObject::PreCallRecordWaitForFences)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordWaitForFences)          != typeid(&ValidationObject::PreCallRecordWaitForFences)) << 3))];

        disp_post_rec_WaitForFences = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordWaitForFences)        != typeid(&ValidationObject::PostCallRecordWaitForFences)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordWaitForFences) != typeid(&ValidationObject::PostCallRecordWaitForFences)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordWaitForFences)     != typeid(&ValidationObject::PostCallRecordWaitForFences)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordWaitForFences)          != typeid(&ValidationObject::PostCallRecordWaitForFences)) << 3))];

        disp_pre_val_CreateSemaphore = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateSemaphore)        != typeid(&ValidationObject::PreCallValidateCreateSemaphore)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateSemaphore) != typeid(&ValidationObject::PreCallValidateCreateSemaphore)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateSemaphore)     != typeid(&ValidationObject::PreCallValidateCreateSemaphore)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateSemaphore)          != typeid(&ValidationObject::PreCallValidateCreateSemaphore)) << 3))];

        disp_pre_rec_CreateSemaphore = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateSemaphore)        != typeid(&ValidationObject::PreCallRecordCreateSemaphore)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateSemaphore) != typeid(&ValidationObject::PreCallRecordCreateSemaphore)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateSemaphore)     != typeid(&ValidationObject::PreCallRecordCreateSemaphore)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateSemaphore)          != typeid(&ValidationObject::PreCallRecordCreateSemaphore)) << 3))];

        disp_post_rec_CreateSemaphore = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateSemaphore)        != typeid(&ValidationObject::PostCallRecordCreateSemaphore)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateSemaphore) != typeid(&ValidationObject::PostCallRecordCreateSemaphore)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateSemaphore)     != typeid(&ValidationObject::PostCallRecordCreateSemaphore)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateSemaphore)          != typeid(&ValidationObject::PostCallRecordCreateSemaphore)) << 3))];

        disp_pre_val_DestroySemaphore = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroySemaphore)        != typeid(&ValidationObject::PreCallValidateDestroySemaphore)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroySemaphore) != typeid(&ValidationObject::PreCallValidateDestroySemaphore)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroySemaphore)     != typeid(&ValidationObject::PreCallValidateDestroySemaphore)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroySemaphore)          != typeid(&ValidationObject::PreCallValidateDestroySemaphore)) << 3))];

        disp_pre_rec_DestroySemaphore = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroySemaphore)        != typeid(&ValidationObject::PreCallRecordDestroySemaphore)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroySemaphore) != typeid(&ValidationObject::PreCallRecordDestroySemaphore)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroySemaphore)     != typeid(&ValidationObject::PreCallRecordDestroySemaphore)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroySemaphore)          != typeid(&ValidationObject::PreCallRecordDestroySemaphore)) << 3))];

        disp_post_rec_DestroySemaphore = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroySemaphore)        != typeid(&ValidationObject::PostCallRecordDestroySemaphore)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroySemaphore) != typeid(&ValidationObject::PostCallRecordDestroySemaphore)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroySemaphore)     != typeid(&ValidationObject::PostCallRecordDestroySemaphore)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroySemaphore)          != typeid(&ValidationObject::PostCallRecordDestroySemaphore)) << 3))];

        disp_pre_val_CreateEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateEvent)        != typeid(&ValidationObject::PreCallValidateCreateEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateEvent) != typeid(&ValidationObject::PreCallValidateCreateEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateEvent)     != typeid(&ValidationObject::PreCallValidateCreateEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateEvent)          != typeid(&ValidationObject::PreCallValidateCreateEvent)) << 3))];

        disp_pre_rec_CreateEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateEvent)        != typeid(&ValidationObject::PreCallRecordCreateEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateEvent) != typeid(&ValidationObject::PreCallRecordCreateEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateEvent)     != typeid(&ValidationObject::PreCallRecordCreateEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateEvent)          != typeid(&ValidationObject::PreCallRecordCreateEvent)) << 3))];

        disp_post_rec_CreateEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateEvent)        != typeid(&ValidationObject::PostCallRecordCreateEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateEvent) != typeid(&ValidationObject::PostCallRecordCreateEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateEvent)     != typeid(&ValidationObject::PostCallRecordCreateEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateEvent)          != typeid(&ValidationObject::PostCallRecordCreateEvent)) << 3))];

        disp_pre_val_DestroyEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyEvent)        != typeid(&ValidationObject::PreCallValidateDestroyEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyEvent) != typeid(&ValidationObject::PreCallValidateDestroyEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyEvent)     != typeid(&ValidationObject::PreCallValidateDestroyEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyEvent)          != typeid(&ValidationObject::PreCallValidateDestroyEvent)) << 3))];

        disp_pre_rec_DestroyEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyEvent)        != typeid(&ValidationObject::PreCallRecordDestroyEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyEvent) != typeid(&ValidationObject::PreCallRecordDestroyEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyEvent)     != typeid(&ValidationObject::PreCallRecordDestroyEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyEvent)          != typeid(&ValidationObject::PreCallRecordDestroyEvent)) << 3))];

        disp_post_rec_DestroyEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyEvent)        != typeid(&ValidationObject::PostCallRecordDestroyEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyEvent) != typeid(&ValidationObject::PostCallRecordDestroyEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyEvent)     != typeid(&ValidationObject::PostCallRecordDestroyEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyEvent)          != typeid(&ValidationObject::PostCallRecordDestroyEvent)) << 3))];

        disp_pre_val_GetEventStatus = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetEventStatus)        != typeid(&ValidationObject::PreCallValidateGetEventStatus)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetEventStatus) != typeid(&ValidationObject::PreCallValidateGetEventStatus)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetEventStatus)     != typeid(&ValidationObject::PreCallValidateGetEventStatus)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetEventStatus)          != typeid(&ValidationObject::PreCallValidateGetEventStatus)) << 3))];

        disp_pre_rec_GetEventStatus = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetEventStatus)        != typeid(&ValidationObject::PreCallRecordGetEventStatus)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetEventStatus) != typeid(&ValidationObject::PreCallRecordGetEventStatus)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetEventStatus)     != typeid(&ValidationObject::PreCallRecordGetEventStatus)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetEventStatus)          != typeid(&ValidationObject::PreCallRecordGetEventStatus)) << 3))];

        disp_post_rec_GetEventStatus = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetEventStatus)        != typeid(&ValidationObject::PostCallRecordGetEventStatus)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetEventStatus) != typeid(&ValidationObject::PostCallRecordGetEventStatus)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetEventStatus)     != typeid(&ValidationObject::PostCallRecordGetEventStatus)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetEventStatus)          != typeid(&ValidationObject::PostCallRecordGetEventStatus)) << 3))];

        disp_pre_val_SetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateSetEvent)        != typeid(&ValidationObject::PreCallValidateSetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateSetEvent) != typeid(&ValidationObject::PreCallValidateSetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateSetEvent)     != typeid(&ValidationObject::PreCallValidateSetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateSetEvent)          != typeid(&ValidationObject::PreCallValidateSetEvent)) << 3))];

        disp_pre_rec_SetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordSetEvent)        != typeid(&ValidationObject::PreCallRecordSetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordSetEvent) != typeid(&ValidationObject::PreCallRecordSetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordSetEvent)     != typeid(&ValidationObject::PreCallRecordSetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordSetEvent)          != typeid(&ValidationObject::PreCallRecordSetEvent)) << 3))];

        disp_post_rec_SetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordSetEvent)        != typeid(&ValidationObject::PostCallRecordSetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordSetEvent) != typeid(&ValidationObject::PostCallRecordSetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordSetEvent)     != typeid(&ValidationObject::PostCallRecordSetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordSetEvent)          != typeid(&ValidationObject::PostCallRecordSetEvent)) << 3))];

        disp_pre_val_ResetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateResetEvent)        != typeid(&ValidationObject::PreCallValidateResetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateResetEvent) != typeid(&ValidationObject::PreCallValidateResetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateResetEvent)     != typeid(&ValidationObject::PreCallValidateResetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateResetEvent)          != typeid(&ValidationObject::PreCallValidateResetEvent)) << 3))];

        disp_pre_rec_ResetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordResetEvent)        != typeid(&ValidationObject::PreCallRecordResetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordResetEvent) != typeid(&ValidationObject::PreCallRecordResetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordResetEvent)     != typeid(&ValidationObject::PreCallRecordResetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordResetEvent)          != typeid(&ValidationObject::PreCallRecordResetEvent)) << 3))];

        disp_post_rec_ResetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordResetEvent)        != typeid(&ValidationObject::PostCallRecordResetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordResetEvent) != typeid(&ValidationObject::PostCallRecordResetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordResetEvent)     != typeid(&ValidationObject::PostCallRecordResetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordResetEvent)          != typeid(&ValidationObject::PostCallRecordResetEvent)) << 3))];

        disp_pre_val_CreateQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateQueryPool)        != typeid(&ValidationObject::PreCallValidateCreateQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateQueryPool) != typeid(&ValidationObject::PreCallValidateCreateQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateQueryPool)     != typeid(&ValidationObject::PreCallValidateCreateQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateQueryPool)          != typeid(&ValidationObject::PreCallValidateCreateQueryPool)) << 3))];

        disp_pre_rec_CreateQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateQueryPool)        != typeid(&ValidationObject::PreCallRecordCreateQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateQueryPool) != typeid(&ValidationObject::PreCallRecordCreateQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateQueryPool)     != typeid(&ValidationObject::PreCallRecordCreateQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateQueryPool)          != typeid(&ValidationObject::PreCallRecordCreateQueryPool)) << 3))];

        disp_post_rec_CreateQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateQueryPool)        != typeid(&ValidationObject::PostCallRecordCreateQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateQueryPool) != typeid(&ValidationObject::PostCallRecordCreateQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateQueryPool)     != typeid(&ValidationObject::PostCallRecordCreateQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateQueryPool)          != typeid(&ValidationObject::PostCallRecordCreateQueryPool)) << 3))];

        disp_pre_val_DestroyQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyQueryPool)        != typeid(&ValidationObject::PreCallValidateDestroyQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyQueryPool) != typeid(&ValidationObject::PreCallValidateDestroyQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyQueryPool)     != typeid(&ValidationObject::PreCallValidateDestroyQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyQueryPool)          != typeid(&ValidationObject::PreCallValidateDestroyQueryPool)) << 3))];

        disp_pre_rec_DestroyQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyQueryPool)        != typeid(&ValidationObject::PreCallRecordDestroyQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyQueryPool) != typeid(&ValidationObject::PreCallRecordDestroyQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyQueryPool)     != typeid(&ValidationObject::PreCallRecordDestroyQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyQueryPool)          != typeid(&ValidationObject::PreCallRecordDestroyQueryPool)) << 3))];

        disp_post_rec_DestroyQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyQueryPool)        != typeid(&ValidationObject::PostCallRecordDestroyQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyQueryPool) != typeid(&ValidationObject::PostCallRecordDestroyQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyQueryPool)     != typeid(&ValidationObject::PostCallRecordDestroyQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyQueryPool)          != typeid(&ValidationObject::PostCallRecordDestroyQueryPool)) << 3))];

        disp_pre_val_GetQueryPoolResults = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetQueryPoolResults)        != typeid(&ValidationObject::PreCallValidateGetQueryPoolResults)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetQueryPoolResults) != typeid(&ValidationObject::PreCallValidateGetQueryPoolResults)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetQueryPoolResults)     != typeid(&ValidationObject::PreCallValidateGetQueryPoolResults)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetQueryPoolResults)          != typeid(&ValidationObject::PreCallValidateGetQueryPoolResults)) << 3))];

        disp_pre_rec_GetQueryPoolResults = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetQueryPoolResults)        != typeid(&ValidationObject::PreCallRecordGetQueryPoolResults)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetQueryPoolResults) != typeid(&ValidationObject::PreCallRecordGetQueryPoolResults)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetQueryPoolResults)     != typeid(&ValidationObject::PreCallRecordGetQueryPoolResults)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetQueryPoolResults)          != typeid(&ValidationObject::PreCallRecordGetQueryPoolResults)) << 3))];

        disp_post_rec_GetQueryPoolResults = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetQueryPoolResults)        != typeid(&ValidationObject::PostCallRecordGetQueryPoolResults)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetQueryPoolResults) != typeid(&ValidationObject::PostCallRecordGetQueryPoolResults)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetQueryPoolResults)     != typeid(&ValidationObject::PostCallRecordGetQueryPoolResults)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetQueryPoolResults)          != typeid(&ValidationObject::PostCallRecordGetQueryPoolResults)) << 3))];

        disp_pre_val_DestroyBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyBuffer)        != typeid(&ValidationObject::PreCallValidateDestroyBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyBuffer) != typeid(&ValidationObject::PreCallValidateDestroyBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyBuffer)     != typeid(&ValidationObject::PreCallValidateDestroyBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyBuffer)          != typeid(&ValidationObject::PreCallValidateDestroyBuffer)) << 3))];

        disp_pre_rec_DestroyBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyBuffer)        != typeid(&ValidationObject::PreCallRecordDestroyBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyBuffer) != typeid(&ValidationObject::PreCallRecordDestroyBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyBuffer)     != typeid(&ValidationObject::PreCallRecordDestroyBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyBuffer)          != typeid(&ValidationObject::PreCallRecordDestroyBuffer)) << 3))];

        disp_post_rec_DestroyBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyBuffer)        != typeid(&ValidationObject::PostCallRecordDestroyBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyBuffer) != typeid(&ValidationObject::PostCallRecordDestroyBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyBuffer)     != typeid(&ValidationObject::PostCallRecordDestroyBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyBuffer)          != typeid(&ValidationObject::PostCallRecordDestroyBuffer)) << 3))];

        disp_pre_val_CreateBufferView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateBufferView)        != typeid(&ValidationObject::PreCallValidateCreateBufferView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateBufferView) != typeid(&ValidationObject::PreCallValidateCreateBufferView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateBufferView)     != typeid(&ValidationObject::PreCallValidateCreateBufferView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateBufferView)          != typeid(&ValidationObject::PreCallValidateCreateBufferView)) << 3))];

        disp_pre_rec_CreateBufferView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateBufferView)        != typeid(&ValidationObject::PreCallRecordCreateBufferView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateBufferView) != typeid(&ValidationObject::PreCallRecordCreateBufferView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateBufferView)     != typeid(&ValidationObject::PreCallRecordCreateBufferView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateBufferView)          != typeid(&ValidationObject::PreCallRecordCreateBufferView)) << 3))];

        disp_post_rec_CreateBufferView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateBufferView)        != typeid(&ValidationObject::PostCallRecordCreateBufferView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateBufferView) != typeid(&ValidationObject::PostCallRecordCreateBufferView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateBufferView)     != typeid(&ValidationObject::PostCallRecordCreateBufferView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateBufferView)          != typeid(&ValidationObject::PostCallRecordCreateBufferView)) << 3))];

        disp_pre_val_DestroyBufferView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyBufferView)        != typeid(&ValidationObject::PreCallValidateDestroyBufferView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyBufferView) != typeid(&ValidationObject::PreCallValidateDestroyBufferView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyBufferView)     != typeid(&ValidationObject::PreCallValidateDestroyBufferView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyBufferView)          != typeid(&ValidationObject::PreCallValidateDestroyBufferView)) << 3))];

        disp_pre_rec_DestroyBufferView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyBufferView)        != typeid(&ValidationObject::PreCallRecordDestroyBufferView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyBufferView) != typeid(&ValidationObject::PreCallRecordDestroyBufferView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyBufferView)     != typeid(&ValidationObject::PreCallRecordDestroyBufferView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyBufferView)          != typeid(&ValidationObject::PreCallRecordDestroyBufferView)) << 3))];

        disp_post_rec_DestroyBufferView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyBufferView)        != typeid(&ValidationObject::PostCallRecordDestroyBufferView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyBufferView) != typeid(&ValidationObject::PostCallRecordDestroyBufferView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyBufferView)     != typeid(&ValidationObject::PostCallRecordDestroyBufferView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyBufferView)          != typeid(&ValidationObject::PostCallRecordDestroyBufferView)) << 3))];

        disp_pre_val_CreateImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateImage)        != typeid(&ValidationObject::PreCallValidateCreateImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateImage) != typeid(&ValidationObject::PreCallValidateCreateImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateImage)     != typeid(&ValidationObject::PreCallValidateCreateImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateImage)          != typeid(&ValidationObject::PreCallValidateCreateImage)) << 3))];

        disp_pre_rec_CreateImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateImage)        != typeid(&ValidationObject::PreCallRecordCreateImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateImage) != typeid(&ValidationObject::PreCallRecordCreateImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateImage)     != typeid(&ValidationObject::PreCallRecordCreateImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateImage)          != typeid(&ValidationObject::PreCallRecordCreateImage)) << 3))];

        disp_post_rec_CreateImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateImage)        != typeid(&ValidationObject::PostCallRecordCreateImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateImage) != typeid(&ValidationObject::PostCallRecordCreateImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateImage)     != typeid(&ValidationObject::PostCallRecordCreateImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateImage)          != typeid(&ValidationObject::PostCallRecordCreateImage)) << 3))];

        disp_pre_val_DestroyImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyImage)        != typeid(&ValidationObject::PreCallValidateDestroyImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyImage) != typeid(&ValidationObject::PreCallValidateDestroyImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyImage)     != typeid(&ValidationObject::PreCallValidateDestroyImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyImage)          != typeid(&ValidationObject::PreCallValidateDestroyImage)) << 3))];

        disp_pre_rec_DestroyImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyImage)        != typeid(&ValidationObject::PreCallRecordDestroyImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyImage) != typeid(&ValidationObject::PreCallRecordDestroyImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyImage)     != typeid(&ValidationObject::PreCallRecordDestroyImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyImage)          != typeid(&ValidationObject::PreCallRecordDestroyImage)) << 3))];

        disp_post_rec_DestroyImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyImage)        != typeid(&ValidationObject::PostCallRecordDestroyImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyImage) != typeid(&ValidationObject::PostCallRecordDestroyImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyImage)     != typeid(&ValidationObject::PostCallRecordDestroyImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyImage)          != typeid(&ValidationObject::PostCallRecordDestroyImage)) << 3))];

        disp_pre_val_GetImageSubresourceLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetImageSubresourceLayout)        != typeid(&ValidationObject::PreCallValidateGetImageSubresourceLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetImageSubresourceLayout) != typeid(&ValidationObject::PreCallValidateGetImageSubresourceLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetImageSubresourceLayout)     != typeid(&ValidationObject::PreCallValidateGetImageSubresourceLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetImageSubresourceLayout)          != typeid(&ValidationObject::PreCallValidateGetImageSubresourceLayout)) << 3))];

        disp_pre_rec_GetImageSubresourceLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetImageSubresourceLayout)        != typeid(&ValidationObject::PreCallRecordGetImageSubresourceLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetImageSubresourceLayout) != typeid(&ValidationObject::PreCallRecordGetImageSubresourceLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetImageSubresourceLayout)     != typeid(&ValidationObject::PreCallRecordGetImageSubresourceLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetImageSubresourceLayout)          != typeid(&ValidationObject::PreCallRecordGetImageSubresourceLayout)) << 3))];

        disp_post_rec_GetImageSubresourceLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetImageSubresourceLayout)        != typeid(&ValidationObject::PostCallRecordGetImageSubresourceLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetImageSubresourceLayout) != typeid(&ValidationObject::PostCallRecordGetImageSubresourceLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetImageSubresourceLayout)     != typeid(&ValidationObject::PostCallRecordGetImageSubresourceLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetImageSubresourceLayout)          != typeid(&ValidationObject::PostCallRecordGetImageSubresourceLayout)) << 3))];

        disp_pre_val_CreateImageView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateImageView)        != typeid(&ValidationObject::PreCallValidateCreateImageView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateImageView) != typeid(&ValidationObject::PreCallValidateCreateImageView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateImageView)     != typeid(&ValidationObject::PreCallValidateCreateImageView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateImageView)          != typeid(&ValidationObject::PreCallValidateCreateImageView)) << 3))];

        disp_pre_rec_CreateImageView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateImageView)        != typeid(&ValidationObject::PreCallRecordCreateImageView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateImageView) != typeid(&ValidationObject::PreCallRecordCreateImageView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateImageView)     != typeid(&ValidationObject::PreCallRecordCreateImageView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateImageView)          != typeid(&ValidationObject::PreCallRecordCreateImageView)) << 3))];

        disp_post_rec_CreateImageView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateImageView)        != typeid(&ValidationObject::PostCallRecordCreateImageView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateImageView) != typeid(&ValidationObject::PostCallRecordCreateImageView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateImageView)     != typeid(&ValidationObject::PostCallRecordCreateImageView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateImageView)          != typeid(&ValidationObject::PostCallRecordCreateImageView)) << 3))];

        disp_pre_val_DestroyImageView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyImageView)        != typeid(&ValidationObject::PreCallValidateDestroyImageView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyImageView) != typeid(&ValidationObject::PreCallValidateDestroyImageView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyImageView)     != typeid(&ValidationObject::PreCallValidateDestroyImageView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyImageView)          != typeid(&ValidationObject::PreCallValidateDestroyImageView)) << 3))];

        disp_pre_rec_DestroyImageView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyImageView)        != typeid(&ValidationObject::PreCallRecordDestroyImageView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyImageView) != typeid(&ValidationObject::PreCallRecordDestroyImageView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyImageView)     != typeid(&ValidationObject::PreCallRecordDestroyImageView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyImageView)          != typeid(&ValidationObject::PreCallRecordDestroyImageView)) << 3))];

        disp_post_rec_DestroyImageView = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyImageView)        != typeid(&ValidationObject::PostCallRecordDestroyImageView)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyImageView) != typeid(&ValidationObject::PostCallRecordDestroyImageView)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyImageView)     != typeid(&ValidationObject::PostCallRecordDestroyImageView)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyImageView)          != typeid(&ValidationObject::PostCallRecordDestroyImageView)) << 3))];

        disp_pre_val_DestroyShaderModule = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyShaderModule)        != typeid(&ValidationObject::PreCallValidateDestroyShaderModule)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyShaderModule) != typeid(&ValidationObject::PreCallValidateDestroyShaderModule)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyShaderModule)     != typeid(&ValidationObject::PreCallValidateDestroyShaderModule)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyShaderModule)          != typeid(&ValidationObject::PreCallValidateDestroyShaderModule)) << 3))];

        disp_pre_rec_DestroyShaderModule = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyShaderModule)        != typeid(&ValidationObject::PreCallRecordDestroyShaderModule)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyShaderModule) != typeid(&ValidationObject::PreCallRecordDestroyShaderModule)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyShaderModule)     != typeid(&ValidationObject::PreCallRecordDestroyShaderModule)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyShaderModule)          != typeid(&ValidationObject::PreCallRecordDestroyShaderModule)) << 3))];

        disp_post_rec_DestroyShaderModule = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyShaderModule)        != typeid(&ValidationObject::PostCallRecordDestroyShaderModule)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyShaderModule) != typeid(&ValidationObject::PostCallRecordDestroyShaderModule)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyShaderModule)     != typeid(&ValidationObject::PostCallRecordDestroyShaderModule)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyShaderModule)          != typeid(&ValidationObject::PostCallRecordDestroyShaderModule)) << 3))];

        disp_pre_val_CreatePipelineCache = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreatePipelineCache)        != typeid(&ValidationObject::PreCallValidateCreatePipelineCache)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreatePipelineCache) != typeid(&ValidationObject::PreCallValidateCreatePipelineCache)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreatePipelineCache)     != typeid(&ValidationObject::PreCallValidateCreatePipelineCache)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreatePipelineCache)          != typeid(&ValidationObject::PreCallValidateCreatePipelineCache)) << 3))];

        disp_pre_rec_CreatePipelineCache = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreatePipelineCache)        != typeid(&ValidationObject::PreCallRecordCreatePipelineCache)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreatePipelineCache) != typeid(&ValidationObject::PreCallRecordCreatePipelineCache)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreatePipelineCache)     != typeid(&ValidationObject::PreCallRecordCreatePipelineCache)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreatePipelineCache)          != typeid(&ValidationObject::PreCallRecordCreatePipelineCache)) << 3))];

        disp_post_rec_CreatePipelineCache = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreatePipelineCache)        != typeid(&ValidationObject::PostCallRecordCreatePipelineCache)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreatePipelineCache) != typeid(&ValidationObject::PostCallRecordCreatePipelineCache)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreatePipelineCache)     != typeid(&ValidationObject::PostCallRecordCreatePipelineCache)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreatePipelineCache)          != typeid(&ValidationObject::PostCallRecordCreatePipelineCache)) << 3))];

        disp_pre_val_DestroyPipelineCache = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyPipelineCache)        != typeid(&ValidationObject::PreCallValidateDestroyPipelineCache)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyPipelineCache) != typeid(&ValidationObject::PreCallValidateDestroyPipelineCache)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyPipelineCache)     != typeid(&ValidationObject::PreCallValidateDestroyPipelineCache)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyPipelineCache)          != typeid(&ValidationObject::PreCallValidateDestroyPipelineCache)) << 3))];

        disp_pre_rec_DestroyPipelineCache = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyPipelineCache)        != typeid(&ValidationObject::PreCallRecordDestroyPipelineCache)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyPipelineCache) != typeid(&ValidationObject::PreCallRecordDestroyPipelineCache)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyPipelineCache)     != typeid(&ValidationObject::PreCallRecordDestroyPipelineCache)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyPipelineCache)          != typeid(&ValidationObject::PreCallRecordDestroyPipelineCache)) << 3))];

        disp_post_rec_DestroyPipelineCache = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyPipelineCache)        != typeid(&ValidationObject::PostCallRecordDestroyPipelineCache)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyPipelineCache) != typeid(&ValidationObject::PostCallRecordDestroyPipelineCache)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyPipelineCache)     != typeid(&ValidationObject::PostCallRecordDestroyPipelineCache)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyPipelineCache)          != typeid(&ValidationObject::PostCallRecordDestroyPipelineCache)) << 3))];

        disp_pre_val_GetPipelineCacheData = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetPipelineCacheData)        != typeid(&ValidationObject::PreCallValidateGetPipelineCacheData)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetPipelineCacheData) != typeid(&ValidationObject::PreCallValidateGetPipelineCacheData)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetPipelineCacheData)     != typeid(&ValidationObject::PreCallValidateGetPipelineCacheData)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetPipelineCacheData)          != typeid(&ValidationObject::PreCallValidateGetPipelineCacheData)) << 3))];

        disp_pre_rec_GetPipelineCacheData = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetPipelineCacheData)        != typeid(&ValidationObject::PreCallRecordGetPipelineCacheData)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetPipelineCacheData) != typeid(&ValidationObject::PreCallRecordGetPipelineCacheData)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetPipelineCacheData)     != typeid(&ValidationObject::PreCallRecordGetPipelineCacheData)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetPipelineCacheData)          != typeid(&ValidationObject::PreCallRecordGetPipelineCacheData)) << 3))];

        disp_post_rec_GetPipelineCacheData = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetPipelineCacheData)        != typeid(&ValidationObject::PostCallRecordGetPipelineCacheData)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetPipelineCacheData) != typeid(&ValidationObject::PostCallRecordGetPipelineCacheData)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetPipelineCacheData)     != typeid(&ValidationObject::PostCallRecordGetPipelineCacheData)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetPipelineCacheData)          != typeid(&ValidationObject::PostCallRecordGetPipelineCacheData)) << 3))];

        disp_pre_val_MergePipelineCaches = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateMergePipelineCaches)        != typeid(&ValidationObject::PreCallValidateMergePipelineCaches)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateMergePipelineCaches) != typeid(&ValidationObject::PreCallValidateMergePipelineCaches)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateMergePipelineCaches)     != typeid(&ValidationObject::PreCallValidateMergePipelineCaches)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateMergePipelineCaches)          != typeid(&ValidationObject::PreCallValidateMergePipelineCaches)) << 3))];

        disp_pre_rec_MergePipelineCaches = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordMergePipelineCaches)        != typeid(&ValidationObject::PreCallRecordMergePipelineCaches)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordMergePipelineCaches) != typeid(&ValidationObject::PreCallRecordMergePipelineCaches)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordMergePipelineCaches)     != typeid(&ValidationObject::PreCallRecordMergePipelineCaches)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordMergePipelineCaches)          != typeid(&ValidationObject::PreCallRecordMergePipelineCaches)) << 3))];

        disp_post_rec_MergePipelineCaches = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordMergePipelineCaches)        != typeid(&ValidationObject::PostCallRecordMergePipelineCaches)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordMergePipelineCaches) != typeid(&ValidationObject::PostCallRecordMergePipelineCaches)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordMergePipelineCaches)     != typeid(&ValidationObject::PostCallRecordMergePipelineCaches)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordMergePipelineCaches)          != typeid(&ValidationObject::PostCallRecordMergePipelineCaches)) << 3))];

        disp_pre_val_DestroyPipeline = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyPipeline)        != typeid(&ValidationObject::PreCallValidateDestroyPipeline)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyPipeline) != typeid(&ValidationObject::PreCallValidateDestroyPipeline)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyPipeline)     != typeid(&ValidationObject::PreCallValidateDestroyPipeline)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyPipeline)          != typeid(&ValidationObject::PreCallValidateDestroyPipeline)) << 3))];

        disp_pre_rec_DestroyPipeline = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyPipeline)        != typeid(&ValidationObject::PreCallRecordDestroyPipeline)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyPipeline) != typeid(&ValidationObject::PreCallRecordDestroyPipeline)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyPipeline)     != typeid(&ValidationObject::PreCallRecordDestroyPipeline)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyPipeline)          != typeid(&ValidationObject::PreCallRecordDestroyPipeline)) << 3))];

        disp_post_rec_DestroyPipeline = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyPipeline)        != typeid(&ValidationObject::PostCallRecordDestroyPipeline)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyPipeline) != typeid(&ValidationObject::PostCallRecordDestroyPipeline)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyPipeline)     != typeid(&ValidationObject::PostCallRecordDestroyPipeline)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyPipeline)          != typeid(&ValidationObject::PostCallRecordDestroyPipeline)) << 3))];

        disp_pre_val_DestroyPipelineLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyPipelineLayout)        != typeid(&ValidationObject::PreCallValidateDestroyPipelineLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyPipelineLayout) != typeid(&ValidationObject::PreCallValidateDestroyPipelineLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyPipelineLayout)     != typeid(&ValidationObject::PreCallValidateDestroyPipelineLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyPipelineLayout)          != typeid(&ValidationObject::PreCallValidateDestroyPipelineLayout)) << 3))];

        disp_pre_rec_DestroyPipelineLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyPipelineLayout)        != typeid(&ValidationObject::PreCallRecordDestroyPipelineLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyPipelineLayout) != typeid(&ValidationObject::PreCallRecordDestroyPipelineLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyPipelineLayout)     != typeid(&ValidationObject::PreCallRecordDestroyPipelineLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyPipelineLayout)          != typeid(&ValidationObject::PreCallRecordDestroyPipelineLayout)) << 3))];

        disp_post_rec_DestroyPipelineLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyPipelineLayout)        != typeid(&ValidationObject::PostCallRecordDestroyPipelineLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyPipelineLayout) != typeid(&ValidationObject::PostCallRecordDestroyPipelineLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyPipelineLayout)     != typeid(&ValidationObject::PostCallRecordDestroyPipelineLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyPipelineLayout)          != typeid(&ValidationObject::PostCallRecordDestroyPipelineLayout)) << 3))];

        disp_pre_val_CreateSampler = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateSampler)        != typeid(&ValidationObject::PreCallValidateCreateSampler)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateSampler) != typeid(&ValidationObject::PreCallValidateCreateSampler)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateSampler)     != typeid(&ValidationObject::PreCallValidateCreateSampler)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateSampler)          != typeid(&ValidationObject::PreCallValidateCreateSampler)) << 3))];

        disp_pre_rec_CreateSampler = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateSampler)        != typeid(&ValidationObject::PreCallRecordCreateSampler)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateSampler) != typeid(&ValidationObject::PreCallRecordCreateSampler)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateSampler)     != typeid(&ValidationObject::PreCallRecordCreateSampler)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateSampler)          != typeid(&ValidationObject::PreCallRecordCreateSampler)) << 3))];

        disp_post_rec_CreateSampler = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateSampler)        != typeid(&ValidationObject::PostCallRecordCreateSampler)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateSampler) != typeid(&ValidationObject::PostCallRecordCreateSampler)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateSampler)     != typeid(&ValidationObject::PostCallRecordCreateSampler)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateSampler)          != typeid(&ValidationObject::PostCallRecordCreateSampler)) << 3))];

        disp_pre_val_DestroySampler = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroySampler)        != typeid(&ValidationObject::PreCallValidateDestroySampler)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroySampler) != typeid(&ValidationObject::PreCallValidateDestroySampler)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroySampler)     != typeid(&ValidationObject::PreCallValidateDestroySampler)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroySampler)          != typeid(&ValidationObject::PreCallValidateDestroySampler)) << 3))];

        disp_pre_rec_DestroySampler = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroySampler)        != typeid(&ValidationObject::PreCallRecordDestroySampler)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroySampler) != typeid(&ValidationObject::PreCallRecordDestroySampler)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroySampler)     != typeid(&ValidationObject::PreCallRecordDestroySampler)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroySampler)          != typeid(&ValidationObject::PreCallRecordDestroySampler)) << 3))];

        disp_post_rec_DestroySampler = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroySampler)        != typeid(&ValidationObject::PostCallRecordDestroySampler)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroySampler) != typeid(&ValidationObject::PostCallRecordDestroySampler)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroySampler)     != typeid(&ValidationObject::PostCallRecordDestroySampler)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroySampler)          != typeid(&ValidationObject::PostCallRecordDestroySampler)) << 3))];

        disp_pre_val_CreateDescriptorSetLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateDescriptorSetLayout)        != typeid(&ValidationObject::PreCallValidateCreateDescriptorSetLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateDescriptorSetLayout) != typeid(&ValidationObject::PreCallValidateCreateDescriptorSetLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateDescriptorSetLayout)     != typeid(&ValidationObject::PreCallValidateCreateDescriptorSetLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateDescriptorSetLayout)          != typeid(&ValidationObject::PreCallValidateCreateDescriptorSetLayout)) << 3))];

        disp_pre_rec_CreateDescriptorSetLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateDescriptorSetLayout)        != typeid(&ValidationObject::PreCallRecordCreateDescriptorSetLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateDescriptorSetLayout) != typeid(&ValidationObject::PreCallRecordCreateDescriptorSetLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateDescriptorSetLayout)     != typeid(&ValidationObject::PreCallRecordCreateDescriptorSetLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateDescriptorSetLayout)          != typeid(&ValidationObject::PreCallRecordCreateDescriptorSetLayout)) << 3))];

        disp_post_rec_CreateDescriptorSetLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateDescriptorSetLayout)        != typeid(&ValidationObject::PostCallRecordCreateDescriptorSetLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateDescriptorSetLayout) != typeid(&ValidationObject::PostCallRecordCreateDescriptorSetLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateDescriptorSetLayout)     != typeid(&ValidationObject::PostCallRecordCreateDescriptorSetLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateDescriptorSetLayout)          != typeid(&ValidationObject::PostCallRecordCreateDescriptorSetLayout)) << 3))];

        disp_pre_val_DestroyDescriptorSetLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyDescriptorSetLayout)        != typeid(&ValidationObject::PreCallValidateDestroyDescriptorSetLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyDescriptorSetLayout) != typeid(&ValidationObject::PreCallValidateDestroyDescriptorSetLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyDescriptorSetLayout)     != typeid(&ValidationObject::PreCallValidateDestroyDescriptorSetLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyDescriptorSetLayout)          != typeid(&ValidationObject::PreCallValidateDestroyDescriptorSetLayout)) << 3))];

        disp_pre_rec_DestroyDescriptorSetLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyDescriptorSetLayout)        != typeid(&ValidationObject::PreCallRecordDestroyDescriptorSetLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyDescriptorSetLayout) != typeid(&ValidationObject::PreCallRecordDestroyDescriptorSetLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyDescriptorSetLayout)     != typeid(&ValidationObject::PreCallRecordDestroyDescriptorSetLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyDescriptorSetLayout)          != typeid(&ValidationObject::PreCallRecordDestroyDescriptorSetLayout)) << 3))];

        disp_post_rec_DestroyDescriptorSetLayout = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyDescriptorSetLayout)        != typeid(&ValidationObject::PostCallRecordDestroyDescriptorSetLayout)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyDescriptorSetLayout) != typeid(&ValidationObject::PostCallRecordDestroyDescriptorSetLayout)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyDescriptorSetLayout)     != typeid(&ValidationObject::PostCallRecordDestroyDescriptorSetLayout)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyDescriptorSetLayout)          != typeid(&ValidationObject::PostCallRecordDestroyDescriptorSetLayout)) << 3))];

        disp_pre_val_CreateDescriptorPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateDescriptorPool)        != typeid(&ValidationObject::PreCallValidateCreateDescriptorPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateDescriptorPool) != typeid(&ValidationObject::PreCallValidateCreateDescriptorPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateDescriptorPool)     != typeid(&ValidationObject::PreCallValidateCreateDescriptorPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateDescriptorPool)          != typeid(&ValidationObject::PreCallValidateCreateDescriptorPool)) << 3))];

        disp_pre_rec_CreateDescriptorPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateDescriptorPool)        != typeid(&ValidationObject::PreCallRecordCreateDescriptorPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateDescriptorPool) != typeid(&ValidationObject::PreCallRecordCreateDescriptorPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateDescriptorPool)     != typeid(&ValidationObject::PreCallRecordCreateDescriptorPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateDescriptorPool)          != typeid(&ValidationObject::PreCallRecordCreateDescriptorPool)) << 3))];

        disp_post_rec_CreateDescriptorPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateDescriptorPool)        != typeid(&ValidationObject::PostCallRecordCreateDescriptorPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateDescriptorPool) != typeid(&ValidationObject::PostCallRecordCreateDescriptorPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateDescriptorPool)     != typeid(&ValidationObject::PostCallRecordCreateDescriptorPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateDescriptorPool)          != typeid(&ValidationObject::PostCallRecordCreateDescriptorPool)) << 3))];

        disp_pre_val_DestroyDescriptorPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyDescriptorPool)        != typeid(&ValidationObject::PreCallValidateDestroyDescriptorPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyDescriptorPool) != typeid(&ValidationObject::PreCallValidateDestroyDescriptorPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyDescriptorPool)     != typeid(&ValidationObject::PreCallValidateDestroyDescriptorPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyDescriptorPool)          != typeid(&ValidationObject::PreCallValidateDestroyDescriptorPool)) << 3))];

        disp_pre_rec_DestroyDescriptorPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyDescriptorPool)        != typeid(&ValidationObject::PreCallRecordDestroyDescriptorPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyDescriptorPool) != typeid(&ValidationObject::PreCallRecordDestroyDescriptorPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyDescriptorPool)     != typeid(&ValidationObject::PreCallRecordDestroyDescriptorPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyDescriptorPool)          != typeid(&ValidationObject::PreCallRecordDestroyDescriptorPool)) << 3))];

        disp_post_rec_DestroyDescriptorPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyDescriptorPool)        != typeid(&ValidationObject::PostCallRecordDestroyDescriptorPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyDescriptorPool) != typeid(&ValidationObject::PostCallRecordDestroyDescriptorPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyDescriptorPool)     != typeid(&ValidationObject::PostCallRecordDestroyDescriptorPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyDescriptorPool)          != typeid(&ValidationObject::PostCallRecordDestroyDescriptorPool)) << 3))];

        disp_pre_val_ResetDescriptorPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateResetDescriptorPool)        != typeid(&ValidationObject::PreCallValidateResetDescriptorPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateResetDescriptorPool) != typeid(&ValidationObject::PreCallValidateResetDescriptorPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateResetDescriptorPool)     != typeid(&ValidationObject::PreCallValidateResetDescriptorPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateResetDescriptorPool)          != typeid(&ValidationObject::PreCallValidateResetDescriptorPool)) << 3))];

        disp_pre_rec_ResetDescriptorPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordResetDescriptorPool)        != typeid(&ValidationObject::PreCallRecordResetDescriptorPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordResetDescriptorPool) != typeid(&ValidationObject::PreCallRecordResetDescriptorPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordResetDescriptorPool)     != typeid(&ValidationObject::PreCallRecordResetDescriptorPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordResetDescriptorPool)          != typeid(&ValidationObject::PreCallRecordResetDescriptorPool)) << 3))];

        disp_post_rec_ResetDescriptorPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordResetDescriptorPool)        != typeid(&ValidationObject::PostCallRecordResetDescriptorPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordResetDescriptorPool) != typeid(&ValidationObject::PostCallRecordResetDescriptorPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordResetDescriptorPool)     != typeid(&ValidationObject::PostCallRecordResetDescriptorPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordResetDescriptorPool)          != typeid(&ValidationObject::PostCallRecordResetDescriptorPool)) << 3))];

        disp_pre_val_FreeDescriptorSets = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateFreeDescriptorSets)        != typeid(&ValidationObject::PreCallValidateFreeDescriptorSets)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateFreeDescriptorSets) != typeid(&ValidationObject::PreCallValidateFreeDescriptorSets)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateFreeDescriptorSets)     != typeid(&ValidationObject::PreCallValidateFreeDescriptorSets)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateFreeDescriptorSets)          != typeid(&ValidationObject::PreCallValidateFreeDescriptorSets)) << 3))];

        disp_pre_rec_FreeDescriptorSets = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordFreeDescriptorSets)        != typeid(&ValidationObject::PreCallRecordFreeDescriptorSets)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordFreeDescriptorSets) != typeid(&ValidationObject::PreCallRecordFreeDescriptorSets)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordFreeDescriptorSets)     != typeid(&ValidationObject::PreCallRecordFreeDescriptorSets)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordFreeDescriptorSets)          != typeid(&ValidationObject::PreCallRecordFreeDescriptorSets)) << 3))];

        disp_post_rec_FreeDescriptorSets = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordFreeDescriptorSets)        != typeid(&ValidationObject::PostCallRecordFreeDescriptorSets)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordFreeDescriptorSets) != typeid(&ValidationObject::PostCallRecordFreeDescriptorSets)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordFreeDescriptorSets)     != typeid(&ValidationObject::PostCallRecordFreeDescriptorSets)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordFreeDescriptorSets)          != typeid(&ValidationObject::PostCallRecordFreeDescriptorSets)) << 3))];

        disp_pre_val_UpdateDescriptorSets = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateUpdateDescriptorSets)        != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSets)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateUpdateDescriptorSets) != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSets)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateUpdateDescriptorSets)     != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSets)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateUpdateDescriptorSets)          != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSets)) << 3))];

        disp_pre_rec_UpdateDescriptorSets = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordUpdateDescriptorSets)        != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSets)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordUpdateDescriptorSets) != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSets)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordUpdateDescriptorSets)     != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSets)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordUpdateDescriptorSets)          != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSets)) << 3))];

        disp_post_rec_UpdateDescriptorSets = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordUpdateDescriptorSets)        != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSets)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordUpdateDescriptorSets) != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSets)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordUpdateDescriptorSets)     != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSets)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordUpdateDescriptorSets)          != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSets)) << 3))];

        disp_pre_val_CreateFramebuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateFramebuffer)        != typeid(&ValidationObject::PreCallValidateCreateFramebuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateFramebuffer) != typeid(&ValidationObject::PreCallValidateCreateFramebuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateFramebuffer)     != typeid(&ValidationObject::PreCallValidateCreateFramebuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateFramebuffer)          != typeid(&ValidationObject::PreCallValidateCreateFramebuffer)) << 3))];

        disp_pre_rec_CreateFramebuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateFramebuffer)        != typeid(&ValidationObject::PreCallRecordCreateFramebuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateFramebuffer) != typeid(&ValidationObject::PreCallRecordCreateFramebuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateFramebuffer)     != typeid(&ValidationObject::PreCallRecordCreateFramebuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateFramebuffer)          != typeid(&ValidationObject::PreCallRecordCreateFramebuffer)) << 3))];

        disp_post_rec_CreateFramebuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateFramebuffer)        != typeid(&ValidationObject::PostCallRecordCreateFramebuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateFramebuffer) != typeid(&ValidationObject::PostCallRecordCreateFramebuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateFramebuffer)     != typeid(&ValidationObject::PostCallRecordCreateFramebuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateFramebuffer)          != typeid(&ValidationObject::PostCallRecordCreateFramebuffer)) << 3))];

        disp_pre_val_DestroyFramebuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyFramebuffer)        != typeid(&ValidationObject::PreCallValidateDestroyFramebuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyFramebuffer) != typeid(&ValidationObject::PreCallValidateDestroyFramebuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyFramebuffer)     != typeid(&ValidationObject::PreCallValidateDestroyFramebuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyFramebuffer)          != typeid(&ValidationObject::PreCallValidateDestroyFramebuffer)) << 3))];

        disp_pre_rec_DestroyFramebuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyFramebuffer)        != typeid(&ValidationObject::PreCallRecordDestroyFramebuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyFramebuffer) != typeid(&ValidationObject::PreCallRecordDestroyFramebuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyFramebuffer)     != typeid(&ValidationObject::PreCallRecordDestroyFramebuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyFramebuffer)          != typeid(&ValidationObject::PreCallRecordDestroyFramebuffer)) << 3))];

        disp_post_rec_DestroyFramebuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyFramebuffer)        != typeid(&ValidationObject::PostCallRecordDestroyFramebuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyFramebuffer) != typeid(&ValidationObject::PostCallRecordDestroyFramebuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyFramebuffer)     != typeid(&ValidationObject::PostCallRecordDestroyFramebuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyFramebuffer)          != typeid(&ValidationObject::PostCallRecordDestroyFramebuffer)) << 3))];

        disp_pre_val_CreateRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateRenderPass)        != typeid(&ValidationObject::PreCallValidateCreateRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateRenderPass) != typeid(&ValidationObject::PreCallValidateCreateRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateRenderPass)     != typeid(&ValidationObject::PreCallValidateCreateRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateRenderPass)          != typeid(&ValidationObject::PreCallValidateCreateRenderPass)) << 3))];

        disp_pre_rec_CreateRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateRenderPass)        != typeid(&ValidationObject::PreCallRecordCreateRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateRenderPass) != typeid(&ValidationObject::PreCallRecordCreateRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateRenderPass)     != typeid(&ValidationObject::PreCallRecordCreateRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateRenderPass)          != typeid(&ValidationObject::PreCallRecordCreateRenderPass)) << 3))];

        disp_post_rec_CreateRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateRenderPass)        != typeid(&ValidationObject::PostCallRecordCreateRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateRenderPass) != typeid(&ValidationObject::PostCallRecordCreateRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateRenderPass)     != typeid(&ValidationObject::PostCallRecordCreateRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateRenderPass)          != typeid(&ValidationObject::PostCallRecordCreateRenderPass)) << 3))];

        disp_pre_val_DestroyRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyRenderPass)        != typeid(&ValidationObject::PreCallValidateDestroyRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyRenderPass) != typeid(&ValidationObject::PreCallValidateDestroyRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyRenderPass)     != typeid(&ValidationObject::PreCallValidateDestroyRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyRenderPass)          != typeid(&ValidationObject::PreCallValidateDestroyRenderPass)) << 3))];

        disp_pre_rec_DestroyRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyRenderPass)        != typeid(&ValidationObject::PreCallRecordDestroyRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyRenderPass) != typeid(&ValidationObject::PreCallRecordDestroyRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyRenderPass)     != typeid(&ValidationObject::PreCallRecordDestroyRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyRenderPass)          != typeid(&ValidationObject::PreCallRecordDestroyRenderPass)) << 3))];

        disp_post_rec_DestroyRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyRenderPass)        != typeid(&ValidationObject::PostCallRecordDestroyRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyRenderPass) != typeid(&ValidationObject::PostCallRecordDestroyRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyRenderPass)     != typeid(&ValidationObject::PostCallRecordDestroyRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyRenderPass)          != typeid(&ValidationObject::PostCallRecordDestroyRenderPass)) << 3))];

        disp_pre_val_GetRenderAreaGranularity = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetRenderAreaGranularity)        != typeid(&ValidationObject::PreCallValidateGetRenderAreaGranularity)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetRenderAreaGranularity) != typeid(&ValidationObject::PreCallValidateGetRenderAreaGranularity)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetRenderAreaGranularity)     != typeid(&ValidationObject::PreCallValidateGetRenderAreaGranularity)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetRenderAreaGranularity)          != typeid(&ValidationObject::PreCallValidateGetRenderAreaGranularity)) << 3))];

        disp_pre_rec_GetRenderAreaGranularity = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetRenderAreaGranularity)        != typeid(&ValidationObject::PreCallRecordGetRenderAreaGranularity)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetRenderAreaGranularity) != typeid(&ValidationObject::PreCallRecordGetRenderAreaGranularity)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetRenderAreaGranularity)     != typeid(&ValidationObject::PreCallRecordGetRenderAreaGranularity)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetRenderAreaGranularity)          != typeid(&ValidationObject::PreCallRecordGetRenderAreaGranularity)) << 3))];

        disp_post_rec_GetRenderAreaGranularity = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetRenderAreaGranularity)        != typeid(&ValidationObject::PostCallRecordGetRenderAreaGranularity)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetRenderAreaGranularity) != typeid(&ValidationObject::PostCallRecordGetRenderAreaGranularity)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetRenderAreaGranularity)     != typeid(&ValidationObject::PostCallRecordGetRenderAreaGranularity)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetRenderAreaGranularity)          != typeid(&ValidationObject::PostCallRecordGetRenderAreaGranularity)) << 3))];

        disp_pre_val_CreateCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateCommandPool)        != typeid(&ValidationObject::PreCallValidateCreateCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateCommandPool) != typeid(&ValidationObject::PreCallValidateCreateCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateCommandPool)     != typeid(&ValidationObject::PreCallValidateCreateCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateCommandPool)          != typeid(&ValidationObject::PreCallValidateCreateCommandPool)) << 3))];

        disp_pre_rec_CreateCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateCommandPool)        != typeid(&ValidationObject::PreCallRecordCreateCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateCommandPool) != typeid(&ValidationObject::PreCallRecordCreateCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateCommandPool)     != typeid(&ValidationObject::PreCallRecordCreateCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateCommandPool)          != typeid(&ValidationObject::PreCallRecordCreateCommandPool)) << 3))];

        disp_post_rec_CreateCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateCommandPool)        != typeid(&ValidationObject::PostCallRecordCreateCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateCommandPool) != typeid(&ValidationObject::PostCallRecordCreateCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateCommandPool)     != typeid(&ValidationObject::PostCallRecordCreateCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateCommandPool)          != typeid(&ValidationObject::PostCallRecordCreateCommandPool)) << 3))];

        disp_pre_val_DestroyCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyCommandPool)        != typeid(&ValidationObject::PreCallValidateDestroyCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyCommandPool) != typeid(&ValidationObject::PreCallValidateDestroyCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyCommandPool)     != typeid(&ValidationObject::PreCallValidateDestroyCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyCommandPool)          != typeid(&ValidationObject::PreCallValidateDestroyCommandPool)) << 3))];

        disp_pre_rec_DestroyCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyCommandPool)        != typeid(&ValidationObject::PreCallRecordDestroyCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyCommandPool) != typeid(&ValidationObject::PreCallRecordDestroyCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyCommandPool)     != typeid(&ValidationObject::PreCallRecordDestroyCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyCommandPool)          != typeid(&ValidationObject::PreCallRecordDestroyCommandPool)) << 3))];

        disp_post_rec_DestroyCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyCommandPool)        != typeid(&ValidationObject::PostCallRecordDestroyCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyCommandPool) != typeid(&ValidationObject::PostCallRecordDestroyCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyCommandPool)     != typeid(&ValidationObject::PostCallRecordDestroyCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyCommandPool)          != typeid(&ValidationObject::PostCallRecordDestroyCommandPool)) << 3))];

        disp_pre_val_ResetCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateResetCommandPool)        != typeid(&ValidationObject::PreCallValidateResetCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateResetCommandPool) != typeid(&ValidationObject::PreCallValidateResetCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateResetCommandPool)     != typeid(&ValidationObject::PreCallValidateResetCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateResetCommandPool)          != typeid(&ValidationObject::PreCallValidateResetCommandPool)) << 3))];

        disp_pre_rec_ResetCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordResetCommandPool)        != typeid(&ValidationObject::PreCallRecordResetCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordResetCommandPool) != typeid(&ValidationObject::PreCallRecordResetCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordResetCommandPool)     != typeid(&ValidationObject::PreCallRecordResetCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordResetCommandPool)          != typeid(&ValidationObject::PreCallRecordResetCommandPool)) << 3))];

        disp_post_rec_ResetCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordResetCommandPool)        != typeid(&ValidationObject::PostCallRecordResetCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordResetCommandPool) != typeid(&ValidationObject::PostCallRecordResetCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordResetCommandPool)     != typeid(&ValidationObject::PostCallRecordResetCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordResetCommandPool)          != typeid(&ValidationObject::PostCallRecordResetCommandPool)) << 3))];

        disp_pre_val_AllocateCommandBuffers = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateAllocateCommandBuffers)        != typeid(&ValidationObject::PreCallValidateAllocateCommandBuffers)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateAllocateCommandBuffers) != typeid(&ValidationObject::PreCallValidateAllocateCommandBuffers)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateAllocateCommandBuffers)     != typeid(&ValidationObject::PreCallValidateAllocateCommandBuffers)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateAllocateCommandBuffers)          != typeid(&ValidationObject::PreCallValidateAllocateCommandBuffers)) << 3))];

        disp_pre_rec_AllocateCommandBuffers = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordAllocateCommandBuffers)        != typeid(&ValidationObject::PreCallRecordAllocateCommandBuffers)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordAllocateCommandBuffers) != typeid(&ValidationObject::PreCallRecordAllocateCommandBuffers)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordAllocateCommandBuffers)     != typeid(&ValidationObject::PreCallRecordAllocateCommandBuffers)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordAllocateCommandBuffers)          != typeid(&ValidationObject::PreCallRecordAllocateCommandBuffers)) << 3))];

        disp_post_rec_AllocateCommandBuffers = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordAllocateCommandBuffers)        != typeid(&ValidationObject::PostCallRecordAllocateCommandBuffers)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordAllocateCommandBuffers) != typeid(&ValidationObject::PostCallRecordAllocateCommandBuffers)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordAllocateCommandBuffers)     != typeid(&ValidationObject::PostCallRecordAllocateCommandBuffers)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordAllocateCommandBuffers)          != typeid(&ValidationObject::PostCallRecordAllocateCommandBuffers)) << 3))];

        disp_pre_val_FreeCommandBuffers = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateFreeCommandBuffers)        != typeid(&ValidationObject::PreCallValidateFreeCommandBuffers)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateFreeCommandBuffers) != typeid(&ValidationObject::PreCallValidateFreeCommandBuffers)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateFreeCommandBuffers)     != typeid(&ValidationObject::PreCallValidateFreeCommandBuffers)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateFreeCommandBuffers)          != typeid(&ValidationObject::PreCallValidateFreeCommandBuffers)) << 3))];

        disp_pre_rec_FreeCommandBuffers = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordFreeCommandBuffers)        != typeid(&ValidationObject::PreCallRecordFreeCommandBuffers)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordFreeCommandBuffers) != typeid(&ValidationObject::PreCallRecordFreeCommandBuffers)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordFreeCommandBuffers)     != typeid(&ValidationObject::PreCallRecordFreeCommandBuffers)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordFreeCommandBuffers)          != typeid(&ValidationObject::PreCallRecordFreeCommandBuffers)) << 3))];

        disp_post_rec_FreeCommandBuffers = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordFreeCommandBuffers)        != typeid(&ValidationObject::PostCallRecordFreeCommandBuffers)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordFreeCommandBuffers) != typeid(&ValidationObject::PostCallRecordFreeCommandBuffers)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordFreeCommandBuffers)     != typeid(&ValidationObject::PostCallRecordFreeCommandBuffers)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordFreeCommandBuffers)          != typeid(&ValidationObject::PostCallRecordFreeCommandBuffers)) << 3))];

        disp_pre_val_BeginCommandBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateBeginCommandBuffer)        != typeid(&ValidationObject::PreCallValidateBeginCommandBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateBeginCommandBuffer) != typeid(&ValidationObject::PreCallValidateBeginCommandBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateBeginCommandBuffer)     != typeid(&ValidationObject::PreCallValidateBeginCommandBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateBeginCommandBuffer)          != typeid(&ValidationObject::PreCallValidateBeginCommandBuffer)) << 3))];

        disp_pre_rec_BeginCommandBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordBeginCommandBuffer)        != typeid(&ValidationObject::PreCallRecordBeginCommandBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordBeginCommandBuffer) != typeid(&ValidationObject::PreCallRecordBeginCommandBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordBeginCommandBuffer)     != typeid(&ValidationObject::PreCallRecordBeginCommandBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordBeginCommandBuffer)          != typeid(&ValidationObject::PreCallRecordBeginCommandBuffer)) << 3))];

        disp_post_rec_BeginCommandBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordBeginCommandBuffer)        != typeid(&ValidationObject::PostCallRecordBeginCommandBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordBeginCommandBuffer) != typeid(&ValidationObject::PostCallRecordBeginCommandBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordBeginCommandBuffer)     != typeid(&ValidationObject::PostCallRecordBeginCommandBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordBeginCommandBuffer)          != typeid(&ValidationObject::PostCallRecordBeginCommandBuffer)) << 3))];

        disp_pre_val_EndCommandBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateEndCommandBuffer)        != typeid(&ValidationObject::PreCallValidateEndCommandBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateEndCommandBuffer) != typeid(&ValidationObject::PreCallValidateEndCommandBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateEndCommandBuffer)     != typeid(&ValidationObject::PreCallValidateEndCommandBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateEndCommandBuffer)          != typeid(&ValidationObject::PreCallValidateEndCommandBuffer)) << 3))];

        disp_pre_rec_EndCommandBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordEndCommandBuffer)        != typeid(&ValidationObject::PreCallRecordEndCommandBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordEndCommandBuffer) != typeid(&ValidationObject::PreCallRecordEndCommandBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordEndCommandBuffer)     != typeid(&ValidationObject::PreCallRecordEndCommandBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordEndCommandBuffer)          != typeid(&ValidationObject::PreCallRecordEndCommandBuffer)) << 3))];

        disp_post_rec_EndCommandBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordEndCommandBuffer)        != typeid(&ValidationObject::PostCallRecordEndCommandBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordEndCommandBuffer) != typeid(&ValidationObject::PostCallRecordEndCommandBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordEndCommandBuffer)     != typeid(&ValidationObject::PostCallRecordEndCommandBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordEndCommandBuffer)          != typeid(&ValidationObject::PostCallRecordEndCommandBuffer)) << 3))];

        disp_pre_val_ResetCommandBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateResetCommandBuffer)        != typeid(&ValidationObject::PreCallValidateResetCommandBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateResetCommandBuffer) != typeid(&ValidationObject::PreCallValidateResetCommandBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateResetCommandBuffer)     != typeid(&ValidationObject::PreCallValidateResetCommandBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateResetCommandBuffer)          != typeid(&ValidationObject::PreCallValidateResetCommandBuffer)) << 3))];

        disp_pre_rec_ResetCommandBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordResetCommandBuffer)        != typeid(&ValidationObject::PreCallRecordResetCommandBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordResetCommandBuffer) != typeid(&ValidationObject::PreCallRecordResetCommandBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordResetCommandBuffer)     != typeid(&ValidationObject::PreCallRecordResetCommandBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordResetCommandBuffer)          != typeid(&ValidationObject::PreCallRecordResetCommandBuffer)) << 3))];

        disp_post_rec_ResetCommandBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordResetCommandBuffer)        != typeid(&ValidationObject::PostCallRecordResetCommandBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordResetCommandBuffer) != typeid(&ValidationObject::PostCallRecordResetCommandBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordResetCommandBuffer)     != typeid(&ValidationObject::PostCallRecordResetCommandBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordResetCommandBuffer)          != typeid(&ValidationObject::PostCallRecordResetCommandBuffer)) << 3))];

        disp_pre_val_CmdBindPipeline = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBindPipeline)        != typeid(&ValidationObject::PreCallValidateCmdBindPipeline)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBindPipeline) != typeid(&ValidationObject::PreCallValidateCmdBindPipeline)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBindPipeline)     != typeid(&ValidationObject::PreCallValidateCmdBindPipeline)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBindPipeline)          != typeid(&ValidationObject::PreCallValidateCmdBindPipeline)) << 3))];

        disp_pre_rec_CmdBindPipeline = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBindPipeline)        != typeid(&ValidationObject::PreCallRecordCmdBindPipeline)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBindPipeline) != typeid(&ValidationObject::PreCallRecordCmdBindPipeline)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBindPipeline)     != typeid(&ValidationObject::PreCallRecordCmdBindPipeline)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBindPipeline)          != typeid(&ValidationObject::PreCallRecordCmdBindPipeline)) << 3))];

        disp_post_rec_CmdBindPipeline = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBindPipeline)        != typeid(&ValidationObject::PostCallRecordCmdBindPipeline)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBindPipeline) != typeid(&ValidationObject::PostCallRecordCmdBindPipeline)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBindPipeline)     != typeid(&ValidationObject::PostCallRecordCmdBindPipeline)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBindPipeline)          != typeid(&ValidationObject::PostCallRecordCmdBindPipeline)) << 3))];

        disp_pre_val_CmdSetViewport = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetViewport)        != typeid(&ValidationObject::PreCallValidateCmdSetViewport)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetViewport) != typeid(&ValidationObject::PreCallValidateCmdSetViewport)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetViewport)     != typeid(&ValidationObject::PreCallValidateCmdSetViewport)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetViewport)          != typeid(&ValidationObject::PreCallValidateCmdSetViewport)) << 3))];

        disp_pre_rec_CmdSetViewport = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetViewport)        != typeid(&ValidationObject::PreCallRecordCmdSetViewport)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetViewport) != typeid(&ValidationObject::PreCallRecordCmdSetViewport)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetViewport)     != typeid(&ValidationObject::PreCallRecordCmdSetViewport)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetViewport)          != typeid(&ValidationObject::PreCallRecordCmdSetViewport)) << 3))];

        disp_post_rec_CmdSetViewport = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetViewport)        != typeid(&ValidationObject::PostCallRecordCmdSetViewport)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetViewport) != typeid(&ValidationObject::PostCallRecordCmdSetViewport)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetViewport)     != typeid(&ValidationObject::PostCallRecordCmdSetViewport)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetViewport)          != typeid(&ValidationObject::PostCallRecordCmdSetViewport)) << 3))];

        disp_pre_val_CmdSetScissor = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetScissor)        != typeid(&ValidationObject::PreCallValidateCmdSetScissor)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetScissor) != typeid(&ValidationObject::PreCallValidateCmdSetScissor)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetScissor)     != typeid(&ValidationObject::PreCallValidateCmdSetScissor)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetScissor)          != typeid(&ValidationObject::PreCallValidateCmdSetScissor)) << 3))];

        disp_pre_rec_CmdSetScissor = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetScissor)        != typeid(&ValidationObject::PreCallRecordCmdSetScissor)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetScissor) != typeid(&ValidationObject::PreCallRecordCmdSetScissor)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetScissor)     != typeid(&ValidationObject::PreCallRecordCmdSetScissor)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetScissor)          != typeid(&ValidationObject::PreCallRecordCmdSetScissor)) << 3))];

        disp_post_rec_CmdSetScissor = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetScissor)        != typeid(&ValidationObject::PostCallRecordCmdSetScissor)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetScissor) != typeid(&ValidationObject::PostCallRecordCmdSetScissor)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetScissor)     != typeid(&ValidationObject::PostCallRecordCmdSetScissor)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetScissor)          != typeid(&ValidationObject::PostCallRecordCmdSetScissor)) << 3))];

        disp_pre_val_CmdSetLineWidth = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetLineWidth)        != typeid(&ValidationObject::PreCallValidateCmdSetLineWidth)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetLineWidth) != typeid(&ValidationObject::PreCallValidateCmdSetLineWidth)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetLineWidth)     != typeid(&ValidationObject::PreCallValidateCmdSetLineWidth)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetLineWidth)          != typeid(&ValidationObject::PreCallValidateCmdSetLineWidth)) << 3))];

        disp_pre_rec_CmdSetLineWidth = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetLineWidth)        != typeid(&ValidationObject::PreCallRecordCmdSetLineWidth)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetLineWidth) != typeid(&ValidationObject::PreCallRecordCmdSetLineWidth)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetLineWidth)     != typeid(&ValidationObject::PreCallRecordCmdSetLineWidth)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetLineWidth)          != typeid(&ValidationObject::PreCallRecordCmdSetLineWidth)) << 3))];

        disp_post_rec_CmdSetLineWidth = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetLineWidth)        != typeid(&ValidationObject::PostCallRecordCmdSetLineWidth)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetLineWidth) != typeid(&ValidationObject::PostCallRecordCmdSetLineWidth)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetLineWidth)     != typeid(&ValidationObject::PostCallRecordCmdSetLineWidth)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetLineWidth)          != typeid(&ValidationObject::PostCallRecordCmdSetLineWidth)) << 3))];

        disp_pre_val_CmdSetDepthBias = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetDepthBias)        != typeid(&ValidationObject::PreCallValidateCmdSetDepthBias)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetDepthBias) != typeid(&ValidationObject::PreCallValidateCmdSetDepthBias)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetDepthBias)     != typeid(&ValidationObject::PreCallValidateCmdSetDepthBias)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetDepthBias)          != typeid(&ValidationObject::PreCallValidateCmdSetDepthBias)) << 3))];

        disp_pre_rec_CmdSetDepthBias = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetDepthBias)        != typeid(&ValidationObject::PreCallRecordCmdSetDepthBias)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetDepthBias) != typeid(&ValidationObject::PreCallRecordCmdSetDepthBias)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetDepthBias)     != typeid(&ValidationObject::PreCallRecordCmdSetDepthBias)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetDepthBias)          != typeid(&ValidationObject::PreCallRecordCmdSetDepthBias)) << 3))];

        disp_post_rec_CmdSetDepthBias = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetDepthBias)        != typeid(&ValidationObject::PostCallRecordCmdSetDepthBias)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetDepthBias) != typeid(&ValidationObject::PostCallRecordCmdSetDepthBias)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetDepthBias)     != typeid(&ValidationObject::PostCallRecordCmdSetDepthBias)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetDepthBias)          != typeid(&ValidationObject::PostCallRecordCmdSetDepthBias)) << 3))];

        disp_pre_val_CmdSetBlendConstants = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetBlendConstants)        != typeid(&ValidationObject::PreCallValidateCmdSetBlendConstants)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetBlendConstants) != typeid(&ValidationObject::PreCallValidateCmdSetBlendConstants)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetBlendConstants)     != typeid(&ValidationObject::PreCallValidateCmdSetBlendConstants)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetBlendConstants)          != typeid(&ValidationObject::PreCallValidateCmdSetBlendConstants)) << 3))];

        disp_pre_rec_CmdSetBlendConstants = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetBlendConstants)        != typeid(&ValidationObject::PreCallRecordCmdSetBlendConstants)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetBlendConstants) != typeid(&ValidationObject::PreCallRecordCmdSetBlendConstants)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetBlendConstants)     != typeid(&ValidationObject::PreCallRecordCmdSetBlendConstants)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetBlendConstants)          != typeid(&ValidationObject::PreCallRecordCmdSetBlendConstants)) << 3))];

        disp_post_rec_CmdSetBlendConstants = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetBlendConstants)        != typeid(&ValidationObject::PostCallRecordCmdSetBlendConstants)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetBlendConstants) != typeid(&ValidationObject::PostCallRecordCmdSetBlendConstants)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetBlendConstants)     != typeid(&ValidationObject::PostCallRecordCmdSetBlendConstants)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetBlendConstants)          != typeid(&ValidationObject::PostCallRecordCmdSetBlendConstants)) << 3))];

        disp_pre_val_CmdSetDepthBounds = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetDepthBounds)        != typeid(&ValidationObject::PreCallValidateCmdSetDepthBounds)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetDepthBounds) != typeid(&ValidationObject::PreCallValidateCmdSetDepthBounds)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetDepthBounds)     != typeid(&ValidationObject::PreCallValidateCmdSetDepthBounds)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetDepthBounds)          != typeid(&ValidationObject::PreCallValidateCmdSetDepthBounds)) << 3))];

        disp_pre_rec_CmdSetDepthBounds = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetDepthBounds)        != typeid(&ValidationObject::PreCallRecordCmdSetDepthBounds)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetDepthBounds) != typeid(&ValidationObject::PreCallRecordCmdSetDepthBounds)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetDepthBounds)     != typeid(&ValidationObject::PreCallRecordCmdSetDepthBounds)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetDepthBounds)          != typeid(&ValidationObject::PreCallRecordCmdSetDepthBounds)) << 3))];

        disp_post_rec_CmdSetDepthBounds = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetDepthBounds)        != typeid(&ValidationObject::PostCallRecordCmdSetDepthBounds)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetDepthBounds) != typeid(&ValidationObject::PostCallRecordCmdSetDepthBounds)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetDepthBounds)     != typeid(&ValidationObject::PostCallRecordCmdSetDepthBounds)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetDepthBounds)          != typeid(&ValidationObject::PostCallRecordCmdSetDepthBounds)) << 3))];

        disp_pre_val_CmdSetStencilCompareMask = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetStencilCompareMask)        != typeid(&ValidationObject::PreCallValidateCmdSetStencilCompareMask)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetStencilCompareMask) != typeid(&ValidationObject::PreCallValidateCmdSetStencilCompareMask)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetStencilCompareMask)     != typeid(&ValidationObject::PreCallValidateCmdSetStencilCompareMask)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetStencilCompareMask)          != typeid(&ValidationObject::PreCallValidateCmdSetStencilCompareMask)) << 3))];

        disp_pre_rec_CmdSetStencilCompareMask = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetStencilCompareMask)        != typeid(&ValidationObject::PreCallRecordCmdSetStencilCompareMask)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetStencilCompareMask) != typeid(&ValidationObject::PreCallRecordCmdSetStencilCompareMask)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetStencilCompareMask)     != typeid(&ValidationObject::PreCallRecordCmdSetStencilCompareMask)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetStencilCompareMask)          != typeid(&ValidationObject::PreCallRecordCmdSetStencilCompareMask)) << 3))];

        disp_post_rec_CmdSetStencilCompareMask = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetStencilCompareMask)        != typeid(&ValidationObject::PostCallRecordCmdSetStencilCompareMask)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetStencilCompareMask) != typeid(&ValidationObject::PostCallRecordCmdSetStencilCompareMask)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetStencilCompareMask)     != typeid(&ValidationObject::PostCallRecordCmdSetStencilCompareMask)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetStencilCompareMask)          != typeid(&ValidationObject::PostCallRecordCmdSetStencilCompareMask)) << 3))];

        disp_pre_val_CmdSetStencilWriteMask = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetStencilWriteMask)        != typeid(&ValidationObject::PreCallValidateCmdSetStencilWriteMask)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetStencilWriteMask) != typeid(&ValidationObject::PreCallValidateCmdSetStencilWriteMask)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetStencilWriteMask)     != typeid(&ValidationObject::PreCallValidateCmdSetStencilWriteMask)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetStencilWriteMask)          != typeid(&ValidationObject::PreCallValidateCmdSetStencilWriteMask)) << 3))];

        disp_pre_rec_CmdSetStencilWriteMask = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetStencilWriteMask)        != typeid(&ValidationObject::PreCallRecordCmdSetStencilWriteMask)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetStencilWriteMask) != typeid(&ValidationObject::PreCallRecordCmdSetStencilWriteMask)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetStencilWriteMask)     != typeid(&ValidationObject::PreCallRecordCmdSetStencilWriteMask)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetStencilWriteMask)          != typeid(&ValidationObject::PreCallRecordCmdSetStencilWriteMask)) << 3))];

        disp_post_rec_CmdSetStencilWriteMask = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetStencilWriteMask)        != typeid(&ValidationObject::PostCallRecordCmdSetStencilWriteMask)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetStencilWriteMask) != typeid(&ValidationObject::PostCallRecordCmdSetStencilWriteMask)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetStencilWriteMask)     != typeid(&ValidationObject::PostCallRecordCmdSetStencilWriteMask)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetStencilWriteMask)          != typeid(&ValidationObject::PostCallRecordCmdSetStencilWriteMask)) << 3))];

        disp_pre_val_CmdSetStencilReference = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetStencilReference)        != typeid(&ValidationObject::PreCallValidateCmdSetStencilReference)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetStencilReference) != typeid(&ValidationObject::PreCallValidateCmdSetStencilReference)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetStencilReference)     != typeid(&ValidationObject::PreCallValidateCmdSetStencilReference)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetStencilReference)          != typeid(&ValidationObject::PreCallValidateCmdSetStencilReference)) << 3))];

        disp_pre_rec_CmdSetStencilReference = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetStencilReference)        != typeid(&ValidationObject::PreCallRecordCmdSetStencilReference)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetStencilReference) != typeid(&ValidationObject::PreCallRecordCmdSetStencilReference)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetStencilReference)     != typeid(&ValidationObject::PreCallRecordCmdSetStencilReference)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetStencilReference)          != typeid(&ValidationObject::PreCallRecordCmdSetStencilReference)) << 3))];

        disp_post_rec_CmdSetStencilReference = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetStencilReference)        != typeid(&ValidationObject::PostCallRecordCmdSetStencilReference)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetStencilReference) != typeid(&ValidationObject::PostCallRecordCmdSetStencilReference)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetStencilReference)     != typeid(&ValidationObject::PostCallRecordCmdSetStencilReference)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetStencilReference)          != typeid(&ValidationObject::PostCallRecordCmdSetStencilReference)) << 3))];

        disp_pre_val_CmdBindDescriptorSets = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBindDescriptorSets)        != typeid(&ValidationObject::PreCallValidateCmdBindDescriptorSets)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBindDescriptorSets) != typeid(&ValidationObject::PreCallValidateCmdBindDescriptorSets)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBindDescriptorSets)     != typeid(&ValidationObject::PreCallValidateCmdBindDescriptorSets)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBindDescriptorSets)          != typeid(&ValidationObject::PreCallValidateCmdBindDescriptorSets)) << 3))];

        disp_pre_rec_CmdBindDescriptorSets = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBindDescriptorSets)        != typeid(&ValidationObject::PreCallRecordCmdBindDescriptorSets)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBindDescriptorSets) != typeid(&ValidationObject::PreCallRecordCmdBindDescriptorSets)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBindDescriptorSets)     != typeid(&ValidationObject::PreCallRecordCmdBindDescriptorSets)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBindDescriptorSets)          != typeid(&ValidationObject::PreCallRecordCmdBindDescriptorSets)) << 3))];

        disp_post_rec_CmdBindDescriptorSets = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBindDescriptorSets)        != typeid(&ValidationObject::PostCallRecordCmdBindDescriptorSets)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBindDescriptorSets) != typeid(&ValidationObject::PostCallRecordCmdBindDescriptorSets)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBindDescriptorSets)     != typeid(&ValidationObject::PostCallRecordCmdBindDescriptorSets)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBindDescriptorSets)          != typeid(&ValidationObject::PostCallRecordCmdBindDescriptorSets)) << 3))];

        disp_pre_val_CmdBindIndexBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBindIndexBuffer)        != typeid(&ValidationObject::PreCallValidateCmdBindIndexBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBindIndexBuffer) != typeid(&ValidationObject::PreCallValidateCmdBindIndexBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBindIndexBuffer)     != typeid(&ValidationObject::PreCallValidateCmdBindIndexBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBindIndexBuffer)          != typeid(&ValidationObject::PreCallValidateCmdBindIndexBuffer)) << 3))];

        disp_pre_rec_CmdBindIndexBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBindIndexBuffer)        != typeid(&ValidationObject::PreCallRecordCmdBindIndexBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBindIndexBuffer) != typeid(&ValidationObject::PreCallRecordCmdBindIndexBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBindIndexBuffer)     != typeid(&ValidationObject::PreCallRecordCmdBindIndexBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBindIndexBuffer)          != typeid(&ValidationObject::PreCallRecordCmdBindIndexBuffer)) << 3))];

        disp_post_rec_CmdBindIndexBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBindIndexBuffer)        != typeid(&ValidationObject::PostCallRecordCmdBindIndexBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBindIndexBuffer) != typeid(&ValidationObject::PostCallRecordCmdBindIndexBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBindIndexBuffer)     != typeid(&ValidationObject::PostCallRecordCmdBindIndexBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBindIndexBuffer)          != typeid(&ValidationObject::PostCallRecordCmdBindIndexBuffer)) << 3))];

        disp_pre_val_CmdBindVertexBuffers = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBindVertexBuffers)        != typeid(&ValidationObject::PreCallValidateCmdBindVertexBuffers)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBindVertexBuffers) != typeid(&ValidationObject::PreCallValidateCmdBindVertexBuffers)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBindVertexBuffers)     != typeid(&ValidationObject::PreCallValidateCmdBindVertexBuffers)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBindVertexBuffers)          != typeid(&ValidationObject::PreCallValidateCmdBindVertexBuffers)) << 3))];

        disp_pre_rec_CmdBindVertexBuffers = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBindVertexBuffers)        != typeid(&ValidationObject::PreCallRecordCmdBindVertexBuffers)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBindVertexBuffers) != typeid(&ValidationObject::PreCallRecordCmdBindVertexBuffers)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBindVertexBuffers)     != typeid(&ValidationObject::PreCallRecordCmdBindVertexBuffers)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBindVertexBuffers)          != typeid(&ValidationObject::PreCallRecordCmdBindVertexBuffers)) << 3))];

        disp_post_rec_CmdBindVertexBuffers = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBindVertexBuffers)        != typeid(&ValidationObject::PostCallRecordCmdBindVertexBuffers)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBindVertexBuffers) != typeid(&ValidationObject::PostCallRecordCmdBindVertexBuffers)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBindVertexBuffers)     != typeid(&ValidationObject::PostCallRecordCmdBindVertexBuffers)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBindVertexBuffers)          != typeid(&ValidationObject::PostCallRecordCmdBindVertexBuffers)) << 3))];

        disp_pre_val_CmdDraw = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDraw)        != typeid(&ValidationObject::PreCallValidateCmdDraw)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDraw) != typeid(&ValidationObject::PreCallValidateCmdDraw)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDraw)     != typeid(&ValidationObject::PreCallValidateCmdDraw)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDraw)          != typeid(&ValidationObject::PreCallValidateCmdDraw)) << 3))];

        disp_pre_rec_CmdDraw = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDraw)        != typeid(&ValidationObject::PreCallRecordCmdDraw)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDraw) != typeid(&ValidationObject::PreCallRecordCmdDraw)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDraw)     != typeid(&ValidationObject::PreCallRecordCmdDraw)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDraw)          != typeid(&ValidationObject::PreCallRecordCmdDraw)) << 3))];

        disp_post_rec_CmdDraw = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDraw)        != typeid(&ValidationObject::PostCallRecordCmdDraw)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDraw) != typeid(&ValidationObject::PostCallRecordCmdDraw)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDraw)     != typeid(&ValidationObject::PostCallRecordCmdDraw)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDraw)          != typeid(&ValidationObject::PostCallRecordCmdDraw)) << 3))];

        disp_pre_val_CmdDrawIndexed = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawIndexed)        != typeid(&ValidationObject::PreCallValidateCmdDrawIndexed)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawIndexed) != typeid(&ValidationObject::PreCallValidateCmdDrawIndexed)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawIndexed)     != typeid(&ValidationObject::PreCallValidateCmdDrawIndexed)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawIndexed)          != typeid(&ValidationObject::PreCallValidateCmdDrawIndexed)) << 3))];

        disp_pre_rec_CmdDrawIndexed = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawIndexed)        != typeid(&ValidationObject::PreCallRecordCmdDrawIndexed)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawIndexed) != typeid(&ValidationObject::PreCallRecordCmdDrawIndexed)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawIndexed)     != typeid(&ValidationObject::PreCallRecordCmdDrawIndexed)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawIndexed)          != typeid(&ValidationObject::PreCallRecordCmdDrawIndexed)) << 3))];

        disp_post_rec_CmdDrawIndexed = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawIndexed)        != typeid(&ValidationObject::PostCallRecordCmdDrawIndexed)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawIndexed) != typeid(&ValidationObject::PostCallRecordCmdDrawIndexed)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawIndexed)     != typeid(&ValidationObject::PostCallRecordCmdDrawIndexed)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawIndexed)          != typeid(&ValidationObject::PostCallRecordCmdDrawIndexed)) << 3))];

        disp_pre_val_CmdDrawIndirect = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawIndirect)        != typeid(&ValidationObject::PreCallValidateCmdDrawIndirect)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawIndirect) != typeid(&ValidationObject::PreCallValidateCmdDrawIndirect)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawIndirect)     != typeid(&ValidationObject::PreCallValidateCmdDrawIndirect)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawIndirect)          != typeid(&ValidationObject::PreCallValidateCmdDrawIndirect)) << 3))];

        disp_pre_rec_CmdDrawIndirect = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawIndirect)        != typeid(&ValidationObject::PreCallRecordCmdDrawIndirect)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawIndirect) != typeid(&ValidationObject::PreCallRecordCmdDrawIndirect)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawIndirect)     != typeid(&ValidationObject::PreCallRecordCmdDrawIndirect)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawIndirect)          != typeid(&ValidationObject::PreCallRecordCmdDrawIndirect)) << 3))];

        disp_post_rec_CmdDrawIndirect = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawIndirect)        != typeid(&ValidationObject::PostCallRecordCmdDrawIndirect)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawIndirect) != typeid(&ValidationObject::PostCallRecordCmdDrawIndirect)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawIndirect)     != typeid(&ValidationObject::PostCallRecordCmdDrawIndirect)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawIndirect)          != typeid(&ValidationObject::PostCallRecordCmdDrawIndirect)) << 3))];

        disp_pre_val_CmdDrawIndexedIndirect = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawIndexedIndirect)        != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirect)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawIndexedIndirect) != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirect)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawIndexedIndirect)     != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirect)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawIndexedIndirect)          != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirect)) << 3))];

        disp_pre_rec_CmdDrawIndexedIndirect = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawIndexedIndirect)        != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirect)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawIndexedIndirect) != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirect)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawIndexedIndirect)     != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirect)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawIndexedIndirect)          != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirect)) << 3))];

        disp_post_rec_CmdDrawIndexedIndirect = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawIndexedIndirect)        != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirect)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawIndexedIndirect) != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirect)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawIndexedIndirect)     != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirect)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawIndexedIndirect)          != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirect)) << 3))];

        disp_pre_val_CmdDispatch = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDispatch)        != typeid(&ValidationObject::PreCallValidateCmdDispatch)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDispatch) != typeid(&ValidationObject::PreCallValidateCmdDispatch)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDispatch)     != typeid(&ValidationObject::PreCallValidateCmdDispatch)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDispatch)          != typeid(&ValidationObject::PreCallValidateCmdDispatch)) << 3))];

        disp_pre_rec_CmdDispatch = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDispatch)        != typeid(&ValidationObject::PreCallRecordCmdDispatch)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDispatch) != typeid(&ValidationObject::PreCallRecordCmdDispatch)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDispatch)     != typeid(&ValidationObject::PreCallRecordCmdDispatch)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDispatch)          != typeid(&ValidationObject::PreCallRecordCmdDispatch)) << 3))];

        disp_post_rec_CmdDispatch = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDispatch)        != typeid(&ValidationObject::PostCallRecordCmdDispatch)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDispatch) != typeid(&ValidationObject::PostCallRecordCmdDispatch)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDispatch)     != typeid(&ValidationObject::PostCallRecordCmdDispatch)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDispatch)          != typeid(&ValidationObject::PostCallRecordCmdDispatch)) << 3))];

        disp_pre_val_CmdDispatchIndirect = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDispatchIndirect)        != typeid(&ValidationObject::PreCallValidateCmdDispatchIndirect)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDispatchIndirect) != typeid(&ValidationObject::PreCallValidateCmdDispatchIndirect)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDispatchIndirect)     != typeid(&ValidationObject::PreCallValidateCmdDispatchIndirect)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDispatchIndirect)          != typeid(&ValidationObject::PreCallValidateCmdDispatchIndirect)) << 3))];

        disp_pre_rec_CmdDispatchIndirect = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDispatchIndirect)        != typeid(&ValidationObject::PreCallRecordCmdDispatchIndirect)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDispatchIndirect) != typeid(&ValidationObject::PreCallRecordCmdDispatchIndirect)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDispatchIndirect)     != typeid(&ValidationObject::PreCallRecordCmdDispatchIndirect)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDispatchIndirect)          != typeid(&ValidationObject::PreCallRecordCmdDispatchIndirect)) << 3))];

        disp_post_rec_CmdDispatchIndirect = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDispatchIndirect)        != typeid(&ValidationObject::PostCallRecordCmdDispatchIndirect)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDispatchIndirect) != typeid(&ValidationObject::PostCallRecordCmdDispatchIndirect)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDispatchIndirect)     != typeid(&ValidationObject::PostCallRecordCmdDispatchIndirect)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDispatchIndirect)          != typeid(&ValidationObject::PostCallRecordCmdDispatchIndirect)) << 3))];

        disp_pre_val_CmdCopyBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyBuffer)        != typeid(&ValidationObject::PreCallValidateCmdCopyBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyBuffer) != typeid(&ValidationObject::PreCallValidateCmdCopyBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyBuffer)     != typeid(&ValidationObject::PreCallValidateCmdCopyBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyBuffer)          != typeid(&ValidationObject::PreCallValidateCmdCopyBuffer)) << 3))];

        disp_pre_rec_CmdCopyBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyBuffer)        != typeid(&ValidationObject::PreCallRecordCmdCopyBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyBuffer) != typeid(&ValidationObject::PreCallRecordCmdCopyBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyBuffer)     != typeid(&ValidationObject::PreCallRecordCmdCopyBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyBuffer)          != typeid(&ValidationObject::PreCallRecordCmdCopyBuffer)) << 3))];

        disp_post_rec_CmdCopyBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyBuffer)        != typeid(&ValidationObject::PostCallRecordCmdCopyBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyBuffer) != typeid(&ValidationObject::PostCallRecordCmdCopyBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyBuffer)     != typeid(&ValidationObject::PostCallRecordCmdCopyBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyBuffer)          != typeid(&ValidationObject::PostCallRecordCmdCopyBuffer)) << 3))];

        disp_pre_val_CmdCopyImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyImage)        != typeid(&ValidationObject::PreCallValidateCmdCopyImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyImage) != typeid(&ValidationObject::PreCallValidateCmdCopyImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyImage)     != typeid(&ValidationObject::PreCallValidateCmdCopyImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyImage)          != typeid(&ValidationObject::PreCallValidateCmdCopyImage)) << 3))];

        disp_pre_rec_CmdCopyImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyImage)        != typeid(&ValidationObject::PreCallRecordCmdCopyImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyImage) != typeid(&ValidationObject::PreCallRecordCmdCopyImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyImage)     != typeid(&ValidationObject::PreCallRecordCmdCopyImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyImage)          != typeid(&ValidationObject::PreCallRecordCmdCopyImage)) << 3))];

        disp_post_rec_CmdCopyImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyImage)        != typeid(&ValidationObject::PostCallRecordCmdCopyImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyImage) != typeid(&ValidationObject::PostCallRecordCmdCopyImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyImage)     != typeid(&ValidationObject::PostCallRecordCmdCopyImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyImage)          != typeid(&ValidationObject::PostCallRecordCmdCopyImage)) << 3))];

        disp_pre_val_CmdBlitImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBlitImage)        != typeid(&ValidationObject::PreCallValidateCmdBlitImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBlitImage) != typeid(&ValidationObject::PreCallValidateCmdBlitImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBlitImage)     != typeid(&ValidationObject::PreCallValidateCmdBlitImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBlitImage)          != typeid(&ValidationObject::PreCallValidateCmdBlitImage)) << 3))];

        disp_pre_rec_CmdBlitImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBlitImage)        != typeid(&ValidationObject::PreCallRecordCmdBlitImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBlitImage) != typeid(&ValidationObject::PreCallRecordCmdBlitImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBlitImage)     != typeid(&ValidationObject::PreCallRecordCmdBlitImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBlitImage)          != typeid(&ValidationObject::PreCallRecordCmdBlitImage)) << 3))];

        disp_post_rec_CmdBlitImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBlitImage)        != typeid(&ValidationObject::PostCallRecordCmdBlitImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBlitImage) != typeid(&ValidationObject::PostCallRecordCmdBlitImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBlitImage)     != typeid(&ValidationObject::PostCallRecordCmdBlitImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBlitImage)          != typeid(&ValidationObject::PostCallRecordCmdBlitImage)) << 3))];

        disp_pre_val_CmdCopyBufferToImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyBufferToImage)        != typeid(&ValidationObject::PreCallValidateCmdCopyBufferToImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyBufferToImage) != typeid(&ValidationObject::PreCallValidateCmdCopyBufferToImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyBufferToImage)     != typeid(&ValidationObject::PreCallValidateCmdCopyBufferToImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyBufferToImage)          != typeid(&ValidationObject::PreCallValidateCmdCopyBufferToImage)) << 3))];

        disp_pre_rec_CmdCopyBufferToImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyBufferToImage)        != typeid(&ValidationObject::PreCallRecordCmdCopyBufferToImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyBufferToImage) != typeid(&ValidationObject::PreCallRecordCmdCopyBufferToImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyBufferToImage)     != typeid(&ValidationObject::PreCallRecordCmdCopyBufferToImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyBufferToImage)          != typeid(&ValidationObject::PreCallRecordCmdCopyBufferToImage)) << 3))];

        disp_post_rec_CmdCopyBufferToImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyBufferToImage)        != typeid(&ValidationObject::PostCallRecordCmdCopyBufferToImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyBufferToImage) != typeid(&ValidationObject::PostCallRecordCmdCopyBufferToImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyBufferToImage)     != typeid(&ValidationObject::PostCallRecordCmdCopyBufferToImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyBufferToImage)          != typeid(&ValidationObject::PostCallRecordCmdCopyBufferToImage)) << 3))];

        disp_pre_val_CmdCopyImageToBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyImageToBuffer)        != typeid(&ValidationObject::PreCallValidateCmdCopyImageToBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyImageToBuffer) != typeid(&ValidationObject::PreCallValidateCmdCopyImageToBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyImageToBuffer)     != typeid(&ValidationObject::PreCallValidateCmdCopyImageToBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyImageToBuffer)          != typeid(&ValidationObject::PreCallValidateCmdCopyImageToBuffer)) << 3))];

        disp_pre_rec_CmdCopyImageToBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyImageToBuffer)        != typeid(&ValidationObject::PreCallRecordCmdCopyImageToBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyImageToBuffer) != typeid(&ValidationObject::PreCallRecordCmdCopyImageToBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyImageToBuffer)     != typeid(&ValidationObject::PreCallRecordCmdCopyImageToBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyImageToBuffer)          != typeid(&ValidationObject::PreCallRecordCmdCopyImageToBuffer)) << 3))];

        disp_post_rec_CmdCopyImageToBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyImageToBuffer)        != typeid(&ValidationObject::PostCallRecordCmdCopyImageToBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyImageToBuffer) != typeid(&ValidationObject::PostCallRecordCmdCopyImageToBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyImageToBuffer)     != typeid(&ValidationObject::PostCallRecordCmdCopyImageToBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyImageToBuffer)          != typeid(&ValidationObject::PostCallRecordCmdCopyImageToBuffer)) << 3))];

        disp_pre_val_CmdUpdateBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdUpdateBuffer)        != typeid(&ValidationObject::PreCallValidateCmdUpdateBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdUpdateBuffer) != typeid(&ValidationObject::PreCallValidateCmdUpdateBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdUpdateBuffer)     != typeid(&ValidationObject::PreCallValidateCmdUpdateBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdUpdateBuffer)          != typeid(&ValidationObject::PreCallValidateCmdUpdateBuffer)) << 3))];

        disp_pre_rec_CmdUpdateBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdUpdateBuffer)        != typeid(&ValidationObject::PreCallRecordCmdUpdateBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdUpdateBuffer) != typeid(&ValidationObject::PreCallRecordCmdUpdateBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdUpdateBuffer)     != typeid(&ValidationObject::PreCallRecordCmdUpdateBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdUpdateBuffer)          != typeid(&ValidationObject::PreCallRecordCmdUpdateBuffer)) << 3))];

        disp_post_rec_CmdUpdateBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdUpdateBuffer)        != typeid(&ValidationObject::PostCallRecordCmdUpdateBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdUpdateBuffer) != typeid(&ValidationObject::PostCallRecordCmdUpdateBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdUpdateBuffer)     != typeid(&ValidationObject::PostCallRecordCmdUpdateBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdUpdateBuffer)          != typeid(&ValidationObject::PostCallRecordCmdUpdateBuffer)) << 3))];

        disp_pre_val_CmdFillBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdFillBuffer)        != typeid(&ValidationObject::PreCallValidateCmdFillBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdFillBuffer) != typeid(&ValidationObject::PreCallValidateCmdFillBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdFillBuffer)     != typeid(&ValidationObject::PreCallValidateCmdFillBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdFillBuffer)          != typeid(&ValidationObject::PreCallValidateCmdFillBuffer)) << 3))];

        disp_pre_rec_CmdFillBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdFillBuffer)        != typeid(&ValidationObject::PreCallRecordCmdFillBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdFillBuffer) != typeid(&ValidationObject::PreCallRecordCmdFillBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdFillBuffer)     != typeid(&ValidationObject::PreCallRecordCmdFillBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdFillBuffer)          != typeid(&ValidationObject::PreCallRecordCmdFillBuffer)) << 3))];

        disp_post_rec_CmdFillBuffer = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdFillBuffer)        != typeid(&ValidationObject::PostCallRecordCmdFillBuffer)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdFillBuffer) != typeid(&ValidationObject::PostCallRecordCmdFillBuffer)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdFillBuffer)     != typeid(&ValidationObject::PostCallRecordCmdFillBuffer)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdFillBuffer)          != typeid(&ValidationObject::PostCallRecordCmdFillBuffer)) << 3))];

        disp_pre_val_CmdClearColorImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdClearColorImage)        != typeid(&ValidationObject::PreCallValidateCmdClearColorImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdClearColorImage) != typeid(&ValidationObject::PreCallValidateCmdClearColorImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdClearColorImage)     != typeid(&ValidationObject::PreCallValidateCmdClearColorImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdClearColorImage)          != typeid(&ValidationObject::PreCallValidateCmdClearColorImage)) << 3))];

        disp_pre_rec_CmdClearColorImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdClearColorImage)        != typeid(&ValidationObject::PreCallRecordCmdClearColorImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdClearColorImage) != typeid(&ValidationObject::PreCallRecordCmdClearColorImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdClearColorImage)     != typeid(&ValidationObject::PreCallRecordCmdClearColorImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdClearColorImage)          != typeid(&ValidationObject::PreCallRecordCmdClearColorImage)) << 3))];

        disp_post_rec_CmdClearColorImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdClearColorImage)        != typeid(&ValidationObject::PostCallRecordCmdClearColorImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdClearColorImage) != typeid(&ValidationObject::PostCallRecordCmdClearColorImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdClearColorImage)     != typeid(&ValidationObject::PostCallRecordCmdClearColorImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdClearColorImage)          != typeid(&ValidationObject::PostCallRecordCmdClearColorImage)) << 3))];

        disp_pre_val_CmdClearDepthStencilImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdClearDepthStencilImage)        != typeid(&ValidationObject::PreCallValidateCmdClearDepthStencilImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdClearDepthStencilImage) != typeid(&ValidationObject::PreCallValidateCmdClearDepthStencilImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdClearDepthStencilImage)     != typeid(&ValidationObject::PreCallValidateCmdClearDepthStencilImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdClearDepthStencilImage)          != typeid(&ValidationObject::PreCallValidateCmdClearDepthStencilImage)) << 3))];

        disp_pre_rec_CmdClearDepthStencilImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdClearDepthStencilImage)        != typeid(&ValidationObject::PreCallRecordCmdClearDepthStencilImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdClearDepthStencilImage) != typeid(&ValidationObject::PreCallRecordCmdClearDepthStencilImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdClearDepthStencilImage)     != typeid(&ValidationObject::PreCallRecordCmdClearDepthStencilImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdClearDepthStencilImage)          != typeid(&ValidationObject::PreCallRecordCmdClearDepthStencilImage)) << 3))];

        disp_post_rec_CmdClearDepthStencilImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdClearDepthStencilImage)        != typeid(&ValidationObject::PostCallRecordCmdClearDepthStencilImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdClearDepthStencilImage) != typeid(&ValidationObject::PostCallRecordCmdClearDepthStencilImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdClearDepthStencilImage)     != typeid(&ValidationObject::PostCallRecordCmdClearDepthStencilImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdClearDepthStencilImage)          != typeid(&ValidationObject::PostCallRecordCmdClearDepthStencilImage)) << 3))];

        disp_pre_val_CmdClearAttachments = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdClearAttachments)        != typeid(&ValidationObject::PreCallValidateCmdClearAttachments)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdClearAttachments) != typeid(&ValidationObject::PreCallValidateCmdClearAttachments)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdClearAttachments)     != typeid(&ValidationObject::PreCallValidateCmdClearAttachments)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdClearAttachments)          != typeid(&ValidationObject::PreCallValidateCmdClearAttachments)) << 3))];

        disp_pre_rec_CmdClearAttachments = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdClearAttachments)        != typeid(&ValidationObject::PreCallRecordCmdClearAttachments)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdClearAttachments) != typeid(&ValidationObject::PreCallRecordCmdClearAttachments)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdClearAttachments)     != typeid(&ValidationObject::PreCallRecordCmdClearAttachments)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdClearAttachments)          != typeid(&ValidationObject::PreCallRecordCmdClearAttachments)) << 3))];

        disp_post_rec_CmdClearAttachments = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdClearAttachments)        != typeid(&ValidationObject::PostCallRecordCmdClearAttachments)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdClearAttachments) != typeid(&ValidationObject::PostCallRecordCmdClearAttachments)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdClearAttachments)     != typeid(&ValidationObject::PostCallRecordCmdClearAttachments)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdClearAttachments)          != typeid(&ValidationObject::PostCallRecordCmdClearAttachments)) << 3))];

        disp_pre_val_CmdResolveImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdResolveImage)        != typeid(&ValidationObject::PreCallValidateCmdResolveImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdResolveImage) != typeid(&ValidationObject::PreCallValidateCmdResolveImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdResolveImage)     != typeid(&ValidationObject::PreCallValidateCmdResolveImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdResolveImage)          != typeid(&ValidationObject::PreCallValidateCmdResolveImage)) << 3))];

        disp_pre_rec_CmdResolveImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdResolveImage)        != typeid(&ValidationObject::PreCallRecordCmdResolveImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdResolveImage) != typeid(&ValidationObject::PreCallRecordCmdResolveImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdResolveImage)     != typeid(&ValidationObject::PreCallRecordCmdResolveImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdResolveImage)          != typeid(&ValidationObject::PreCallRecordCmdResolveImage)) << 3))];

        disp_post_rec_CmdResolveImage = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdResolveImage)        != typeid(&ValidationObject::PostCallRecordCmdResolveImage)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdResolveImage) != typeid(&ValidationObject::PostCallRecordCmdResolveImage)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdResolveImage)     != typeid(&ValidationObject::PostCallRecordCmdResolveImage)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdResolveImage)          != typeid(&ValidationObject::PostCallRecordCmdResolveImage)) << 3))];

        disp_pre_val_CmdSetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetEvent)        != typeid(&ValidationObject::PreCallValidateCmdSetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetEvent) != typeid(&ValidationObject::PreCallValidateCmdSetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetEvent)     != typeid(&ValidationObject::PreCallValidateCmdSetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetEvent)          != typeid(&ValidationObject::PreCallValidateCmdSetEvent)) << 3))];

        disp_pre_rec_CmdSetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetEvent)        != typeid(&ValidationObject::PreCallRecordCmdSetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetEvent) != typeid(&ValidationObject::PreCallRecordCmdSetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetEvent)     != typeid(&ValidationObject::PreCallRecordCmdSetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetEvent)          != typeid(&ValidationObject::PreCallRecordCmdSetEvent)) << 3))];

        disp_post_rec_CmdSetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetEvent)        != typeid(&ValidationObject::PostCallRecordCmdSetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetEvent) != typeid(&ValidationObject::PostCallRecordCmdSetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetEvent)     != typeid(&ValidationObject::PostCallRecordCmdSetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetEvent)          != typeid(&ValidationObject::PostCallRecordCmdSetEvent)) << 3))];

        disp_pre_val_CmdResetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdResetEvent)        != typeid(&ValidationObject::PreCallValidateCmdResetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdResetEvent) != typeid(&ValidationObject::PreCallValidateCmdResetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdResetEvent)     != typeid(&ValidationObject::PreCallValidateCmdResetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdResetEvent)          != typeid(&ValidationObject::PreCallValidateCmdResetEvent)) << 3))];

        disp_pre_rec_CmdResetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdResetEvent)        != typeid(&ValidationObject::PreCallRecordCmdResetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdResetEvent) != typeid(&ValidationObject::PreCallRecordCmdResetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdResetEvent)     != typeid(&ValidationObject::PreCallRecordCmdResetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdResetEvent)          != typeid(&ValidationObject::PreCallRecordCmdResetEvent)) << 3))];

        disp_post_rec_CmdResetEvent = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdResetEvent)        != typeid(&ValidationObject::PostCallRecordCmdResetEvent)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdResetEvent) != typeid(&ValidationObject::PostCallRecordCmdResetEvent)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdResetEvent)     != typeid(&ValidationObject::PostCallRecordCmdResetEvent)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdResetEvent)          != typeid(&ValidationObject::PostCallRecordCmdResetEvent)) << 3))];

        disp_pre_val_CmdWaitEvents = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdWaitEvents)        != typeid(&ValidationObject::PreCallValidateCmdWaitEvents)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdWaitEvents) != typeid(&ValidationObject::PreCallValidateCmdWaitEvents)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdWaitEvents)     != typeid(&ValidationObject::PreCallValidateCmdWaitEvents)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdWaitEvents)          != typeid(&ValidationObject::PreCallValidateCmdWaitEvents)) << 3))];

        disp_pre_rec_CmdWaitEvents = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdWaitEvents)        != typeid(&ValidationObject::PreCallRecordCmdWaitEvents)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdWaitEvents) != typeid(&ValidationObject::PreCallRecordCmdWaitEvents)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdWaitEvents)     != typeid(&ValidationObject::PreCallRecordCmdWaitEvents)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdWaitEvents)          != typeid(&ValidationObject::PreCallRecordCmdWaitEvents)) << 3))];

        disp_post_rec_CmdWaitEvents = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdWaitEvents)        != typeid(&ValidationObject::PostCallRecordCmdWaitEvents)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdWaitEvents) != typeid(&ValidationObject::PostCallRecordCmdWaitEvents)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdWaitEvents)     != typeid(&ValidationObject::PostCallRecordCmdWaitEvents)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdWaitEvents)          != typeid(&ValidationObject::PostCallRecordCmdWaitEvents)) << 3))];

        disp_pre_val_CmdPipelineBarrier = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdPipelineBarrier)        != typeid(&ValidationObject::PreCallValidateCmdPipelineBarrier)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdPipelineBarrier) != typeid(&ValidationObject::PreCallValidateCmdPipelineBarrier)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdPipelineBarrier)     != typeid(&ValidationObject::PreCallValidateCmdPipelineBarrier)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdPipelineBarrier)          != typeid(&ValidationObject::PreCallValidateCmdPipelineBarrier)) << 3))];

        disp_pre_rec_CmdPipelineBarrier = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdPipelineBarrier)        != typeid(&ValidationObject::PreCallRecordCmdPipelineBarrier)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdPipelineBarrier) != typeid(&ValidationObject::PreCallRecordCmdPipelineBarrier)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdPipelineBarrier)     != typeid(&ValidationObject::PreCallRecordCmdPipelineBarrier)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdPipelineBarrier)          != typeid(&ValidationObject::PreCallRecordCmdPipelineBarrier)) << 3))];

        disp_post_rec_CmdPipelineBarrier = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdPipelineBarrier)        != typeid(&ValidationObject::PostCallRecordCmdPipelineBarrier)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdPipelineBarrier) != typeid(&ValidationObject::PostCallRecordCmdPipelineBarrier)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdPipelineBarrier)     != typeid(&ValidationObject::PostCallRecordCmdPipelineBarrier)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdPipelineBarrier)          != typeid(&ValidationObject::PostCallRecordCmdPipelineBarrier)) << 3))];

        disp_pre_val_CmdBeginQuery = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBeginQuery)        != typeid(&ValidationObject::PreCallValidateCmdBeginQuery)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBeginQuery) != typeid(&ValidationObject::PreCallValidateCmdBeginQuery)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBeginQuery)     != typeid(&ValidationObject::PreCallValidateCmdBeginQuery)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBeginQuery)          != typeid(&ValidationObject::PreCallValidateCmdBeginQuery)) << 3))];

        disp_pre_rec_CmdBeginQuery = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBeginQuery)        != typeid(&ValidationObject::PreCallRecordCmdBeginQuery)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBeginQuery) != typeid(&ValidationObject::PreCallRecordCmdBeginQuery)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBeginQuery)     != typeid(&ValidationObject::PreCallRecordCmdBeginQuery)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBeginQuery)          != typeid(&ValidationObject::PreCallRecordCmdBeginQuery)) << 3))];

        disp_post_rec_CmdBeginQuery = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBeginQuery)        != typeid(&ValidationObject::PostCallRecordCmdBeginQuery)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBeginQuery) != typeid(&ValidationObject::PostCallRecordCmdBeginQuery)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBeginQuery)     != typeid(&ValidationObject::PostCallRecordCmdBeginQuery)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBeginQuery)          != typeid(&ValidationObject::PostCallRecordCmdBeginQuery)) << 3))];

        disp_pre_val_CmdEndQuery = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdEndQuery)        != typeid(&ValidationObject::PreCallValidateCmdEndQuery)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdEndQuery) != typeid(&ValidationObject::PreCallValidateCmdEndQuery)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdEndQuery)     != typeid(&ValidationObject::PreCallValidateCmdEndQuery)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdEndQuery)          != typeid(&ValidationObject::PreCallValidateCmdEndQuery)) << 3))];

        disp_pre_rec_CmdEndQuery = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdEndQuery)        != typeid(&ValidationObject::PreCallRecordCmdEndQuery)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdEndQuery) != typeid(&ValidationObject::PreCallRecordCmdEndQuery)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdEndQuery)     != typeid(&ValidationObject::PreCallRecordCmdEndQuery)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdEndQuery)          != typeid(&ValidationObject::PreCallRecordCmdEndQuery)) << 3))];

        disp_post_rec_CmdEndQuery = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdEndQuery)        != typeid(&ValidationObject::PostCallRecordCmdEndQuery)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdEndQuery) != typeid(&ValidationObject::PostCallRecordCmdEndQuery)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdEndQuery)     != typeid(&ValidationObject::PostCallRecordCmdEndQuery)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdEndQuery)          != typeid(&ValidationObject::PostCallRecordCmdEndQuery)) << 3))];

        disp_pre_val_CmdResetQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdResetQueryPool)        != typeid(&ValidationObject::PreCallValidateCmdResetQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdResetQueryPool) != typeid(&ValidationObject::PreCallValidateCmdResetQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdResetQueryPool)     != typeid(&ValidationObject::PreCallValidateCmdResetQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdResetQueryPool)          != typeid(&ValidationObject::PreCallValidateCmdResetQueryPool)) << 3))];

        disp_pre_rec_CmdResetQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdResetQueryPool)        != typeid(&ValidationObject::PreCallRecordCmdResetQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdResetQueryPool) != typeid(&ValidationObject::PreCallRecordCmdResetQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdResetQueryPool)     != typeid(&ValidationObject::PreCallRecordCmdResetQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdResetQueryPool)          != typeid(&ValidationObject::PreCallRecordCmdResetQueryPool)) << 3))];

        disp_post_rec_CmdResetQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdResetQueryPool)        != typeid(&ValidationObject::PostCallRecordCmdResetQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdResetQueryPool) != typeid(&ValidationObject::PostCallRecordCmdResetQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdResetQueryPool)     != typeid(&ValidationObject::PostCallRecordCmdResetQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdResetQueryPool)          != typeid(&ValidationObject::PostCallRecordCmdResetQueryPool)) << 3))];

        disp_pre_val_CmdWriteTimestamp = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdWriteTimestamp)        != typeid(&ValidationObject::PreCallValidateCmdWriteTimestamp)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdWriteTimestamp) != typeid(&ValidationObject::PreCallValidateCmdWriteTimestamp)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdWriteTimestamp)     != typeid(&ValidationObject::PreCallValidateCmdWriteTimestamp)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdWriteTimestamp)          != typeid(&ValidationObject::PreCallValidateCmdWriteTimestamp)) << 3))];

        disp_pre_rec_CmdWriteTimestamp = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdWriteTimestamp)        != typeid(&ValidationObject::PreCallRecordCmdWriteTimestamp)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdWriteTimestamp) != typeid(&ValidationObject::PreCallRecordCmdWriteTimestamp)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdWriteTimestamp)     != typeid(&ValidationObject::PreCallRecordCmdWriteTimestamp)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdWriteTimestamp)          != typeid(&ValidationObject::PreCallRecordCmdWriteTimestamp)) << 3))];

        disp_post_rec_CmdWriteTimestamp = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdWriteTimestamp)        != typeid(&ValidationObject::PostCallRecordCmdWriteTimestamp)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdWriteTimestamp) != typeid(&ValidationObject::PostCallRecordCmdWriteTimestamp)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdWriteTimestamp)     != typeid(&ValidationObject::PostCallRecordCmdWriteTimestamp)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdWriteTimestamp)          != typeid(&ValidationObject::PostCallRecordCmdWriteTimestamp)) << 3))];

        disp_pre_val_CmdCopyQueryPoolResults = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyQueryPoolResults)        != typeid(&ValidationObject::PreCallValidateCmdCopyQueryPoolResults)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyQueryPoolResults) != typeid(&ValidationObject::PreCallValidateCmdCopyQueryPoolResults)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyQueryPoolResults)     != typeid(&ValidationObject::PreCallValidateCmdCopyQueryPoolResults)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyQueryPoolResults)          != typeid(&ValidationObject::PreCallValidateCmdCopyQueryPoolResults)) << 3))];

        disp_pre_rec_CmdCopyQueryPoolResults = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyQueryPoolResults)        != typeid(&ValidationObject::PreCallRecordCmdCopyQueryPoolResults)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyQueryPoolResults) != typeid(&ValidationObject::PreCallRecordCmdCopyQueryPoolResults)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyQueryPoolResults)     != typeid(&ValidationObject::PreCallRecordCmdCopyQueryPoolResults)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyQueryPoolResults)          != typeid(&ValidationObject::PreCallRecordCmdCopyQueryPoolResults)) << 3))];

        disp_post_rec_CmdCopyQueryPoolResults = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyQueryPoolResults)        != typeid(&ValidationObject::PostCallRecordCmdCopyQueryPoolResults)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyQueryPoolResults) != typeid(&ValidationObject::PostCallRecordCmdCopyQueryPoolResults)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyQueryPoolResults)     != typeid(&ValidationObject::PostCallRecordCmdCopyQueryPoolResults)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyQueryPoolResults)          != typeid(&ValidationObject::PostCallRecordCmdCopyQueryPoolResults)) << 3))];

        disp_pre_val_CmdPushConstants = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdPushConstants)        != typeid(&ValidationObject::PreCallValidateCmdPushConstants)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdPushConstants) != typeid(&ValidationObject::PreCallValidateCmdPushConstants)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdPushConstants)     != typeid(&ValidationObject::PreCallValidateCmdPushConstants)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdPushConstants)          != typeid(&ValidationObject::PreCallValidateCmdPushConstants)) << 3))];

        disp_pre_rec_CmdPushConstants = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdPushConstants)        != typeid(&ValidationObject::PreCallRecordCmdPushConstants)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdPushConstants) != typeid(&ValidationObject::PreCallRecordCmdPushConstants)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdPushConstants)     != typeid(&ValidationObject::PreCallRecordCmdPushConstants)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdPushConstants)          != typeid(&ValidationObject::PreCallRecordCmdPushConstants)) << 3))];

        disp_post_rec_CmdPushConstants = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdPushConstants)        != typeid(&ValidationObject::PostCallRecordCmdPushConstants)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdPushConstants) != typeid(&ValidationObject::PostCallRecordCmdPushConstants)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdPushConstants)     != typeid(&ValidationObject::PostCallRecordCmdPushConstants)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdPushConstants)          != typeid(&ValidationObject::PostCallRecordCmdPushConstants)) << 3))];

        disp_pre_val_CmdBeginRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBeginRenderPass)        != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBeginRenderPass) != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBeginRenderPass)     != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBeginRenderPass)          != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass)) << 3))];

        disp_pre_rec_CmdBeginRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBeginRenderPass)        != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBeginRenderPass) != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBeginRenderPass)     != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBeginRenderPass)          != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass)) << 3))];

        disp_post_rec_CmdBeginRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBeginRenderPass)        != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBeginRenderPass) != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBeginRenderPass)     != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBeginRenderPass)          != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass)) << 3))];

        disp_pre_val_CmdNextSubpass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdNextSubpass)        != typeid(&ValidationObject::PreCallValidateCmdNextSubpass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdNextSubpass) != typeid(&ValidationObject::PreCallValidateCmdNextSubpass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdNextSubpass)     != typeid(&ValidationObject::PreCallValidateCmdNextSubpass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdNextSubpass)          != typeid(&ValidationObject::PreCallValidateCmdNextSubpass)) << 3))];

        disp_pre_rec_CmdNextSubpass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdNextSubpass)        != typeid(&ValidationObject::PreCallRecordCmdNextSubpass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdNextSubpass) != typeid(&ValidationObject::PreCallRecordCmdNextSubpass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdNextSubpass)     != typeid(&ValidationObject::PreCallRecordCmdNextSubpass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdNextSubpass)          != typeid(&ValidationObject::PreCallRecordCmdNextSubpass)) << 3))];

        disp_post_rec_CmdNextSubpass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdNextSubpass)        != typeid(&ValidationObject::PostCallRecordCmdNextSubpass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdNextSubpass) != typeid(&ValidationObject::PostCallRecordCmdNextSubpass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdNextSubpass)     != typeid(&ValidationObject::PostCallRecordCmdNextSubpass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdNextSubpass)          != typeid(&ValidationObject::PostCallRecordCmdNextSubpass)) << 3))];

        disp_pre_val_CmdEndRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdEndRenderPass)        != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdEndRenderPass) != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdEndRenderPass)     != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdEndRenderPass)          != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass)) << 3))];

        disp_pre_rec_CmdEndRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdEndRenderPass)        != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdEndRenderPass) != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdEndRenderPass)     != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdEndRenderPass)          != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass)) << 3))];

        disp_post_rec_CmdEndRenderPass = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdEndRenderPass)        != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdEndRenderPass) != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdEndRenderPass)     != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdEndRenderPass)          != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass)) << 3))];

        disp_pre_val_CmdExecuteCommands = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdExecuteCommands)        != typeid(&ValidationObject::PreCallValidateCmdExecuteCommands)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdExecuteCommands) != typeid(&ValidationObject::PreCallValidateCmdExecuteCommands)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdExecuteCommands)     != typeid(&ValidationObject::PreCallValidateCmdExecuteCommands)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdExecuteCommands)          != typeid(&ValidationObject::PreCallValidateCmdExecuteCommands)) << 3))];

        disp_pre_rec_CmdExecuteCommands = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdExecuteCommands)        != typeid(&ValidationObject::PreCallRecordCmdExecuteCommands)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdExecuteCommands) != typeid(&ValidationObject::PreCallRecordCmdExecuteCommands)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdExecuteCommands)     != typeid(&ValidationObject::PreCallRecordCmdExecuteCommands)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdExecuteCommands)          != typeid(&ValidationObject::PreCallRecordCmdExecuteCommands)) << 3))];

        disp_post_rec_CmdExecuteCommands = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdExecuteCommands)        != typeid(&ValidationObject::PostCallRecordCmdExecuteCommands)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdExecuteCommands) != typeid(&ValidationObject::PostCallRecordCmdExecuteCommands)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdExecuteCommands)     != typeid(&ValidationObject::PostCallRecordCmdExecuteCommands)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdExecuteCommands)          != typeid(&ValidationObject::PostCallRecordCmdExecuteCommands)) << 3))];

        disp_pre_val_BindBufferMemory2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateBindBufferMemory2)        != typeid(&ValidationObject::PreCallValidateBindBufferMemory2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateBindBufferMemory2) != typeid(&ValidationObject::PreCallValidateBindBufferMemory2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateBindBufferMemory2)     != typeid(&ValidationObject::PreCallValidateBindBufferMemory2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateBindBufferMemory2)          != typeid(&ValidationObject::PreCallValidateBindBufferMemory2)) << 3))];

        disp_pre_rec_BindBufferMemory2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordBindBufferMemory2)        != typeid(&ValidationObject::PreCallRecordBindBufferMemory2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordBindBufferMemory2) != typeid(&ValidationObject::PreCallRecordBindBufferMemory2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordBindBufferMemory2)     != typeid(&ValidationObject::PreCallRecordBindBufferMemory2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordBindBufferMemory2)          != typeid(&ValidationObject::PreCallRecordBindBufferMemory2)) << 3))];

        disp_post_rec_BindBufferMemory2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordBindBufferMemory2)        != typeid(&ValidationObject::PostCallRecordBindBufferMemory2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordBindBufferMemory2) != typeid(&ValidationObject::PostCallRecordBindBufferMemory2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordBindBufferMemory2)     != typeid(&ValidationObject::PostCallRecordBindBufferMemory2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordBindBufferMemory2)          != typeid(&ValidationObject::PostCallRecordBindBufferMemory2)) << 3))];

        disp_pre_val_BindImageMemory2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateBindImageMemory2)        != typeid(&ValidationObject::PreCallValidateBindImageMemory2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateBindImageMemory2) != typeid(&ValidationObject::PreCallValidateBindImageMemory2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateBindImageMemory2)     != typeid(&ValidationObject::PreCallValidateBindImageMemory2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateBindImageMemory2)          != typeid(&ValidationObject::PreCallValidateBindImageMemory2)) << 3))];

        disp_pre_rec_BindImageMemory2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordBindImageMemory2)        != typeid(&ValidationObject::PreCallRecordBindImageMemory2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordBindImageMemory2) != typeid(&ValidationObject::PreCallRecordBindImageMemory2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordBindImageMemory2)     != typeid(&ValidationObject::PreCallRecordBindImageMemory2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordBindImageMemory2)          != typeid(&ValidationObject::PreCallRecordBindImageMemory2)) << 3))];

        disp_post_rec_BindImageMemory2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordBindImageMemory2)        != typeid(&ValidationObject::PostCallRecordBindImageMemory2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordBindImageMemory2) != typeid(&ValidationObject::PostCallRecordBindImageMemory2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordBindImageMemory2)     != typeid(&ValidationObject::PostCallRecordBindImageMemory2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordBindImageMemory2)          != typeid(&ValidationObject::PostCallRecordBindImageMemory2)) << 3))];

        disp_pre_val_GetDeviceGroupPeerMemoryFeatures = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceGroupPeerMemoryFeatures)        != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPeerMemoryFeatures)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceGroupPeerMemoryFeatures) != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPeerMemoryFeatures)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceGroupPeerMemoryFeatures)     != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPeerMemoryFeatures)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceGroupPeerMemoryFeatures)          != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPeerMemoryFeatures)) << 3))];

        disp_pre_rec_GetDeviceGroupPeerMemoryFeatures = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceGroupPeerMemoryFeatures)        != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPeerMemoryFeatures)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceGroupPeerMemoryFeatures) != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPeerMemoryFeatures)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceGroupPeerMemoryFeatures)     != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPeerMemoryFeatures)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceGroupPeerMemoryFeatures)          != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPeerMemoryFeatures)) << 3))];

        disp_post_rec_GetDeviceGroupPeerMemoryFeatures = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceGroupPeerMemoryFeatures)        != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPeerMemoryFeatures)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceGroupPeerMemoryFeatures) != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPeerMemoryFeatures)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceGroupPeerMemoryFeatures)     != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPeerMemoryFeatures)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceGroupPeerMemoryFeatures)          != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPeerMemoryFeatures)) << 3))];

        disp_pre_val_CmdSetDeviceMask = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetDeviceMask)        != typeid(&ValidationObject::PreCallValidateCmdSetDeviceMask)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetDeviceMask) != typeid(&ValidationObject::PreCallValidateCmdSetDeviceMask)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetDeviceMask)     != typeid(&ValidationObject::PreCallValidateCmdSetDeviceMask)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetDeviceMask)          != typeid(&ValidationObject::PreCallValidateCmdSetDeviceMask)) << 3))];

        disp_pre_rec_CmdSetDeviceMask = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetDeviceMask)        != typeid(&ValidationObject::PreCallRecordCmdSetDeviceMask)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetDeviceMask) != typeid(&ValidationObject::PreCallRecordCmdSetDeviceMask)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetDeviceMask)     != typeid(&ValidationObject::PreCallRecordCmdSetDeviceMask)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetDeviceMask)          != typeid(&ValidationObject::PreCallRecordCmdSetDeviceMask)) << 3))];

        disp_post_rec_CmdSetDeviceMask = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetDeviceMask)        != typeid(&ValidationObject::PostCallRecordCmdSetDeviceMask)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetDeviceMask) != typeid(&ValidationObject::PostCallRecordCmdSetDeviceMask)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetDeviceMask)     != typeid(&ValidationObject::PostCallRecordCmdSetDeviceMask)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetDeviceMask)          != typeid(&ValidationObject::PostCallRecordCmdSetDeviceMask)) << 3))];

        disp_pre_val_CmdDispatchBase = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDispatchBase)        != typeid(&ValidationObject::PreCallValidateCmdDispatchBase)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDispatchBase) != typeid(&ValidationObject::PreCallValidateCmdDispatchBase)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDispatchBase)     != typeid(&ValidationObject::PreCallValidateCmdDispatchBase)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDispatchBase)          != typeid(&ValidationObject::PreCallValidateCmdDispatchBase)) << 3))];

        disp_pre_rec_CmdDispatchBase = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDispatchBase)        != typeid(&ValidationObject::PreCallRecordCmdDispatchBase)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDispatchBase) != typeid(&ValidationObject::PreCallRecordCmdDispatchBase)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDispatchBase)     != typeid(&ValidationObject::PreCallRecordCmdDispatchBase)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDispatchBase)          != typeid(&ValidationObject::PreCallRecordCmdDispatchBase)) << 3))];

        disp_post_rec_CmdDispatchBase = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDispatchBase)        != typeid(&ValidationObject::PostCallRecordCmdDispatchBase)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDispatchBase) != typeid(&ValidationObject::PostCallRecordCmdDispatchBase)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDispatchBase)     != typeid(&ValidationObject::PostCallRecordCmdDispatchBase)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDispatchBase)          != typeid(&ValidationObject::PostCallRecordCmdDispatchBase)) << 3))];

        disp_pre_val_GetImageMemoryRequirements2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetImageMemoryRequirements2)        != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetImageMemoryRequirements2) != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetImageMemoryRequirements2)     != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetImageMemoryRequirements2)          != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements2)) << 3))];

        disp_pre_rec_GetImageMemoryRequirements2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetImageMemoryRequirements2)        != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetImageMemoryRequirements2) != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetImageMemoryRequirements2)     != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetImageMemoryRequirements2)          != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements2)) << 3))];

        disp_post_rec_GetImageMemoryRequirements2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetImageMemoryRequirements2)        != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetImageMemoryRequirements2) != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetImageMemoryRequirements2)     != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetImageMemoryRequirements2)          != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements2)) << 3))];

        disp_pre_val_GetBufferMemoryRequirements2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetBufferMemoryRequirements2)        != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetBufferMemoryRequirements2) != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetBufferMemoryRequirements2)     != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetBufferMemoryRequirements2)          != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements2)) << 3))];

        disp_pre_rec_GetBufferMemoryRequirements2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetBufferMemoryRequirements2)        != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetBufferMemoryRequirements2) != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetBufferMemoryRequirements2)     != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetBufferMemoryRequirements2)          != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements2)) << 3))];

        disp_post_rec_GetBufferMemoryRequirements2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetBufferMemoryRequirements2)        != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetBufferMemoryRequirements2) != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetBufferMemoryRequirements2)     != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetBufferMemoryRequirements2)          != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements2)) << 3))];

        disp_pre_val_GetImageSparseMemoryRequirements2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetImageSparseMemoryRequirements2)        != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetImageSparseMemoryRequirements2) != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetImageSparseMemoryRequirements2)     != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetImageSparseMemoryRequirements2)          != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements2)) << 3))];

        disp_pre_rec_GetImageSparseMemoryRequirements2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetImageSparseMemoryRequirements2)        != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetImageSparseMemoryRequirements2) != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetImageSparseMemoryRequirements2)     != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetImageSparseMemoryRequirements2)          != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements2)) << 3))];

        disp_post_rec_GetImageSparseMemoryRequirements2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetImageSparseMemoryRequirements2)        != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetImageSparseMemoryRequirements2) != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetImageSparseMemoryRequirements2)     != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetImageSparseMemoryRequirements2)          != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements2)) << 3))];

        disp_pre_val_TrimCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateTrimCommandPool)        != typeid(&ValidationObject::PreCallValidateTrimCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateTrimCommandPool) != typeid(&ValidationObject::PreCallValidateTrimCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateTrimCommandPool)     != typeid(&ValidationObject::PreCallValidateTrimCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateTrimCommandPool)          != typeid(&ValidationObject::PreCallValidateTrimCommandPool)) << 3))];

        disp_pre_rec_TrimCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordTrimCommandPool)        != typeid(&ValidationObject::PreCallRecordTrimCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordTrimCommandPool) != typeid(&ValidationObject::PreCallRecordTrimCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordTrimCommandPool)     != typeid(&ValidationObject::PreCallRecordTrimCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordTrimCommandPool)          != typeid(&ValidationObject::PreCallRecordTrimCommandPool)) << 3))];

        disp_post_rec_TrimCommandPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordTrimCommandPool)        != typeid(&ValidationObject::PostCallRecordTrimCommandPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordTrimCommandPool) != typeid(&ValidationObject::PostCallRecordTrimCommandPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordTrimCommandPool)     != typeid(&ValidationObject::PostCallRecordTrimCommandPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordTrimCommandPool)          != typeid(&ValidationObject::PostCallRecordTrimCommandPool)) << 3))];

        disp_pre_val_GetDeviceQueue2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceQueue2)        != typeid(&ValidationObject::PreCallValidateGetDeviceQueue2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceQueue2) != typeid(&ValidationObject::PreCallValidateGetDeviceQueue2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceQueue2)     != typeid(&ValidationObject::PreCallValidateGetDeviceQueue2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceQueue2)          != typeid(&ValidationObject::PreCallValidateGetDeviceQueue2)) << 3))];

        disp_pre_rec_GetDeviceQueue2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceQueue2)        != typeid(&ValidationObject::PreCallRecordGetDeviceQueue2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceQueue2) != typeid(&ValidationObject::PreCallRecordGetDeviceQueue2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceQueue2)     != typeid(&ValidationObject::PreCallRecordGetDeviceQueue2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceQueue2)          != typeid(&ValidationObject::PreCallRecordGetDeviceQueue2)) << 3))];

        disp_post_rec_GetDeviceQueue2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceQueue2)        != typeid(&ValidationObject::PostCallRecordGetDeviceQueue2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceQueue2) != typeid(&ValidationObject::PostCallRecordGetDeviceQueue2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceQueue2)     != typeid(&ValidationObject::PostCallRecordGetDeviceQueue2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceQueue2)          != typeid(&ValidationObject::PostCallRecordGetDeviceQueue2)) << 3))];

        disp_pre_val_CreateSamplerYcbcrConversion = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateSamplerYcbcrConversion)        != typeid(&ValidationObject::PreCallValidateCreateSamplerYcbcrConversion)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateSamplerYcbcrConversion) != typeid(&ValidationObject::PreCallValidateCreateSamplerYcbcrConversion)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateSamplerYcbcrConversion)     != typeid(&ValidationObject::PreCallValidateCreateSamplerYcbcrConversion)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateSamplerYcbcrConversion)          != typeid(&ValidationObject::PreCallValidateCreateSamplerYcbcrConversion)) << 3))];

        disp_pre_rec_CreateSamplerYcbcrConversion = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateSamplerYcbcrConversion)        != typeid(&ValidationObject::PreCallRecordCreateSamplerYcbcrConversion)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateSamplerYcbcrConversion) != typeid(&ValidationObject::PreCallRecordCreateSamplerYcbcrConversion)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateSamplerYcbcrConversion)     != typeid(&ValidationObject::PreCallRecordCreateSamplerYcbcrConversion)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateSamplerYcbcrConversion)          != typeid(&ValidationObject::PreCallRecordCreateSamplerYcbcrConversion)) << 3))];

        disp_post_rec_CreateSamplerYcbcrConversion = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateSamplerYcbcrConversion)        != typeid(&ValidationObject::PostCallRecordCreateSamplerYcbcrConversion)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateSamplerYcbcrConversion) != typeid(&ValidationObject::PostCallRecordCreateSamplerYcbcrConversion)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateSamplerYcbcrConversion)     != typeid(&ValidationObject::PostCallRecordCreateSamplerYcbcrConversion)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateSamplerYcbcrConversion)          != typeid(&ValidationObject::PostCallRecordCreateSamplerYcbcrConversion)) << 3))];

        disp_pre_val_DestroySamplerYcbcrConversion = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroySamplerYcbcrConversion)        != typeid(&ValidationObject::PreCallValidateDestroySamplerYcbcrConversion)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroySamplerYcbcrConversion) != typeid(&ValidationObject::PreCallValidateDestroySamplerYcbcrConversion)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroySamplerYcbcrConversion)     != typeid(&ValidationObject::PreCallValidateDestroySamplerYcbcrConversion)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroySamplerYcbcrConversion)          != typeid(&ValidationObject::PreCallValidateDestroySamplerYcbcrConversion)) << 3))];

        disp_pre_rec_DestroySamplerYcbcrConversion = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroySamplerYcbcrConversion)        != typeid(&ValidationObject::PreCallRecordDestroySamplerYcbcrConversion)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroySamplerYcbcrConversion) != typeid(&ValidationObject::PreCallRecordDestroySamplerYcbcrConversion)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroySamplerYcbcrConversion)     != typeid(&ValidationObject::PreCallRecordDestroySamplerYcbcrConversion)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroySamplerYcbcrConversion)          != typeid(&ValidationObject::PreCallRecordDestroySamplerYcbcrConversion)) << 3))];

        disp_post_rec_DestroySamplerYcbcrConversion = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroySamplerYcbcrConversion)        != typeid(&ValidationObject::PostCallRecordDestroySamplerYcbcrConversion)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroySamplerYcbcrConversion) != typeid(&ValidationObject::PostCallRecordDestroySamplerYcbcrConversion)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroySamplerYcbcrConversion)     != typeid(&ValidationObject::PostCallRecordDestroySamplerYcbcrConversion)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroySamplerYcbcrConversion)          != typeid(&ValidationObject::PostCallRecordDestroySamplerYcbcrConversion)) << 3))];

        disp_pre_val_CreateDescriptorUpdateTemplate = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateDescriptorUpdateTemplate)        != typeid(&ValidationObject::PreCallValidateCreateDescriptorUpdateTemplate)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateDescriptorUpdateTemplate) != typeid(&ValidationObject::PreCallValidateCreateDescriptorUpdateTemplate)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateDescriptorUpdateTemplate)     != typeid(&ValidationObject::PreCallValidateCreateDescriptorUpdateTemplate)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateDescriptorUpdateTemplate)          != typeid(&ValidationObject::PreCallValidateCreateDescriptorUpdateTemplate)) << 3))];

        disp_pre_rec_CreateDescriptorUpdateTemplate = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateDescriptorUpdateTemplate)        != typeid(&ValidationObject::PreCallRecordCreateDescriptorUpdateTemplate)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateDescriptorUpdateTemplate) != typeid(&ValidationObject::PreCallRecordCreateDescriptorUpdateTemplate)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateDescriptorUpdateTemplate)     != typeid(&ValidationObject::PreCallRecordCreateDescriptorUpdateTemplate)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateDescriptorUpdateTemplate)          != typeid(&ValidationObject::PreCallRecordCreateDescriptorUpdateTemplate)) << 3))];

        disp_post_rec_CreateDescriptorUpdateTemplate = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateDescriptorUpdateTemplate)        != typeid(&ValidationObject::PostCallRecordCreateDescriptorUpdateTemplate)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateDescriptorUpdateTemplate) != typeid(&ValidationObject::PostCallRecordCreateDescriptorUpdateTemplate)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateDescriptorUpdateTemplate)     != typeid(&ValidationObject::PostCallRecordCreateDescriptorUpdateTemplate)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateDescriptorUpdateTemplate)          != typeid(&ValidationObject::PostCallRecordCreateDescriptorUpdateTemplate)) << 3))];

        disp_pre_val_DestroyDescriptorUpdateTemplate = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyDescriptorUpdateTemplate)        != typeid(&ValidationObject::PreCallValidateDestroyDescriptorUpdateTemplate)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyDescriptorUpdateTemplate) != typeid(&ValidationObject::PreCallValidateDestroyDescriptorUpdateTemplate)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyDescriptorUpdateTemplate)     != typeid(&ValidationObject::PreCallValidateDestroyDescriptorUpdateTemplate)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyDescriptorUpdateTemplate)          != typeid(&ValidationObject::PreCallValidateDestroyDescriptorUpdateTemplate)) << 3))];

        disp_pre_rec_DestroyDescriptorUpdateTemplate = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyDescriptorUpdateTemplate)        != typeid(&ValidationObject::PreCallRecordDestroyDescriptorUpdateTemplate)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyDescriptorUpdateTemplate) != typeid(&ValidationObject::PreCallRecordDestroyDescriptorUpdateTemplate)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyDescriptorUpdateTemplate)     != typeid(&ValidationObject::PreCallRecordDestroyDescriptorUpdateTemplate)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyDescriptorUpdateTemplate)          != typeid(&ValidationObject::PreCallRecordDestroyDescriptorUpdateTemplate)) << 3))];

        disp_post_rec_DestroyDescriptorUpdateTemplate = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyDescriptorUpdateTemplate)        != typeid(&ValidationObject::PostCallRecordDestroyDescriptorUpdateTemplate)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyDescriptorUpdateTemplate) != typeid(&ValidationObject::PostCallRecordDestroyDescriptorUpdateTemplate)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyDescriptorUpdateTemplate)     != typeid(&ValidationObject::PostCallRecordDestroyDescriptorUpdateTemplate)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyDescriptorUpdateTemplate)          != typeid(&ValidationObject::PostCallRecordDestroyDescriptorUpdateTemplate)) << 3))];

        disp_pre_val_UpdateDescriptorSetWithTemplate = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateUpdateDescriptorSetWithTemplate)        != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSetWithTemplate)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateUpdateDescriptorSetWithTemplate) != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSetWithTemplate)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateUpdateDescriptorSetWithTemplate)     != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSetWithTemplate)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateUpdateDescriptorSetWithTemplate)          != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSetWithTemplate)) << 3))];

        disp_pre_rec_UpdateDescriptorSetWithTemplate = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordUpdateDescriptorSetWithTemplate)        != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSetWithTemplate)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordUpdateDescriptorSetWithTemplate) != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSetWithTemplate)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordUpdateDescriptorSetWithTemplate)     != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSetWithTemplate)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordUpdateDescriptorSetWithTemplate)          != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSetWithTemplate)) << 3))];

        disp_post_rec_UpdateDescriptorSetWithTemplate = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordUpdateDescriptorSetWithTemplate)        != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSetWithTemplate)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordUpdateDescriptorSetWithTemplate) != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSetWithTemplate)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordUpdateDescriptorSetWithTemplate)     != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSetWithTemplate)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordUpdateDescriptorSetWithTemplate)          != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSetWithTemplate)) << 3))];

        disp_pre_val_GetDescriptorSetLayoutSupport = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDescriptorSetLayoutSupport)        != typeid(&ValidationObject::PreCallValidateGetDescriptorSetLayoutSupport)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDescriptorSetLayoutSupport) != typeid(&ValidationObject::PreCallValidateGetDescriptorSetLayoutSupport)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDescriptorSetLayoutSupport)     != typeid(&ValidationObject::PreCallValidateGetDescriptorSetLayoutSupport)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDescriptorSetLayoutSupport)          != typeid(&ValidationObject::PreCallValidateGetDescriptorSetLayoutSupport)) << 3))];

        disp_pre_rec_GetDescriptorSetLayoutSupport = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDescriptorSetLayoutSupport)        != typeid(&ValidationObject::PreCallRecordGetDescriptorSetLayoutSupport)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDescriptorSetLayoutSupport) != typeid(&ValidationObject::PreCallRecordGetDescriptorSetLayoutSupport)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDescriptorSetLayoutSupport)     != typeid(&ValidationObject::PreCallRecordGetDescriptorSetLayoutSupport)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDescriptorSetLayoutSupport)          != typeid(&ValidationObject::PreCallRecordGetDescriptorSetLayoutSupport)) << 3))];

        disp_post_rec_GetDescriptorSetLayoutSupport = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDescriptorSetLayoutSupport)        != typeid(&ValidationObject::PostCallRecordGetDescriptorSetLayoutSupport)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDescriptorSetLayoutSupport) != typeid(&ValidationObject::PostCallRecordGetDescriptorSetLayoutSupport)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDescriptorSetLayoutSupport)     != typeid(&ValidationObject::PostCallRecordGetDescriptorSetLayoutSupport)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDescriptorSetLayoutSupport)          != typeid(&ValidationObject::PostCallRecordGetDescriptorSetLayoutSupport)) << 3))];

        disp_pre_val_CmdDrawIndirectCount = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawIndirectCount)        != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCount)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawIndirectCount) != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCount)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawIndirectCount)     != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCount)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawIndirectCount)          != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCount)) << 3))];

        disp_pre_rec_CmdDrawIndirectCount = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawIndirectCount)        != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCount)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawIndirectCount) != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCount)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawIndirectCount)     != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCount)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawIndirectCount)          != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCount)) << 3))];

        disp_post_rec_CmdDrawIndirectCount = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawIndirectCount)        != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCount)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawIndirectCount) != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCount)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawIndirectCount)     != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCount)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawIndirectCount)          != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCount)) << 3))];

        disp_pre_val_CmdDrawIndexedIndirectCount = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawIndexedIndirectCount)        != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCount)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawIndexedIndirectCount) != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCount)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawIndexedIndirectCount)     != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCount)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawIndexedIndirectCount)          != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCount)) << 3))];

        disp_pre_rec_CmdDrawIndexedIndirectCount = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawIndexedIndirectCount)        != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCount)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawIndexedIndirectCount) != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCount)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawIndexedIndirectCount)     != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCount)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawIndexedIndirectCount)          != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCount)) << 3))];

        disp_post_rec_CmdDrawIndexedIndirectCount = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawIndexedIndirectCount)        != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCount)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawIndexedIndirectCount) != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCount)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawIndexedIndirectCount)     != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCount)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawIndexedIndirectCount)          != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCount)) << 3))];

        disp_pre_val_CreateRenderPass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateRenderPass2)        != typeid(&ValidationObject::PreCallValidateCreateRenderPass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateRenderPass2) != typeid(&ValidationObject::PreCallValidateCreateRenderPass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateRenderPass2)     != typeid(&ValidationObject::PreCallValidateCreateRenderPass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateRenderPass2)          != typeid(&ValidationObject::PreCallValidateCreateRenderPass2)) << 3))];

        disp_pre_rec_CreateRenderPass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateRenderPass2)        != typeid(&ValidationObject::PreCallRecordCreateRenderPass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateRenderPass2) != typeid(&ValidationObject::PreCallRecordCreateRenderPass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateRenderPass2)     != typeid(&ValidationObject::PreCallRecordCreateRenderPass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateRenderPass2)          != typeid(&ValidationObject::PreCallRecordCreateRenderPass2)) << 3))];

        disp_post_rec_CreateRenderPass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateRenderPass2)        != typeid(&ValidationObject::PostCallRecordCreateRenderPass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateRenderPass2) != typeid(&ValidationObject::PostCallRecordCreateRenderPass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateRenderPass2)     != typeid(&ValidationObject::PostCallRecordCreateRenderPass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateRenderPass2)          != typeid(&ValidationObject::PostCallRecordCreateRenderPass2)) << 3))];

        disp_pre_val_CmdBeginRenderPass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBeginRenderPass2)        != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBeginRenderPass2) != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBeginRenderPass2)     != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBeginRenderPass2)          != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass2)) << 3))];

        disp_pre_rec_CmdBeginRenderPass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBeginRenderPass2)        != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBeginRenderPass2) != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBeginRenderPass2)     != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBeginRenderPass2)          != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass2)) << 3))];

        disp_post_rec_CmdBeginRenderPass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBeginRenderPass2)        != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBeginRenderPass2) != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBeginRenderPass2)     != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBeginRenderPass2)          != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass2)) << 3))];

        disp_pre_val_CmdNextSubpass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdNextSubpass2)        != typeid(&ValidationObject::PreCallValidateCmdNextSubpass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdNextSubpass2) != typeid(&ValidationObject::PreCallValidateCmdNextSubpass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdNextSubpass2)     != typeid(&ValidationObject::PreCallValidateCmdNextSubpass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdNextSubpass2)          != typeid(&ValidationObject::PreCallValidateCmdNextSubpass2)) << 3))];

        disp_pre_rec_CmdNextSubpass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdNextSubpass2)        != typeid(&ValidationObject::PreCallRecordCmdNextSubpass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdNextSubpass2) != typeid(&ValidationObject::PreCallRecordCmdNextSubpass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdNextSubpass2)     != typeid(&ValidationObject::PreCallRecordCmdNextSubpass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdNextSubpass2)          != typeid(&ValidationObject::PreCallRecordCmdNextSubpass2)) << 3))];

        disp_post_rec_CmdNextSubpass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdNextSubpass2)        != typeid(&ValidationObject::PostCallRecordCmdNextSubpass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdNextSubpass2) != typeid(&ValidationObject::PostCallRecordCmdNextSubpass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdNextSubpass2)     != typeid(&ValidationObject::PostCallRecordCmdNextSubpass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdNextSubpass2)          != typeid(&ValidationObject::PostCallRecordCmdNextSubpass2)) << 3))];

        disp_pre_val_CmdEndRenderPass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdEndRenderPass2)        != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdEndRenderPass2) != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdEndRenderPass2)     != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdEndRenderPass2)          != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass2)) << 3))];

        disp_pre_rec_CmdEndRenderPass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdEndRenderPass2)        != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdEndRenderPass2) != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdEndRenderPass2)     != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdEndRenderPass2)          != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass2)) << 3))];

        disp_post_rec_CmdEndRenderPass2 = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdEndRenderPass2)        != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass2)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdEndRenderPass2) != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass2)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdEndRenderPass2)     != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass2)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdEndRenderPass2)          != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass2)) << 3))];

        disp_pre_val_ResetQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateResetQueryPool)        != typeid(&ValidationObject::PreCallValidateResetQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateResetQueryPool) != typeid(&ValidationObject::PreCallValidateResetQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateResetQueryPool)     != typeid(&ValidationObject::PreCallValidateResetQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateResetQueryPool)          != typeid(&ValidationObject::PreCallValidateResetQueryPool)) << 3))];

        disp_pre_rec_ResetQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordResetQueryPool)        != typeid(&ValidationObject::PreCallRecordResetQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordResetQueryPool) != typeid(&ValidationObject::PreCallRecordResetQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordResetQueryPool)     != typeid(&ValidationObject::PreCallRecordResetQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordResetQueryPool)          != typeid(&ValidationObject::PreCallRecordResetQueryPool)) << 3))];

        disp_post_rec_ResetQueryPool = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordResetQueryPool)        != typeid(&ValidationObject::PostCallRecordResetQueryPool)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordResetQueryPool) != typeid(&ValidationObject::PostCallRecordResetQueryPool)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordResetQueryPool)     != typeid(&ValidationObject::PostCallRecordResetQueryPool)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordResetQueryPool)          != typeid(&ValidationObject::PostCallRecordResetQueryPool)) << 3))];

        disp_pre_val_GetSemaphoreCounterValue = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetSemaphoreCounterValue)        != typeid(&ValidationObject::PreCallValidateGetSemaphoreCounterValue)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetSemaphoreCounterValue) != typeid(&ValidationObject::PreCallValidateGetSemaphoreCounterValue)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetSemaphoreCounterValue)     != typeid(&ValidationObject::PreCallValidateGetSemaphoreCounterValue)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetSemaphoreCounterValue)          != typeid(&ValidationObject::PreCallValidateGetSemaphoreCounterValue)) << 3))];

        disp_pre_rec_GetSemaphoreCounterValue = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetSemaphoreCounterValue)        != typeid(&ValidationObject::PreCallRecordGetSemaphoreCounterValue)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetSemaphoreCounterValue) != typeid(&ValidationObject::PreCallRecordGetSemaphoreCounterValue)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetSemaphoreCounterValue)     != typeid(&ValidationObject::PreCallRecordGetSemaphoreCounterValue)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetSemaphoreCounterValue)          != typeid(&ValidationObject::PreCallRecordGetSemaphoreCounterValue)) << 3))];

        disp_post_rec_GetSemaphoreCounterValue = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetSemaphoreCounterValue)        != typeid(&ValidationObject::PostCallRecordGetSemaphoreCounterValue)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetSemaphoreCounterValue) != typeid(&ValidationObject::PostCallRecordGetSemaphoreCounterValue)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetSemaphoreCounterValue)     != typeid(&ValidationObject::PostCallRecordGetSemaphoreCounterValue)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetSemaphoreCounterValue)          != typeid(&ValidationObject::PostCallRecordGetSemaphoreCounterValue)) << 3))];

        disp_pre_val_WaitSemaphores = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateWaitSemaphores)        != typeid(&ValidationObject::PreCallValidateWaitSemaphores)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateWaitSemaphores) != typeid(&ValidationObject::PreCallValidateWaitSemaphores)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateWaitSemaphores)     != typeid(&ValidationObject::PreCallValidateWaitSemaphores)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateWaitSemaphores)          != typeid(&ValidationObject::PreCallValidateWaitSemaphores)) << 3))];

        disp_pre_rec_WaitSemaphores = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordWaitSemaphores)        != typeid(&ValidationObject::PreCallRecordWaitSemaphores)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordWaitSemaphores) != typeid(&ValidationObject::PreCallRecordWaitSemaphores)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordWaitSemaphores)     != typeid(&ValidationObject::PreCallRecordWaitSemaphores)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordWaitSemaphores)          != typeid(&ValidationObject::PreCallRecordWaitSemaphores)) << 3))];

        disp_post_rec_WaitSemaphores = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordWaitSemaphores)        != typeid(&ValidationObject::PostCallRecordWaitSemaphores)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordWaitSemaphores) != typeid(&ValidationObject::PostCallRecordWaitSemaphores)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordWaitSemaphores)     != typeid(&ValidationObject::PostCallRecordWaitSemaphores)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordWaitSemaphores)          != typeid(&ValidationObject::PostCallRecordWaitSemaphores)) << 3))];

        disp_pre_val_SignalSemaphore = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateSignalSemaphore)        != typeid(&ValidationObject::PreCallValidateSignalSemaphore)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateSignalSemaphore) != typeid(&ValidationObject::PreCallValidateSignalSemaphore)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateSignalSemaphore)     != typeid(&ValidationObject::PreCallValidateSignalSemaphore)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateSignalSemaphore)          != typeid(&ValidationObject::PreCallValidateSignalSemaphore)) << 3))];

        disp_pre_rec_SignalSemaphore = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordSignalSemaphore)        != typeid(&ValidationObject::PreCallRecordSignalSemaphore)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordSignalSemaphore) != typeid(&ValidationObject::PreCallRecordSignalSemaphore)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordSignalSemaphore)     != typeid(&ValidationObject::PreCallRecordSignalSemaphore)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordSignalSemaphore)          != typeid(&ValidationObject::PreCallRecordSignalSemaphore)) << 3))];

        disp_post_rec_SignalSemaphore = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordSignalSemaphore)        != typeid(&ValidationObject::PostCallRecordSignalSemaphore)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordSignalSemaphore) != typeid(&ValidationObject::PostCallRecordSignalSemaphore)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordSignalSemaphore)     != typeid(&ValidationObject::PostCallRecordSignalSemaphore)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordSignalSemaphore)          != typeid(&ValidationObject::PostCallRecordSignalSemaphore)) << 3))];

        disp_pre_val_GetBufferDeviceAddress = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetBufferDeviceAddress)        != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddress)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetBufferDeviceAddress) != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddress)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetBufferDeviceAddress)     != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddress)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetBufferDeviceAddress)          != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddress)) << 3))];

        disp_pre_rec_GetBufferDeviceAddress = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetBufferDeviceAddress)        != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddress)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetBufferDeviceAddress) != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddress)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetBufferDeviceAddress)     != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddress)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetBufferDeviceAddress)          != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddress)) << 3))];

        disp_post_rec_GetBufferDeviceAddress = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetBufferDeviceAddress)        != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddress)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetBufferDeviceAddress) != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddress)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetBufferDeviceAddress)     != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddress)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetBufferDeviceAddress)          != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddress)) << 3))];

        disp_pre_val_GetBufferOpaqueCaptureAddress = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetBufferOpaqueCaptureAddress)        != typeid(&ValidationObject::PreCallValidateGetBufferOpaqueCaptureAddress)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetBufferOpaqueCaptureAddress) != typeid(&ValidationObject::PreCallValidateGetBufferOpaqueCaptureAddress)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetBufferOpaqueCaptureAddress)     != typeid(&ValidationObject::PreCallValidateGetBufferOpaqueCaptureAddress)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetBufferOpaqueCaptureAddress)          != typeid(&ValidationObject::PreCallValidateGetBufferOpaqueCaptureAddress)) << 3))];

        disp_pre_rec_GetBufferOpaqueCaptureAddress = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetBufferOpaqueCaptureAddress)        != typeid(&ValidationObject::PreCallRecordGetBufferOpaqueCaptureAddress)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetBufferOpaqueCaptureAddress) != typeid(&ValidationObject::PreCallRecordGetBufferOpaqueCaptureAddress)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetBufferOpaqueCaptureAddress)     != typeid(&ValidationObject::PreCallRecordGetBufferOpaqueCaptureAddress)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetBufferOpaqueCaptureAddress)          != typeid(&ValidationObject::PreCallRecordGetBufferOpaqueCaptureAddress)) << 3))];

        disp_post_rec_GetBufferOpaqueCaptureAddress = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetBufferOpaqueCaptureAddress)        != typeid(&ValidationObject::PostCallRecordGetBufferOpaqueCaptureAddress)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetBufferOpaqueCaptureAddress) != typeid(&ValidationObject::PostCallRecordGetBufferOpaqueCaptureAddress)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetBufferOpaqueCaptureAddress)     != typeid(&ValidationObject::PostCallRecordGetBufferOpaqueCaptureAddress)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetBufferOpaqueCaptureAddress)          != typeid(&ValidationObject::PostCallRecordGetBufferOpaqueCaptureAddress)) << 3))];

        disp_pre_val_GetDeviceMemoryOpaqueCaptureAddress = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceMemoryOpaqueCaptureAddress)        != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryOpaqueCaptureAddress)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceMemoryOpaqueCaptureAddress) != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryOpaqueCaptureAddress)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceMemoryOpaqueCaptureAddress)     != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryOpaqueCaptureAddress)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceMemoryOpaqueCaptureAddress)          != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryOpaqueCaptureAddress)) << 3))];

        disp_pre_rec_GetDeviceMemoryOpaqueCaptureAddress = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceMemoryOpaqueCaptureAddress)        != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryOpaqueCaptureAddress)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceMemoryOpaqueCaptureAddress) != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryOpaqueCaptureAddress)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceMemoryOpaqueCaptureAddress)     != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryOpaqueCaptureAddress)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceMemoryOpaqueCaptureAddress)          != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryOpaqueCaptureAddress)) << 3))];

        disp_post_rec_GetDeviceMemoryOpaqueCaptureAddress = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceMemoryOpaqueCaptureAddress)        != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryOpaqueCaptureAddress)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceMemoryOpaqueCaptureAddress) != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryOpaqueCaptureAddress)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceMemoryOpaqueCaptureAddress)     != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryOpaqueCaptureAddress)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceMemoryOpaqueCaptureAddress)          != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryOpaqueCaptureAddress)) << 3))];

        disp_pre_val_CreateSwapchainKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateSwapchainKHR)        != typeid(&ValidationObject::PreCallValidateCreateSwapchainKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateSwapchainKHR) != typeid(&ValidationObject::PreCallValidateCreateSwapchainKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateSwapchainKHR)     != typeid(&ValidationObject::PreCallValidateCreateSwapchainKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateSwapchainKHR)          != typeid(&ValidationObject::PreCallValidateCreateSwapchainKHR)) << 3))];

        disp_pre_rec_CreateSwapchainKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateSwapchainKHR)        != typeid(&ValidationObject::PreCallRecordCreateSwapchainKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateSwapchainKHR) != typeid(&ValidationObject::PreCallRecordCreateSwapchainKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateSwapchainKHR)     != typeid(&ValidationObject::PreCallRecordCreateSwapchainKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateSwapchainKHR)          != typeid(&ValidationObject::PreCallRecordCreateSwapchainKHR)) << 3))];

        disp_post_rec_CreateSwapchainKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateSwapchainKHR)        != typeid(&ValidationObject::PostCallRecordCreateSwapchainKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateSwapchainKHR) != typeid(&ValidationObject::PostCallRecordCreateSwapchainKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateSwapchainKHR)     != typeid(&ValidationObject::PostCallRecordCreateSwapchainKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateSwapchainKHR)          != typeid(&ValidationObject::PostCallRecordCreateSwapchainKHR)) << 3))];

        disp_pre_val_DestroySwapchainKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroySwapchainKHR)        != typeid(&ValidationObject::PreCallValidateDestroySwapchainKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroySwapchainKHR) != typeid(&ValidationObject::PreCallValidateDestroySwapchainKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroySwapchainKHR)     != typeid(&ValidationObject::PreCallValidateDestroySwapchainKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroySwapchainKHR)          != typeid(&ValidationObject::PreCallValidateDestroySwapchainKHR)) << 3))];

        disp_pre_rec_DestroySwapchainKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroySwapchainKHR)        != typeid(&ValidationObject::PreCallRecordDestroySwapchainKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroySwapchainKHR) != typeid(&ValidationObject::PreCallRecordDestroySwapchainKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroySwapchainKHR)     != typeid(&ValidationObject::PreCallRecordDestroySwapchainKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroySwapchainKHR)          != typeid(&ValidationObject::PreCallRecordDestroySwapchainKHR)) << 3))];

        disp_post_rec_DestroySwapchainKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroySwapchainKHR)        != typeid(&ValidationObject::PostCallRecordDestroySwapchainKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroySwapchainKHR) != typeid(&ValidationObject::PostCallRecordDestroySwapchainKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroySwapchainKHR)     != typeid(&ValidationObject::PostCallRecordDestroySwapchainKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroySwapchainKHR)          != typeid(&ValidationObject::PostCallRecordDestroySwapchainKHR)) << 3))];

        disp_pre_val_GetSwapchainImagesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetSwapchainImagesKHR)        != typeid(&ValidationObject::PreCallValidateGetSwapchainImagesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetSwapchainImagesKHR) != typeid(&ValidationObject::PreCallValidateGetSwapchainImagesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetSwapchainImagesKHR)     != typeid(&ValidationObject::PreCallValidateGetSwapchainImagesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetSwapchainImagesKHR)          != typeid(&ValidationObject::PreCallValidateGetSwapchainImagesKHR)) << 3))];

        disp_pre_rec_GetSwapchainImagesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetSwapchainImagesKHR)        != typeid(&ValidationObject::PreCallRecordGetSwapchainImagesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetSwapchainImagesKHR) != typeid(&ValidationObject::PreCallRecordGetSwapchainImagesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetSwapchainImagesKHR)     != typeid(&ValidationObject::PreCallRecordGetSwapchainImagesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetSwapchainImagesKHR)          != typeid(&ValidationObject::PreCallRecordGetSwapchainImagesKHR)) << 3))];

        disp_post_rec_GetSwapchainImagesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetSwapchainImagesKHR)        != typeid(&ValidationObject::PostCallRecordGetSwapchainImagesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetSwapchainImagesKHR) != typeid(&ValidationObject::PostCallRecordGetSwapchainImagesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetSwapchainImagesKHR)     != typeid(&ValidationObject::PostCallRecordGetSwapchainImagesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetSwapchainImagesKHR)          != typeid(&ValidationObject::PostCallRecordGetSwapchainImagesKHR)) << 3))];

        disp_pre_val_AcquireNextImageKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateAcquireNextImageKHR)        != typeid(&ValidationObject::PreCallValidateAcquireNextImageKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateAcquireNextImageKHR) != typeid(&ValidationObject::PreCallValidateAcquireNextImageKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateAcquireNextImageKHR)     != typeid(&ValidationObject::PreCallValidateAcquireNextImageKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateAcquireNextImageKHR)          != typeid(&ValidationObject::PreCallValidateAcquireNextImageKHR)) << 3))];

        disp_pre_rec_AcquireNextImageKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordAcquireNextImageKHR)        != typeid(&ValidationObject::PreCallRecordAcquireNextImageKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordAcquireNextImageKHR) != typeid(&ValidationObject::PreCallRecordAcquireNextImageKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordAcquireNextImageKHR)     != typeid(&ValidationObject::PreCallRecordAcquireNextImageKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordAcquireNextImageKHR)          != typeid(&ValidationObject::PreCallRecordAcquireNextImageKHR)) << 3))];

        disp_post_rec_AcquireNextImageKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordAcquireNextImageKHR)        != typeid(&ValidationObject::PostCallRecordAcquireNextImageKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordAcquireNextImageKHR) != typeid(&ValidationObject::PostCallRecordAcquireNextImageKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordAcquireNextImageKHR)     != typeid(&ValidationObject::PostCallRecordAcquireNextImageKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordAcquireNextImageKHR)          != typeid(&ValidationObject::PostCallRecordAcquireNextImageKHR)) << 3))];

        disp_pre_val_QueuePresentKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateQueuePresentKHR)        != typeid(&ValidationObject::PreCallValidateQueuePresentKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateQueuePresentKHR) != typeid(&ValidationObject::PreCallValidateQueuePresentKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateQueuePresentKHR)     != typeid(&ValidationObject::PreCallValidateQueuePresentKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateQueuePresentKHR)          != typeid(&ValidationObject::PreCallValidateQueuePresentKHR)) << 3))];

        disp_pre_rec_QueuePresentKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordQueuePresentKHR)        != typeid(&ValidationObject::PreCallRecordQueuePresentKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordQueuePresentKHR) != typeid(&ValidationObject::PreCallRecordQueuePresentKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordQueuePresentKHR)     != typeid(&ValidationObject::PreCallRecordQueuePresentKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordQueuePresentKHR)          != typeid(&ValidationObject::PreCallRecordQueuePresentKHR)) << 3))];

        disp_post_rec_QueuePresentKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordQueuePresentKHR)        != typeid(&ValidationObject::PostCallRecordQueuePresentKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordQueuePresentKHR) != typeid(&ValidationObject::PostCallRecordQueuePresentKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordQueuePresentKHR)     != typeid(&ValidationObject::PostCallRecordQueuePresentKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordQueuePresentKHR)          != typeid(&ValidationObject::PostCallRecordQueuePresentKHR)) << 3))];

        disp_pre_val_GetDeviceGroupPresentCapabilitiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceGroupPresentCapabilitiesKHR)        != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPresentCapabilitiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceGroupPresentCapabilitiesKHR) != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPresentCapabilitiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceGroupPresentCapabilitiesKHR)     != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPresentCapabilitiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceGroupPresentCapabilitiesKHR)          != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPresentCapabilitiesKHR)) << 3))];

        disp_pre_rec_GetDeviceGroupPresentCapabilitiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceGroupPresentCapabilitiesKHR)        != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPresentCapabilitiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceGroupPresentCapabilitiesKHR) != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPresentCapabilitiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceGroupPresentCapabilitiesKHR)     != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPresentCapabilitiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceGroupPresentCapabilitiesKHR)          != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPresentCapabilitiesKHR)) << 3))];

        disp_post_rec_GetDeviceGroupPresentCapabilitiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceGroupPresentCapabilitiesKHR)        != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPresentCapabilitiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceGroupPresentCapabilitiesKHR) != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPresentCapabilitiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceGroupPresentCapabilitiesKHR)     != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPresentCapabilitiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceGroupPresentCapabilitiesKHR)          != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPresentCapabilitiesKHR)) << 3))];

        disp_pre_val_GetDeviceGroupSurfacePresentModesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceGroupSurfacePresentModesKHR)        != typeid(&ValidationObject::PreCallValidateGetDeviceGroupSurfacePresentModesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceGroupSurfacePresentModesKHR) != typeid(&ValidationObject::PreCallValidateGetDeviceGroupSurfacePresentModesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceGroupSurfacePresentModesKHR)     != typeid(&ValidationObject::PreCallValidateGetDeviceGroupSurfacePresentModesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceGroupSurfacePresentModesKHR)          != typeid(&ValidationObject::PreCallValidateGetDeviceGroupSurfacePresentModesKHR)) << 3))];

        disp_pre_rec_GetDeviceGroupSurfacePresentModesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceGroupSurfacePresentModesKHR)        != typeid(&ValidationObject::PreCallRecordGetDeviceGroupSurfacePresentModesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceGroupSurfacePresentModesKHR) != typeid(&ValidationObject::PreCallRecordGetDeviceGroupSurfacePresentModesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceGroupSurfacePresentModesKHR)     != typeid(&ValidationObject::PreCallRecordGetDeviceGroupSurfacePresentModesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceGroupSurfacePresentModesKHR)          != typeid(&ValidationObject::PreCallRecordGetDeviceGroupSurfacePresentModesKHR)) << 3))];

        disp_post_rec_GetDeviceGroupSurfacePresentModesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceGroupSurfacePresentModesKHR)        != typeid(&ValidationObject::PostCallRecordGetDeviceGroupSurfacePresentModesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceGroupSurfacePresentModesKHR) != typeid(&ValidationObject::PostCallRecordGetDeviceGroupSurfacePresentModesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceGroupSurfacePresentModesKHR)     != typeid(&ValidationObject::PostCallRecordGetDeviceGroupSurfacePresentModesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceGroupSurfacePresentModesKHR)          != typeid(&ValidationObject::PostCallRecordGetDeviceGroupSurfacePresentModesKHR)) << 3))];

        disp_pre_val_AcquireNextImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateAcquireNextImage2KHR)        != typeid(&ValidationObject::PreCallValidateAcquireNextImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateAcquireNextImage2KHR) != typeid(&ValidationObject::PreCallValidateAcquireNextImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateAcquireNextImage2KHR)     != typeid(&ValidationObject::PreCallValidateAcquireNextImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateAcquireNextImage2KHR)          != typeid(&ValidationObject::PreCallValidateAcquireNextImage2KHR)) << 3))];

        disp_pre_rec_AcquireNextImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordAcquireNextImage2KHR)        != typeid(&ValidationObject::PreCallRecordAcquireNextImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordAcquireNextImage2KHR) != typeid(&ValidationObject::PreCallRecordAcquireNextImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordAcquireNextImage2KHR)     != typeid(&ValidationObject::PreCallRecordAcquireNextImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordAcquireNextImage2KHR)          != typeid(&ValidationObject::PreCallRecordAcquireNextImage2KHR)) << 3))];

        disp_post_rec_AcquireNextImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordAcquireNextImage2KHR)        != typeid(&ValidationObject::PostCallRecordAcquireNextImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordAcquireNextImage2KHR) != typeid(&ValidationObject::PostCallRecordAcquireNextImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordAcquireNextImage2KHR)     != typeid(&ValidationObject::PostCallRecordAcquireNextImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordAcquireNextImage2KHR)          != typeid(&ValidationObject::PostCallRecordAcquireNextImage2KHR)) << 3))];

        disp_pre_val_CreateSharedSwapchainsKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateSharedSwapchainsKHR)        != typeid(&ValidationObject::PreCallValidateCreateSharedSwapchainsKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateSharedSwapchainsKHR) != typeid(&ValidationObject::PreCallValidateCreateSharedSwapchainsKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateSharedSwapchainsKHR)     != typeid(&ValidationObject::PreCallValidateCreateSharedSwapchainsKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateSharedSwapchainsKHR)          != typeid(&ValidationObject::PreCallValidateCreateSharedSwapchainsKHR)) << 3))];

        disp_pre_rec_CreateSharedSwapchainsKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateSharedSwapchainsKHR)        != typeid(&ValidationObject::PreCallRecordCreateSharedSwapchainsKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateSharedSwapchainsKHR) != typeid(&ValidationObject::PreCallRecordCreateSharedSwapchainsKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateSharedSwapchainsKHR)     != typeid(&ValidationObject::PreCallRecordCreateSharedSwapchainsKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateSharedSwapchainsKHR)          != typeid(&ValidationObject::PreCallRecordCreateSharedSwapchainsKHR)) << 3))];

        disp_post_rec_CreateSharedSwapchainsKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateSharedSwapchainsKHR)        != typeid(&ValidationObject::PostCallRecordCreateSharedSwapchainsKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateSharedSwapchainsKHR) != typeid(&ValidationObject::PostCallRecordCreateSharedSwapchainsKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateSharedSwapchainsKHR)     != typeid(&ValidationObject::PostCallRecordCreateSharedSwapchainsKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateSharedSwapchainsKHR)          != typeid(&ValidationObject::PostCallRecordCreateSharedSwapchainsKHR)) << 3))];

#ifdef VK_USE_PLATFORM_XLIB_KHR
#endif
#ifdef VK_USE_PLATFORM_XLIB_KHR
#endif
#ifdef VK_USE_PLATFORM_XCB_KHR
#endif
#ifdef VK_USE_PLATFORM_XCB_KHR
#endif
#ifdef VK_USE_PLATFORM_WAYLAND_KHR
#endif
#ifdef VK_USE_PLATFORM_WAYLAND_KHR
#endif
#ifdef VK_USE_PLATFORM_ANDROID_KHR
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
#endif
        disp_pre_val_GetDeviceGroupPeerMemoryFeaturesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceGroupPeerMemoryFeaturesKHR)        != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPeerMemoryFeaturesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceGroupPeerMemoryFeaturesKHR) != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPeerMemoryFeaturesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceGroupPeerMemoryFeaturesKHR)     != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPeerMemoryFeaturesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceGroupPeerMemoryFeaturesKHR)          != typeid(&ValidationObject::PreCallValidateGetDeviceGroupPeerMemoryFeaturesKHR)) << 3))];

        disp_pre_rec_GetDeviceGroupPeerMemoryFeaturesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)        != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceGroupPeerMemoryFeaturesKHR) != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)     != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)          != typeid(&ValidationObject::PreCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)) << 3))];

        disp_post_rec_GetDeviceGroupPeerMemoryFeaturesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)        != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceGroupPeerMemoryFeaturesKHR) != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)     != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)          != typeid(&ValidationObject::PostCallRecordGetDeviceGroupPeerMemoryFeaturesKHR)) << 3))];

        disp_pre_val_CmdSetDeviceMaskKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetDeviceMaskKHR)        != typeid(&ValidationObject::PreCallValidateCmdSetDeviceMaskKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetDeviceMaskKHR) != typeid(&ValidationObject::PreCallValidateCmdSetDeviceMaskKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetDeviceMaskKHR)     != typeid(&ValidationObject::PreCallValidateCmdSetDeviceMaskKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetDeviceMaskKHR)          != typeid(&ValidationObject::PreCallValidateCmdSetDeviceMaskKHR)) << 3))];

        disp_pre_rec_CmdSetDeviceMaskKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetDeviceMaskKHR)        != typeid(&ValidationObject::PreCallRecordCmdSetDeviceMaskKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetDeviceMaskKHR) != typeid(&ValidationObject::PreCallRecordCmdSetDeviceMaskKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetDeviceMaskKHR)     != typeid(&ValidationObject::PreCallRecordCmdSetDeviceMaskKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetDeviceMaskKHR)          != typeid(&ValidationObject::PreCallRecordCmdSetDeviceMaskKHR)) << 3))];

        disp_post_rec_CmdSetDeviceMaskKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetDeviceMaskKHR)        != typeid(&ValidationObject::PostCallRecordCmdSetDeviceMaskKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetDeviceMaskKHR) != typeid(&ValidationObject::PostCallRecordCmdSetDeviceMaskKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetDeviceMaskKHR)     != typeid(&ValidationObject::PostCallRecordCmdSetDeviceMaskKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetDeviceMaskKHR)          != typeid(&ValidationObject::PostCallRecordCmdSetDeviceMaskKHR)) << 3))];

        disp_pre_val_CmdDispatchBaseKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDispatchBaseKHR)        != typeid(&ValidationObject::PreCallValidateCmdDispatchBaseKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDispatchBaseKHR) != typeid(&ValidationObject::PreCallValidateCmdDispatchBaseKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDispatchBaseKHR)     != typeid(&ValidationObject::PreCallValidateCmdDispatchBaseKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDispatchBaseKHR)          != typeid(&ValidationObject::PreCallValidateCmdDispatchBaseKHR)) << 3))];

        disp_pre_rec_CmdDispatchBaseKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDispatchBaseKHR)        != typeid(&ValidationObject::PreCallRecordCmdDispatchBaseKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDispatchBaseKHR) != typeid(&ValidationObject::PreCallRecordCmdDispatchBaseKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDispatchBaseKHR)     != typeid(&ValidationObject::PreCallRecordCmdDispatchBaseKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDispatchBaseKHR)          != typeid(&ValidationObject::PreCallRecordCmdDispatchBaseKHR)) << 3))];

        disp_post_rec_CmdDispatchBaseKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDispatchBaseKHR)        != typeid(&ValidationObject::PostCallRecordCmdDispatchBaseKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDispatchBaseKHR) != typeid(&ValidationObject::PostCallRecordCmdDispatchBaseKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDispatchBaseKHR)     != typeid(&ValidationObject::PostCallRecordCmdDispatchBaseKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDispatchBaseKHR)          != typeid(&ValidationObject::PostCallRecordCmdDispatchBaseKHR)) << 3))];

        disp_pre_val_TrimCommandPoolKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateTrimCommandPoolKHR)        != typeid(&ValidationObject::PreCallValidateTrimCommandPoolKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateTrimCommandPoolKHR) != typeid(&ValidationObject::PreCallValidateTrimCommandPoolKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateTrimCommandPoolKHR)     != typeid(&ValidationObject::PreCallValidateTrimCommandPoolKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateTrimCommandPoolKHR)          != typeid(&ValidationObject::PreCallValidateTrimCommandPoolKHR)) << 3))];

        disp_pre_rec_TrimCommandPoolKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordTrimCommandPoolKHR)        != typeid(&ValidationObject::PreCallRecordTrimCommandPoolKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordTrimCommandPoolKHR) != typeid(&ValidationObject::PreCallRecordTrimCommandPoolKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordTrimCommandPoolKHR)     != typeid(&ValidationObject::PreCallRecordTrimCommandPoolKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordTrimCommandPoolKHR)          != typeid(&ValidationObject::PreCallRecordTrimCommandPoolKHR)) << 3))];

        disp_post_rec_TrimCommandPoolKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordTrimCommandPoolKHR)        != typeid(&ValidationObject::PostCallRecordTrimCommandPoolKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordTrimCommandPoolKHR) != typeid(&ValidationObject::PostCallRecordTrimCommandPoolKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordTrimCommandPoolKHR)     != typeid(&ValidationObject::PostCallRecordTrimCommandPoolKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordTrimCommandPoolKHR)          != typeid(&ValidationObject::PostCallRecordTrimCommandPoolKHR)) << 3))];

#ifdef VK_USE_PLATFORM_WIN32_KHR
        disp_pre_val_GetMemoryWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetMemoryWin32HandleKHR)        != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetMemoryWin32HandleKHR) != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetMemoryWin32HandleKHR)     != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetMemoryWin32HandleKHR)          != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandleKHR)) << 3))];

        disp_pre_rec_GetMemoryWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetMemoryWin32HandleKHR)        != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetMemoryWin32HandleKHR) != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetMemoryWin32HandleKHR)     != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetMemoryWin32HandleKHR)          != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandleKHR)) << 3))];

        disp_post_rec_GetMemoryWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetMemoryWin32HandleKHR)        != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetMemoryWin32HandleKHR) != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetMemoryWin32HandleKHR)     != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetMemoryWin32HandleKHR)          != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandleKHR)) << 3))];

#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
        disp_pre_val_GetMemoryWin32HandlePropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetMemoryWin32HandlePropertiesKHR)        != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandlePropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetMemoryWin32HandlePropertiesKHR) != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandlePropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetMemoryWin32HandlePropertiesKHR)     != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandlePropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetMemoryWin32HandlePropertiesKHR)          != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandlePropertiesKHR)) << 3))];

        disp_pre_rec_GetMemoryWin32HandlePropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetMemoryWin32HandlePropertiesKHR)        != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandlePropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetMemoryWin32HandlePropertiesKHR) != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandlePropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetMemoryWin32HandlePropertiesKHR)     != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandlePropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetMemoryWin32HandlePropertiesKHR)          != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandlePropertiesKHR)) << 3))];

        disp_post_rec_GetMemoryWin32HandlePropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetMemoryWin32HandlePropertiesKHR)        != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandlePropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetMemoryWin32HandlePropertiesKHR) != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandlePropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetMemoryWin32HandlePropertiesKHR)     != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandlePropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetMemoryWin32HandlePropertiesKHR)          != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandlePropertiesKHR)) << 3))];

#endif
        disp_pre_val_GetMemoryFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetMemoryFdKHR)        != typeid(&ValidationObject::PreCallValidateGetMemoryFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetMemoryFdKHR) != typeid(&ValidationObject::PreCallValidateGetMemoryFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetMemoryFdKHR)     != typeid(&ValidationObject::PreCallValidateGetMemoryFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetMemoryFdKHR)          != typeid(&ValidationObject::PreCallValidateGetMemoryFdKHR)) << 3))];

        disp_pre_rec_GetMemoryFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetMemoryFdKHR)        != typeid(&ValidationObject::PreCallRecordGetMemoryFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetMemoryFdKHR) != typeid(&ValidationObject::PreCallRecordGetMemoryFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetMemoryFdKHR)     != typeid(&ValidationObject::PreCallRecordGetMemoryFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetMemoryFdKHR)          != typeid(&ValidationObject::PreCallRecordGetMemoryFdKHR)) << 3))];

        disp_post_rec_GetMemoryFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetMemoryFdKHR)        != typeid(&ValidationObject::PostCallRecordGetMemoryFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetMemoryFdKHR) != typeid(&ValidationObject::PostCallRecordGetMemoryFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetMemoryFdKHR)     != typeid(&ValidationObject::PostCallRecordGetMemoryFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetMemoryFdKHR)          != typeid(&ValidationObject::PostCallRecordGetMemoryFdKHR)) << 3))];

        disp_pre_val_GetMemoryFdPropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetMemoryFdPropertiesKHR)        != typeid(&ValidationObject::PreCallValidateGetMemoryFdPropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetMemoryFdPropertiesKHR) != typeid(&ValidationObject::PreCallValidateGetMemoryFdPropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetMemoryFdPropertiesKHR)     != typeid(&ValidationObject::PreCallValidateGetMemoryFdPropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetMemoryFdPropertiesKHR)          != typeid(&ValidationObject::PreCallValidateGetMemoryFdPropertiesKHR)) << 3))];

        disp_pre_rec_GetMemoryFdPropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetMemoryFdPropertiesKHR)        != typeid(&ValidationObject::PreCallRecordGetMemoryFdPropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetMemoryFdPropertiesKHR) != typeid(&ValidationObject::PreCallRecordGetMemoryFdPropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetMemoryFdPropertiesKHR)     != typeid(&ValidationObject::PreCallRecordGetMemoryFdPropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetMemoryFdPropertiesKHR)          != typeid(&ValidationObject::PreCallRecordGetMemoryFdPropertiesKHR)) << 3))];

        disp_post_rec_GetMemoryFdPropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetMemoryFdPropertiesKHR)        != typeid(&ValidationObject::PostCallRecordGetMemoryFdPropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetMemoryFdPropertiesKHR) != typeid(&ValidationObject::PostCallRecordGetMemoryFdPropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetMemoryFdPropertiesKHR)     != typeid(&ValidationObject::PostCallRecordGetMemoryFdPropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetMemoryFdPropertiesKHR)          != typeid(&ValidationObject::PostCallRecordGetMemoryFdPropertiesKHR)) << 3))];

#ifdef VK_USE_PLATFORM_WIN32_KHR
        disp_pre_val_ImportSemaphoreWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateImportSemaphoreWin32HandleKHR)        != typeid(&ValidationObject::PreCallValidateImportSemaphoreWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateImportSemaphoreWin32HandleKHR) != typeid(&ValidationObject::PreCallValidateImportSemaphoreWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateImportSemaphoreWin32HandleKHR)     != typeid(&ValidationObject::PreCallValidateImportSemaphoreWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateImportSemaphoreWin32HandleKHR)          != typeid(&ValidationObject::PreCallValidateImportSemaphoreWin32HandleKHR)) << 3))];

        disp_pre_rec_ImportSemaphoreWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordImportSemaphoreWin32HandleKHR)        != typeid(&ValidationObject::PreCallRecordImportSemaphoreWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordImportSemaphoreWin32HandleKHR) != typeid(&ValidationObject::PreCallRecordImportSemaphoreWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordImportSemaphoreWin32HandleKHR)     != typeid(&ValidationObject::PreCallRecordImportSemaphoreWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordImportSemaphoreWin32HandleKHR)          != typeid(&ValidationObject::PreCallRecordImportSemaphoreWin32HandleKHR)) << 3))];

        disp_post_rec_ImportSemaphoreWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordImportSemaphoreWin32HandleKHR)        != typeid(&ValidationObject::PostCallRecordImportSemaphoreWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordImportSemaphoreWin32HandleKHR) != typeid(&ValidationObject::PostCallRecordImportSemaphoreWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordImportSemaphoreWin32HandleKHR)     != typeid(&ValidationObject::PostCallRecordImportSemaphoreWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordImportSemaphoreWin32HandleKHR)          != typeid(&ValidationObject::PostCallRecordImportSemaphoreWin32HandleKHR)) << 3))];

#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
        disp_pre_val_GetSemaphoreWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetSemaphoreWin32HandleKHR)        != typeid(&ValidationObject::PreCallValidateGetSemaphoreWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetSemaphoreWin32HandleKHR) != typeid(&ValidationObject::PreCallValidateGetSemaphoreWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetSemaphoreWin32HandleKHR)     != typeid(&ValidationObject::PreCallValidateGetSemaphoreWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetSemaphoreWin32HandleKHR)          != typeid(&ValidationObject::PreCallValidateGetSemaphoreWin32HandleKHR)) << 3))];

        disp_pre_rec_GetSemaphoreWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetSemaphoreWin32HandleKHR)        != typeid(&ValidationObject::PreCallRecordGetSemaphoreWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetSemaphoreWin32HandleKHR) != typeid(&ValidationObject::PreCallRecordGetSemaphoreWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetSemaphoreWin32HandleKHR)     != typeid(&ValidationObject::PreCallRecordGetSemaphoreWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetSemaphoreWin32HandleKHR)          != typeid(&ValidationObject::PreCallRecordGetSemaphoreWin32HandleKHR)) << 3))];

        disp_post_rec_GetSemaphoreWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetSemaphoreWin32HandleKHR)        != typeid(&ValidationObject::PostCallRecordGetSemaphoreWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetSemaphoreWin32HandleKHR) != typeid(&ValidationObject::PostCallRecordGetSemaphoreWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetSemaphoreWin32HandleKHR)     != typeid(&ValidationObject::PostCallRecordGetSemaphoreWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetSemaphoreWin32HandleKHR)          != typeid(&ValidationObject::PostCallRecordGetSemaphoreWin32HandleKHR)) << 3))];

#endif
        disp_pre_val_ImportSemaphoreFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateImportSemaphoreFdKHR)        != typeid(&ValidationObject::PreCallValidateImportSemaphoreFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateImportSemaphoreFdKHR) != typeid(&ValidationObject::PreCallValidateImportSemaphoreFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateImportSemaphoreFdKHR)     != typeid(&ValidationObject::PreCallValidateImportSemaphoreFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateImportSemaphoreFdKHR)          != typeid(&ValidationObject::PreCallValidateImportSemaphoreFdKHR)) << 3))];

        disp_pre_rec_ImportSemaphoreFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordImportSemaphoreFdKHR)        != typeid(&ValidationObject::PreCallRecordImportSemaphoreFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordImportSemaphoreFdKHR) != typeid(&ValidationObject::PreCallRecordImportSemaphoreFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordImportSemaphoreFdKHR)     != typeid(&ValidationObject::PreCallRecordImportSemaphoreFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordImportSemaphoreFdKHR)          != typeid(&ValidationObject::PreCallRecordImportSemaphoreFdKHR)) << 3))];

        disp_post_rec_ImportSemaphoreFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordImportSemaphoreFdKHR)        != typeid(&ValidationObject::PostCallRecordImportSemaphoreFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordImportSemaphoreFdKHR) != typeid(&ValidationObject::PostCallRecordImportSemaphoreFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordImportSemaphoreFdKHR)     != typeid(&ValidationObject::PostCallRecordImportSemaphoreFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordImportSemaphoreFdKHR)          != typeid(&ValidationObject::PostCallRecordImportSemaphoreFdKHR)) << 3))];

        disp_pre_val_GetSemaphoreFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetSemaphoreFdKHR)        != typeid(&ValidationObject::PreCallValidateGetSemaphoreFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetSemaphoreFdKHR) != typeid(&ValidationObject::PreCallValidateGetSemaphoreFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetSemaphoreFdKHR)     != typeid(&ValidationObject::PreCallValidateGetSemaphoreFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetSemaphoreFdKHR)          != typeid(&ValidationObject::PreCallValidateGetSemaphoreFdKHR)) << 3))];

        disp_pre_rec_GetSemaphoreFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetSemaphoreFdKHR)        != typeid(&ValidationObject::PreCallRecordGetSemaphoreFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetSemaphoreFdKHR) != typeid(&ValidationObject::PreCallRecordGetSemaphoreFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetSemaphoreFdKHR)     != typeid(&ValidationObject::PreCallRecordGetSemaphoreFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetSemaphoreFdKHR)          != typeid(&ValidationObject::PreCallRecordGetSemaphoreFdKHR)) << 3))];

        disp_post_rec_GetSemaphoreFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetSemaphoreFdKHR)        != typeid(&ValidationObject::PostCallRecordGetSemaphoreFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetSemaphoreFdKHR) != typeid(&ValidationObject::PostCallRecordGetSemaphoreFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetSemaphoreFdKHR)     != typeid(&ValidationObject::PostCallRecordGetSemaphoreFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetSemaphoreFdKHR)          != typeid(&ValidationObject::PostCallRecordGetSemaphoreFdKHR)) << 3))];

        disp_pre_val_CmdPushDescriptorSetKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdPushDescriptorSetKHR)        != typeid(&ValidationObject::PreCallValidateCmdPushDescriptorSetKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdPushDescriptorSetKHR) != typeid(&ValidationObject::PreCallValidateCmdPushDescriptorSetKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdPushDescriptorSetKHR)     != typeid(&ValidationObject::PreCallValidateCmdPushDescriptorSetKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdPushDescriptorSetKHR)          != typeid(&ValidationObject::PreCallValidateCmdPushDescriptorSetKHR)) << 3))];

        disp_pre_rec_CmdPushDescriptorSetKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdPushDescriptorSetKHR)        != typeid(&ValidationObject::PreCallRecordCmdPushDescriptorSetKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdPushDescriptorSetKHR) != typeid(&ValidationObject::PreCallRecordCmdPushDescriptorSetKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdPushDescriptorSetKHR)     != typeid(&ValidationObject::PreCallRecordCmdPushDescriptorSetKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdPushDescriptorSetKHR)          != typeid(&ValidationObject::PreCallRecordCmdPushDescriptorSetKHR)) << 3))];

        disp_post_rec_CmdPushDescriptorSetKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdPushDescriptorSetKHR)        != typeid(&ValidationObject::PostCallRecordCmdPushDescriptorSetKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdPushDescriptorSetKHR) != typeid(&ValidationObject::PostCallRecordCmdPushDescriptorSetKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdPushDescriptorSetKHR)     != typeid(&ValidationObject::PostCallRecordCmdPushDescriptorSetKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdPushDescriptorSetKHR)          != typeid(&ValidationObject::PostCallRecordCmdPushDescriptorSetKHR)) << 3))];

        disp_pre_val_CmdPushDescriptorSetWithTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdPushDescriptorSetWithTemplateKHR)        != typeid(&ValidationObject::PreCallValidateCmdPushDescriptorSetWithTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdPushDescriptorSetWithTemplateKHR) != typeid(&ValidationObject::PreCallValidateCmdPushDescriptorSetWithTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdPushDescriptorSetWithTemplateKHR)     != typeid(&ValidationObject::PreCallValidateCmdPushDescriptorSetWithTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdPushDescriptorSetWithTemplateKHR)          != typeid(&ValidationObject::PreCallValidateCmdPushDescriptorSetWithTemplateKHR)) << 3))];

        disp_pre_rec_CmdPushDescriptorSetWithTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdPushDescriptorSetWithTemplateKHR)        != typeid(&ValidationObject::PreCallRecordCmdPushDescriptorSetWithTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdPushDescriptorSetWithTemplateKHR) != typeid(&ValidationObject::PreCallRecordCmdPushDescriptorSetWithTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdPushDescriptorSetWithTemplateKHR)     != typeid(&ValidationObject::PreCallRecordCmdPushDescriptorSetWithTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdPushDescriptorSetWithTemplateKHR)          != typeid(&ValidationObject::PreCallRecordCmdPushDescriptorSetWithTemplateKHR)) << 3))];

        disp_post_rec_CmdPushDescriptorSetWithTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdPushDescriptorSetWithTemplateKHR)        != typeid(&ValidationObject::PostCallRecordCmdPushDescriptorSetWithTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdPushDescriptorSetWithTemplateKHR) != typeid(&ValidationObject::PostCallRecordCmdPushDescriptorSetWithTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdPushDescriptorSetWithTemplateKHR)     != typeid(&ValidationObject::PostCallRecordCmdPushDescriptorSetWithTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdPushDescriptorSetWithTemplateKHR)          != typeid(&ValidationObject::PostCallRecordCmdPushDescriptorSetWithTemplateKHR)) << 3))];

        disp_pre_val_CreateDescriptorUpdateTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateDescriptorUpdateTemplateKHR)        != typeid(&ValidationObject::PreCallValidateCreateDescriptorUpdateTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateDescriptorUpdateTemplateKHR) != typeid(&ValidationObject::PreCallValidateCreateDescriptorUpdateTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateDescriptorUpdateTemplateKHR)     != typeid(&ValidationObject::PreCallValidateCreateDescriptorUpdateTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateDescriptorUpdateTemplateKHR)          != typeid(&ValidationObject::PreCallValidateCreateDescriptorUpdateTemplateKHR)) << 3))];

        disp_pre_rec_CreateDescriptorUpdateTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateDescriptorUpdateTemplateKHR)        != typeid(&ValidationObject::PreCallRecordCreateDescriptorUpdateTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateDescriptorUpdateTemplateKHR) != typeid(&ValidationObject::PreCallRecordCreateDescriptorUpdateTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateDescriptorUpdateTemplateKHR)     != typeid(&ValidationObject::PreCallRecordCreateDescriptorUpdateTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateDescriptorUpdateTemplateKHR)          != typeid(&ValidationObject::PreCallRecordCreateDescriptorUpdateTemplateKHR)) << 3))];

        disp_post_rec_CreateDescriptorUpdateTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateDescriptorUpdateTemplateKHR)        != typeid(&ValidationObject::PostCallRecordCreateDescriptorUpdateTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateDescriptorUpdateTemplateKHR) != typeid(&ValidationObject::PostCallRecordCreateDescriptorUpdateTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateDescriptorUpdateTemplateKHR)     != typeid(&ValidationObject::PostCallRecordCreateDescriptorUpdateTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateDescriptorUpdateTemplateKHR)          != typeid(&ValidationObject::PostCallRecordCreateDescriptorUpdateTemplateKHR)) << 3))];

        disp_pre_val_DestroyDescriptorUpdateTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyDescriptorUpdateTemplateKHR)        != typeid(&ValidationObject::PreCallValidateDestroyDescriptorUpdateTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyDescriptorUpdateTemplateKHR) != typeid(&ValidationObject::PreCallValidateDestroyDescriptorUpdateTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyDescriptorUpdateTemplateKHR)     != typeid(&ValidationObject::PreCallValidateDestroyDescriptorUpdateTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyDescriptorUpdateTemplateKHR)          != typeid(&ValidationObject::PreCallValidateDestroyDescriptorUpdateTemplateKHR)) << 3))];

        disp_pre_rec_DestroyDescriptorUpdateTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyDescriptorUpdateTemplateKHR)        != typeid(&ValidationObject::PreCallRecordDestroyDescriptorUpdateTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyDescriptorUpdateTemplateKHR) != typeid(&ValidationObject::PreCallRecordDestroyDescriptorUpdateTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyDescriptorUpdateTemplateKHR)     != typeid(&ValidationObject::PreCallRecordDestroyDescriptorUpdateTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyDescriptorUpdateTemplateKHR)          != typeid(&ValidationObject::PreCallRecordDestroyDescriptorUpdateTemplateKHR)) << 3))];

        disp_post_rec_DestroyDescriptorUpdateTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyDescriptorUpdateTemplateKHR)        != typeid(&ValidationObject::PostCallRecordDestroyDescriptorUpdateTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyDescriptorUpdateTemplateKHR) != typeid(&ValidationObject::PostCallRecordDestroyDescriptorUpdateTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyDescriptorUpdateTemplateKHR)     != typeid(&ValidationObject::PostCallRecordDestroyDescriptorUpdateTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyDescriptorUpdateTemplateKHR)          != typeid(&ValidationObject::PostCallRecordDestroyDescriptorUpdateTemplateKHR)) << 3))];

        disp_pre_val_UpdateDescriptorSetWithTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateUpdateDescriptorSetWithTemplateKHR)        != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSetWithTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateUpdateDescriptorSetWithTemplateKHR) != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSetWithTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateUpdateDescriptorSetWithTemplateKHR)     != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSetWithTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateUpdateDescriptorSetWithTemplateKHR)          != typeid(&ValidationObject::PreCallValidateUpdateDescriptorSetWithTemplateKHR)) << 3))];

        disp_pre_rec_UpdateDescriptorSetWithTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordUpdateDescriptorSetWithTemplateKHR)        != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSetWithTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordUpdateDescriptorSetWithTemplateKHR) != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSetWithTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordUpdateDescriptorSetWithTemplateKHR)     != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSetWithTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordUpdateDescriptorSetWithTemplateKHR)          != typeid(&ValidationObject::PreCallRecordUpdateDescriptorSetWithTemplateKHR)) << 3))];

        disp_post_rec_UpdateDescriptorSetWithTemplateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordUpdateDescriptorSetWithTemplateKHR)        != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSetWithTemplateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordUpdateDescriptorSetWithTemplateKHR) != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSetWithTemplateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordUpdateDescriptorSetWithTemplateKHR)     != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSetWithTemplateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordUpdateDescriptorSetWithTemplateKHR)          != typeid(&ValidationObject::PostCallRecordUpdateDescriptorSetWithTemplateKHR)) << 3))];

        disp_pre_val_CreateRenderPass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateRenderPass2KHR)        != typeid(&ValidationObject::PreCallValidateCreateRenderPass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateRenderPass2KHR) != typeid(&ValidationObject::PreCallValidateCreateRenderPass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateRenderPass2KHR)     != typeid(&ValidationObject::PreCallValidateCreateRenderPass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateRenderPass2KHR)          != typeid(&ValidationObject::PreCallValidateCreateRenderPass2KHR)) << 3))];

        disp_pre_rec_CreateRenderPass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateRenderPass2KHR)        != typeid(&ValidationObject::PreCallRecordCreateRenderPass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateRenderPass2KHR) != typeid(&ValidationObject::PreCallRecordCreateRenderPass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateRenderPass2KHR)     != typeid(&ValidationObject::PreCallRecordCreateRenderPass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateRenderPass2KHR)          != typeid(&ValidationObject::PreCallRecordCreateRenderPass2KHR)) << 3))];

        disp_post_rec_CreateRenderPass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateRenderPass2KHR)        != typeid(&ValidationObject::PostCallRecordCreateRenderPass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateRenderPass2KHR) != typeid(&ValidationObject::PostCallRecordCreateRenderPass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateRenderPass2KHR)     != typeid(&ValidationObject::PostCallRecordCreateRenderPass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateRenderPass2KHR)          != typeid(&ValidationObject::PostCallRecordCreateRenderPass2KHR)) << 3))];

        disp_pre_val_CmdBeginRenderPass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBeginRenderPass2KHR)        != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBeginRenderPass2KHR) != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBeginRenderPass2KHR)     != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBeginRenderPass2KHR)          != typeid(&ValidationObject::PreCallValidateCmdBeginRenderPass2KHR)) << 3))];

        disp_pre_rec_CmdBeginRenderPass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBeginRenderPass2KHR)        != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBeginRenderPass2KHR) != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBeginRenderPass2KHR)     != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBeginRenderPass2KHR)          != typeid(&ValidationObject::PreCallRecordCmdBeginRenderPass2KHR)) << 3))];

        disp_post_rec_CmdBeginRenderPass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBeginRenderPass2KHR)        != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBeginRenderPass2KHR) != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBeginRenderPass2KHR)     != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBeginRenderPass2KHR)          != typeid(&ValidationObject::PostCallRecordCmdBeginRenderPass2KHR)) << 3))];

        disp_pre_val_CmdNextSubpass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdNextSubpass2KHR)        != typeid(&ValidationObject::PreCallValidateCmdNextSubpass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdNextSubpass2KHR) != typeid(&ValidationObject::PreCallValidateCmdNextSubpass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdNextSubpass2KHR)     != typeid(&ValidationObject::PreCallValidateCmdNextSubpass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdNextSubpass2KHR)          != typeid(&ValidationObject::PreCallValidateCmdNextSubpass2KHR)) << 3))];

        disp_pre_rec_CmdNextSubpass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdNextSubpass2KHR)        != typeid(&ValidationObject::PreCallRecordCmdNextSubpass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdNextSubpass2KHR) != typeid(&ValidationObject::PreCallRecordCmdNextSubpass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdNextSubpass2KHR)     != typeid(&ValidationObject::PreCallRecordCmdNextSubpass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdNextSubpass2KHR)          != typeid(&ValidationObject::PreCallRecordCmdNextSubpass2KHR)) << 3))];

        disp_post_rec_CmdNextSubpass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdNextSubpass2KHR)        != typeid(&ValidationObject::PostCallRecordCmdNextSubpass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdNextSubpass2KHR) != typeid(&ValidationObject::PostCallRecordCmdNextSubpass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdNextSubpass2KHR)     != typeid(&ValidationObject::PostCallRecordCmdNextSubpass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdNextSubpass2KHR)          != typeid(&ValidationObject::PostCallRecordCmdNextSubpass2KHR)) << 3))];

        disp_pre_val_CmdEndRenderPass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdEndRenderPass2KHR)        != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdEndRenderPass2KHR) != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdEndRenderPass2KHR)     != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdEndRenderPass2KHR)          != typeid(&ValidationObject::PreCallValidateCmdEndRenderPass2KHR)) << 3))];

        disp_pre_rec_CmdEndRenderPass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdEndRenderPass2KHR)        != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdEndRenderPass2KHR) != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdEndRenderPass2KHR)     != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdEndRenderPass2KHR)          != typeid(&ValidationObject::PreCallRecordCmdEndRenderPass2KHR)) << 3))];

        disp_post_rec_CmdEndRenderPass2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdEndRenderPass2KHR)        != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdEndRenderPass2KHR) != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdEndRenderPass2KHR)     != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdEndRenderPass2KHR)          != typeid(&ValidationObject::PostCallRecordCmdEndRenderPass2KHR)) << 3))];

        disp_pre_val_GetSwapchainStatusKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetSwapchainStatusKHR)        != typeid(&ValidationObject::PreCallValidateGetSwapchainStatusKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetSwapchainStatusKHR) != typeid(&ValidationObject::PreCallValidateGetSwapchainStatusKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetSwapchainStatusKHR)     != typeid(&ValidationObject::PreCallValidateGetSwapchainStatusKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetSwapchainStatusKHR)          != typeid(&ValidationObject::PreCallValidateGetSwapchainStatusKHR)) << 3))];

        disp_pre_rec_GetSwapchainStatusKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetSwapchainStatusKHR)        != typeid(&ValidationObject::PreCallRecordGetSwapchainStatusKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetSwapchainStatusKHR) != typeid(&ValidationObject::PreCallRecordGetSwapchainStatusKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetSwapchainStatusKHR)     != typeid(&ValidationObject::PreCallRecordGetSwapchainStatusKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetSwapchainStatusKHR)          != typeid(&ValidationObject::PreCallRecordGetSwapchainStatusKHR)) << 3))];

        disp_post_rec_GetSwapchainStatusKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetSwapchainStatusKHR)        != typeid(&ValidationObject::PostCallRecordGetSwapchainStatusKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetSwapchainStatusKHR) != typeid(&ValidationObject::PostCallRecordGetSwapchainStatusKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetSwapchainStatusKHR)     != typeid(&ValidationObject::PostCallRecordGetSwapchainStatusKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetSwapchainStatusKHR)          != typeid(&ValidationObject::PostCallRecordGetSwapchainStatusKHR)) << 3))];

#ifdef VK_USE_PLATFORM_WIN32_KHR
        disp_pre_val_ImportFenceWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateImportFenceWin32HandleKHR)        != typeid(&ValidationObject::PreCallValidateImportFenceWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateImportFenceWin32HandleKHR) != typeid(&ValidationObject::PreCallValidateImportFenceWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateImportFenceWin32HandleKHR)     != typeid(&ValidationObject::PreCallValidateImportFenceWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateImportFenceWin32HandleKHR)          != typeid(&ValidationObject::PreCallValidateImportFenceWin32HandleKHR)) << 3))];

        disp_pre_rec_ImportFenceWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordImportFenceWin32HandleKHR)        != typeid(&ValidationObject::PreCallRecordImportFenceWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordImportFenceWin32HandleKHR) != typeid(&ValidationObject::PreCallRecordImportFenceWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordImportFenceWin32HandleKHR)     != typeid(&ValidationObject::PreCallRecordImportFenceWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordImportFenceWin32HandleKHR)          != typeid(&ValidationObject::PreCallRecordImportFenceWin32HandleKHR)) << 3))];

        disp_post_rec_ImportFenceWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordImportFenceWin32HandleKHR)        != typeid(&ValidationObject::PostCallRecordImportFenceWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordImportFenceWin32HandleKHR) != typeid(&ValidationObject::PostCallRecordImportFenceWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordImportFenceWin32HandleKHR)     != typeid(&ValidationObject::PostCallRecordImportFenceWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordImportFenceWin32HandleKHR)          != typeid(&ValidationObject::PostCallRecordImportFenceWin32HandleKHR)) << 3))];

#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
        disp_pre_val_GetFenceWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetFenceWin32HandleKHR)        != typeid(&ValidationObject::PreCallValidateGetFenceWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetFenceWin32HandleKHR) != typeid(&ValidationObject::PreCallValidateGetFenceWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetFenceWin32HandleKHR)     != typeid(&ValidationObject::PreCallValidateGetFenceWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetFenceWin32HandleKHR)          != typeid(&ValidationObject::PreCallValidateGetFenceWin32HandleKHR)) << 3))];

        disp_pre_rec_GetFenceWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetFenceWin32HandleKHR)        != typeid(&ValidationObject::PreCallRecordGetFenceWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetFenceWin32HandleKHR) != typeid(&ValidationObject::PreCallRecordGetFenceWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetFenceWin32HandleKHR)     != typeid(&ValidationObject::PreCallRecordGetFenceWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetFenceWin32HandleKHR)          != typeid(&ValidationObject::PreCallRecordGetFenceWin32HandleKHR)) << 3))];

        disp_post_rec_GetFenceWin32HandleKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetFenceWin32HandleKHR)        != typeid(&ValidationObject::PostCallRecordGetFenceWin32HandleKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetFenceWin32HandleKHR) != typeid(&ValidationObject::PostCallRecordGetFenceWin32HandleKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetFenceWin32HandleKHR)     != typeid(&ValidationObject::PostCallRecordGetFenceWin32HandleKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetFenceWin32HandleKHR)          != typeid(&ValidationObject::PostCallRecordGetFenceWin32HandleKHR)) << 3))];

#endif
        disp_pre_val_ImportFenceFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateImportFenceFdKHR)        != typeid(&ValidationObject::PreCallValidateImportFenceFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateImportFenceFdKHR) != typeid(&ValidationObject::PreCallValidateImportFenceFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateImportFenceFdKHR)     != typeid(&ValidationObject::PreCallValidateImportFenceFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateImportFenceFdKHR)          != typeid(&ValidationObject::PreCallValidateImportFenceFdKHR)) << 3))];

        disp_pre_rec_ImportFenceFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordImportFenceFdKHR)        != typeid(&ValidationObject::PreCallRecordImportFenceFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordImportFenceFdKHR) != typeid(&ValidationObject::PreCallRecordImportFenceFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordImportFenceFdKHR)     != typeid(&ValidationObject::PreCallRecordImportFenceFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordImportFenceFdKHR)          != typeid(&ValidationObject::PreCallRecordImportFenceFdKHR)) << 3))];

        disp_post_rec_ImportFenceFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordImportFenceFdKHR)        != typeid(&ValidationObject::PostCallRecordImportFenceFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordImportFenceFdKHR) != typeid(&ValidationObject::PostCallRecordImportFenceFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordImportFenceFdKHR)     != typeid(&ValidationObject::PostCallRecordImportFenceFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordImportFenceFdKHR)          != typeid(&ValidationObject::PostCallRecordImportFenceFdKHR)) << 3))];

        disp_pre_val_GetFenceFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetFenceFdKHR)        != typeid(&ValidationObject::PreCallValidateGetFenceFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetFenceFdKHR) != typeid(&ValidationObject::PreCallValidateGetFenceFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetFenceFdKHR)     != typeid(&ValidationObject::PreCallValidateGetFenceFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetFenceFdKHR)          != typeid(&ValidationObject::PreCallValidateGetFenceFdKHR)) << 3))];

        disp_pre_rec_GetFenceFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetFenceFdKHR)        != typeid(&ValidationObject::PreCallRecordGetFenceFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetFenceFdKHR) != typeid(&ValidationObject::PreCallRecordGetFenceFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetFenceFdKHR)     != typeid(&ValidationObject::PreCallRecordGetFenceFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetFenceFdKHR)          != typeid(&ValidationObject::PreCallRecordGetFenceFdKHR)) << 3))];

        disp_post_rec_GetFenceFdKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetFenceFdKHR)        != typeid(&ValidationObject::PostCallRecordGetFenceFdKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetFenceFdKHR) != typeid(&ValidationObject::PostCallRecordGetFenceFdKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetFenceFdKHR)     != typeid(&ValidationObject::PostCallRecordGetFenceFdKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetFenceFdKHR)          != typeid(&ValidationObject::PostCallRecordGetFenceFdKHR)) << 3))];

        disp_pre_val_AcquireProfilingLockKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateAcquireProfilingLockKHR)        != typeid(&ValidationObject::PreCallValidateAcquireProfilingLockKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateAcquireProfilingLockKHR) != typeid(&ValidationObject::PreCallValidateAcquireProfilingLockKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateAcquireProfilingLockKHR)     != typeid(&ValidationObject::PreCallValidateAcquireProfilingLockKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateAcquireProfilingLockKHR)          != typeid(&ValidationObject::PreCallValidateAcquireProfilingLockKHR)) << 3))];

        disp_pre_rec_AcquireProfilingLockKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordAcquireProfilingLockKHR)        != typeid(&ValidationObject::PreCallRecordAcquireProfilingLockKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordAcquireProfilingLockKHR) != typeid(&ValidationObject::PreCallRecordAcquireProfilingLockKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordAcquireProfilingLockKHR)     != typeid(&ValidationObject::PreCallRecordAcquireProfilingLockKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordAcquireProfilingLockKHR)          != typeid(&ValidationObject::PreCallRecordAcquireProfilingLockKHR)) << 3))];

        disp_post_rec_AcquireProfilingLockKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordAcquireProfilingLockKHR)        != typeid(&ValidationObject::PostCallRecordAcquireProfilingLockKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordAcquireProfilingLockKHR) != typeid(&ValidationObject::PostCallRecordAcquireProfilingLockKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordAcquireProfilingLockKHR)     != typeid(&ValidationObject::PostCallRecordAcquireProfilingLockKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordAcquireProfilingLockKHR)          != typeid(&ValidationObject::PostCallRecordAcquireProfilingLockKHR)) << 3))];

        disp_pre_val_ReleaseProfilingLockKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateReleaseProfilingLockKHR)        != typeid(&ValidationObject::PreCallValidateReleaseProfilingLockKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateReleaseProfilingLockKHR) != typeid(&ValidationObject::PreCallValidateReleaseProfilingLockKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateReleaseProfilingLockKHR)     != typeid(&ValidationObject::PreCallValidateReleaseProfilingLockKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateReleaseProfilingLockKHR)          != typeid(&ValidationObject::PreCallValidateReleaseProfilingLockKHR)) << 3))];

        disp_pre_rec_ReleaseProfilingLockKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordReleaseProfilingLockKHR)        != typeid(&ValidationObject::PreCallRecordReleaseProfilingLockKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordReleaseProfilingLockKHR) != typeid(&ValidationObject::PreCallRecordReleaseProfilingLockKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordReleaseProfilingLockKHR)     != typeid(&ValidationObject::PreCallRecordReleaseProfilingLockKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordReleaseProfilingLockKHR)          != typeid(&ValidationObject::PreCallRecordReleaseProfilingLockKHR)) << 3))];

        disp_post_rec_ReleaseProfilingLockKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordReleaseProfilingLockKHR)        != typeid(&ValidationObject::PostCallRecordReleaseProfilingLockKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordReleaseProfilingLockKHR) != typeid(&ValidationObject::PostCallRecordReleaseProfilingLockKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordReleaseProfilingLockKHR)     != typeid(&ValidationObject::PostCallRecordReleaseProfilingLockKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordReleaseProfilingLockKHR)          != typeid(&ValidationObject::PostCallRecordReleaseProfilingLockKHR)) << 3))];

        disp_pre_val_GetImageMemoryRequirements2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetImageMemoryRequirements2KHR)        != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetImageMemoryRequirements2KHR) != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetImageMemoryRequirements2KHR)     != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetImageMemoryRequirements2KHR)          != typeid(&ValidationObject::PreCallValidateGetImageMemoryRequirements2KHR)) << 3))];

        disp_pre_rec_GetImageMemoryRequirements2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetImageMemoryRequirements2KHR)        != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetImageMemoryRequirements2KHR) != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetImageMemoryRequirements2KHR)     != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetImageMemoryRequirements2KHR)          != typeid(&ValidationObject::PreCallRecordGetImageMemoryRequirements2KHR)) << 3))];

        disp_post_rec_GetImageMemoryRequirements2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetImageMemoryRequirements2KHR)        != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetImageMemoryRequirements2KHR) != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetImageMemoryRequirements2KHR)     != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetImageMemoryRequirements2KHR)          != typeid(&ValidationObject::PostCallRecordGetImageMemoryRequirements2KHR)) << 3))];

        disp_pre_val_GetBufferMemoryRequirements2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetBufferMemoryRequirements2KHR)        != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetBufferMemoryRequirements2KHR) != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetBufferMemoryRequirements2KHR)     != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetBufferMemoryRequirements2KHR)          != typeid(&ValidationObject::PreCallValidateGetBufferMemoryRequirements2KHR)) << 3))];

        disp_pre_rec_GetBufferMemoryRequirements2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetBufferMemoryRequirements2KHR)        != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetBufferMemoryRequirements2KHR) != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetBufferMemoryRequirements2KHR)     != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetBufferMemoryRequirements2KHR)          != typeid(&ValidationObject::PreCallRecordGetBufferMemoryRequirements2KHR)) << 3))];

        disp_post_rec_GetBufferMemoryRequirements2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetBufferMemoryRequirements2KHR)        != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetBufferMemoryRequirements2KHR) != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetBufferMemoryRequirements2KHR)     != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetBufferMemoryRequirements2KHR)          != typeid(&ValidationObject::PostCallRecordGetBufferMemoryRequirements2KHR)) << 3))];

        disp_pre_val_GetImageSparseMemoryRequirements2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetImageSparseMemoryRequirements2KHR)        != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetImageSparseMemoryRequirements2KHR) != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetImageSparseMemoryRequirements2KHR)     != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetImageSparseMemoryRequirements2KHR)          != typeid(&ValidationObject::PreCallValidateGetImageSparseMemoryRequirements2KHR)) << 3))];

        disp_pre_rec_GetImageSparseMemoryRequirements2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetImageSparseMemoryRequirements2KHR)        != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetImageSparseMemoryRequirements2KHR) != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetImageSparseMemoryRequirements2KHR)     != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetImageSparseMemoryRequirements2KHR)          != typeid(&ValidationObject::PreCallRecordGetImageSparseMemoryRequirements2KHR)) << 3))];

        disp_post_rec_GetImageSparseMemoryRequirements2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetImageSparseMemoryRequirements2KHR)        != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetImageSparseMemoryRequirements2KHR) != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetImageSparseMemoryRequirements2KHR)     != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetImageSparseMemoryRequirements2KHR)          != typeid(&ValidationObject::PostCallRecordGetImageSparseMemoryRequirements2KHR)) << 3))];

        disp_pre_val_CreateSamplerYcbcrConversionKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateSamplerYcbcrConversionKHR)        != typeid(&ValidationObject::PreCallValidateCreateSamplerYcbcrConversionKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateSamplerYcbcrConversionKHR) != typeid(&ValidationObject::PreCallValidateCreateSamplerYcbcrConversionKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateSamplerYcbcrConversionKHR)     != typeid(&ValidationObject::PreCallValidateCreateSamplerYcbcrConversionKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateSamplerYcbcrConversionKHR)          != typeid(&ValidationObject::PreCallValidateCreateSamplerYcbcrConversionKHR)) << 3))];

        disp_pre_rec_CreateSamplerYcbcrConversionKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateSamplerYcbcrConversionKHR)        != typeid(&ValidationObject::PreCallRecordCreateSamplerYcbcrConversionKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateSamplerYcbcrConversionKHR) != typeid(&ValidationObject::PreCallRecordCreateSamplerYcbcrConversionKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateSamplerYcbcrConversionKHR)     != typeid(&ValidationObject::PreCallRecordCreateSamplerYcbcrConversionKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateSamplerYcbcrConversionKHR)          != typeid(&ValidationObject::PreCallRecordCreateSamplerYcbcrConversionKHR)) << 3))];

        disp_post_rec_CreateSamplerYcbcrConversionKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateSamplerYcbcrConversionKHR)        != typeid(&ValidationObject::PostCallRecordCreateSamplerYcbcrConversionKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateSamplerYcbcrConversionKHR) != typeid(&ValidationObject::PostCallRecordCreateSamplerYcbcrConversionKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateSamplerYcbcrConversionKHR)     != typeid(&ValidationObject::PostCallRecordCreateSamplerYcbcrConversionKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateSamplerYcbcrConversionKHR)          != typeid(&ValidationObject::PostCallRecordCreateSamplerYcbcrConversionKHR)) << 3))];

        disp_pre_val_DestroySamplerYcbcrConversionKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroySamplerYcbcrConversionKHR)        != typeid(&ValidationObject::PreCallValidateDestroySamplerYcbcrConversionKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroySamplerYcbcrConversionKHR) != typeid(&ValidationObject::PreCallValidateDestroySamplerYcbcrConversionKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroySamplerYcbcrConversionKHR)     != typeid(&ValidationObject::PreCallValidateDestroySamplerYcbcrConversionKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroySamplerYcbcrConversionKHR)          != typeid(&ValidationObject::PreCallValidateDestroySamplerYcbcrConversionKHR)) << 3))];

        disp_pre_rec_DestroySamplerYcbcrConversionKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroySamplerYcbcrConversionKHR)        != typeid(&ValidationObject::PreCallRecordDestroySamplerYcbcrConversionKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroySamplerYcbcrConversionKHR) != typeid(&ValidationObject::PreCallRecordDestroySamplerYcbcrConversionKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroySamplerYcbcrConversionKHR)     != typeid(&ValidationObject::PreCallRecordDestroySamplerYcbcrConversionKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroySamplerYcbcrConversionKHR)          != typeid(&ValidationObject::PreCallRecordDestroySamplerYcbcrConversionKHR)) << 3))];

        disp_post_rec_DestroySamplerYcbcrConversionKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroySamplerYcbcrConversionKHR)        != typeid(&ValidationObject::PostCallRecordDestroySamplerYcbcrConversionKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroySamplerYcbcrConversionKHR) != typeid(&ValidationObject::PostCallRecordDestroySamplerYcbcrConversionKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroySamplerYcbcrConversionKHR)     != typeid(&ValidationObject::PostCallRecordDestroySamplerYcbcrConversionKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroySamplerYcbcrConversionKHR)          != typeid(&ValidationObject::PostCallRecordDestroySamplerYcbcrConversionKHR)) << 3))];

        disp_pre_val_BindBufferMemory2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateBindBufferMemory2KHR)        != typeid(&ValidationObject::PreCallValidateBindBufferMemory2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateBindBufferMemory2KHR) != typeid(&ValidationObject::PreCallValidateBindBufferMemory2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateBindBufferMemory2KHR)     != typeid(&ValidationObject::PreCallValidateBindBufferMemory2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateBindBufferMemory2KHR)          != typeid(&ValidationObject::PreCallValidateBindBufferMemory2KHR)) << 3))];

        disp_pre_rec_BindBufferMemory2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordBindBufferMemory2KHR)        != typeid(&ValidationObject::PreCallRecordBindBufferMemory2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordBindBufferMemory2KHR) != typeid(&ValidationObject::PreCallRecordBindBufferMemory2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordBindBufferMemory2KHR)     != typeid(&ValidationObject::PreCallRecordBindBufferMemory2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordBindBufferMemory2KHR)          != typeid(&ValidationObject::PreCallRecordBindBufferMemory2KHR)) << 3))];

        disp_post_rec_BindBufferMemory2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordBindBufferMemory2KHR)        != typeid(&ValidationObject::PostCallRecordBindBufferMemory2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordBindBufferMemory2KHR) != typeid(&ValidationObject::PostCallRecordBindBufferMemory2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordBindBufferMemory2KHR)     != typeid(&ValidationObject::PostCallRecordBindBufferMemory2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordBindBufferMemory2KHR)          != typeid(&ValidationObject::PostCallRecordBindBufferMemory2KHR)) << 3))];

        disp_pre_val_BindImageMemory2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateBindImageMemory2KHR)        != typeid(&ValidationObject::PreCallValidateBindImageMemory2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateBindImageMemory2KHR) != typeid(&ValidationObject::PreCallValidateBindImageMemory2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateBindImageMemory2KHR)     != typeid(&ValidationObject::PreCallValidateBindImageMemory2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateBindImageMemory2KHR)          != typeid(&ValidationObject::PreCallValidateBindImageMemory2KHR)) << 3))];

        disp_pre_rec_BindImageMemory2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordBindImageMemory2KHR)        != typeid(&ValidationObject::PreCallRecordBindImageMemory2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordBindImageMemory2KHR) != typeid(&ValidationObject::PreCallRecordBindImageMemory2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordBindImageMemory2KHR)     != typeid(&ValidationObject::PreCallRecordBindImageMemory2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordBindImageMemory2KHR)          != typeid(&ValidationObject::PreCallRecordBindImageMemory2KHR)) << 3))];

        disp_post_rec_BindImageMemory2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordBindImageMemory2KHR)        != typeid(&ValidationObject::PostCallRecordBindImageMemory2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordBindImageMemory2KHR) != typeid(&ValidationObject::PostCallRecordBindImageMemory2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordBindImageMemory2KHR)     != typeid(&ValidationObject::PostCallRecordBindImageMemory2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordBindImageMemory2KHR)          != typeid(&ValidationObject::PostCallRecordBindImageMemory2KHR)) << 3))];

        disp_pre_val_GetDescriptorSetLayoutSupportKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDescriptorSetLayoutSupportKHR)        != typeid(&ValidationObject::PreCallValidateGetDescriptorSetLayoutSupportKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDescriptorSetLayoutSupportKHR) != typeid(&ValidationObject::PreCallValidateGetDescriptorSetLayoutSupportKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDescriptorSetLayoutSupportKHR)     != typeid(&ValidationObject::PreCallValidateGetDescriptorSetLayoutSupportKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDescriptorSetLayoutSupportKHR)          != typeid(&ValidationObject::PreCallValidateGetDescriptorSetLayoutSupportKHR)) << 3))];

        disp_pre_rec_GetDescriptorSetLayoutSupportKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDescriptorSetLayoutSupportKHR)        != typeid(&ValidationObject::PreCallRecordGetDescriptorSetLayoutSupportKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDescriptorSetLayoutSupportKHR) != typeid(&ValidationObject::PreCallRecordGetDescriptorSetLayoutSupportKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDescriptorSetLayoutSupportKHR)     != typeid(&ValidationObject::PreCallRecordGetDescriptorSetLayoutSupportKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDescriptorSetLayoutSupportKHR)          != typeid(&ValidationObject::PreCallRecordGetDescriptorSetLayoutSupportKHR)) << 3))];

        disp_post_rec_GetDescriptorSetLayoutSupportKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDescriptorSetLayoutSupportKHR)        != typeid(&ValidationObject::PostCallRecordGetDescriptorSetLayoutSupportKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDescriptorSetLayoutSupportKHR) != typeid(&ValidationObject::PostCallRecordGetDescriptorSetLayoutSupportKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDescriptorSetLayoutSupportKHR)     != typeid(&ValidationObject::PostCallRecordGetDescriptorSetLayoutSupportKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDescriptorSetLayoutSupportKHR)          != typeid(&ValidationObject::PostCallRecordGetDescriptorSetLayoutSupportKHR)) << 3))];

        disp_pre_val_CmdDrawIndirectCountKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawIndirectCountKHR)        != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCountKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawIndirectCountKHR) != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCountKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawIndirectCountKHR)     != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCountKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawIndirectCountKHR)          != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCountKHR)) << 3))];

        disp_pre_rec_CmdDrawIndirectCountKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawIndirectCountKHR)        != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCountKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawIndirectCountKHR) != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCountKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawIndirectCountKHR)     != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCountKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawIndirectCountKHR)          != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCountKHR)) << 3))];

        disp_post_rec_CmdDrawIndirectCountKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawIndirectCountKHR)        != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCountKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawIndirectCountKHR) != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCountKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawIndirectCountKHR)     != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCountKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawIndirectCountKHR)          != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCountKHR)) << 3))];

        disp_pre_val_CmdDrawIndexedIndirectCountKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawIndexedIndirectCountKHR)        != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCountKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawIndexedIndirectCountKHR) != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCountKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawIndexedIndirectCountKHR)     != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCountKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawIndexedIndirectCountKHR)          != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCountKHR)) << 3))];

        disp_pre_rec_CmdDrawIndexedIndirectCountKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawIndexedIndirectCountKHR)        != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCountKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawIndexedIndirectCountKHR) != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCountKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawIndexedIndirectCountKHR)     != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCountKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawIndexedIndirectCountKHR)          != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCountKHR)) << 3))];

        disp_post_rec_CmdDrawIndexedIndirectCountKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawIndexedIndirectCountKHR)        != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCountKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawIndexedIndirectCountKHR) != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCountKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawIndexedIndirectCountKHR)     != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCountKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawIndexedIndirectCountKHR)          != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCountKHR)) << 3))];

        disp_pre_val_GetSemaphoreCounterValueKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetSemaphoreCounterValueKHR)        != typeid(&ValidationObject::PreCallValidateGetSemaphoreCounterValueKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetSemaphoreCounterValueKHR) != typeid(&ValidationObject::PreCallValidateGetSemaphoreCounterValueKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetSemaphoreCounterValueKHR)     != typeid(&ValidationObject::PreCallValidateGetSemaphoreCounterValueKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetSemaphoreCounterValueKHR)          != typeid(&ValidationObject::PreCallValidateGetSemaphoreCounterValueKHR)) << 3))];

        disp_pre_rec_GetSemaphoreCounterValueKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetSemaphoreCounterValueKHR)        != typeid(&ValidationObject::PreCallRecordGetSemaphoreCounterValueKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetSemaphoreCounterValueKHR) != typeid(&ValidationObject::PreCallRecordGetSemaphoreCounterValueKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetSemaphoreCounterValueKHR)     != typeid(&ValidationObject::PreCallRecordGetSemaphoreCounterValueKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetSemaphoreCounterValueKHR)          != typeid(&ValidationObject::PreCallRecordGetSemaphoreCounterValueKHR)) << 3))];

        disp_post_rec_GetSemaphoreCounterValueKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetSemaphoreCounterValueKHR)        != typeid(&ValidationObject::PostCallRecordGetSemaphoreCounterValueKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetSemaphoreCounterValueKHR) != typeid(&ValidationObject::PostCallRecordGetSemaphoreCounterValueKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetSemaphoreCounterValueKHR)     != typeid(&ValidationObject::PostCallRecordGetSemaphoreCounterValueKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetSemaphoreCounterValueKHR)          != typeid(&ValidationObject::PostCallRecordGetSemaphoreCounterValueKHR)) << 3))];

        disp_pre_val_WaitSemaphoresKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateWaitSemaphoresKHR)        != typeid(&ValidationObject::PreCallValidateWaitSemaphoresKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateWaitSemaphoresKHR) != typeid(&ValidationObject::PreCallValidateWaitSemaphoresKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateWaitSemaphoresKHR)     != typeid(&ValidationObject::PreCallValidateWaitSemaphoresKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateWaitSemaphoresKHR)          != typeid(&ValidationObject::PreCallValidateWaitSemaphoresKHR)) << 3))];

        disp_pre_rec_WaitSemaphoresKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordWaitSemaphoresKHR)        != typeid(&ValidationObject::PreCallRecordWaitSemaphoresKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordWaitSemaphoresKHR) != typeid(&ValidationObject::PreCallRecordWaitSemaphoresKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordWaitSemaphoresKHR)     != typeid(&ValidationObject::PreCallRecordWaitSemaphoresKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordWaitSemaphoresKHR)          != typeid(&ValidationObject::PreCallRecordWaitSemaphoresKHR)) << 3))];

        disp_post_rec_WaitSemaphoresKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordWaitSemaphoresKHR)        != typeid(&ValidationObject::PostCallRecordWaitSemaphoresKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordWaitSemaphoresKHR) != typeid(&ValidationObject::PostCallRecordWaitSemaphoresKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordWaitSemaphoresKHR)     != typeid(&ValidationObject::PostCallRecordWaitSemaphoresKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordWaitSemaphoresKHR)          != typeid(&ValidationObject::PostCallRecordWaitSemaphoresKHR)) << 3))];

        disp_pre_val_SignalSemaphoreKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateSignalSemaphoreKHR)        != typeid(&ValidationObject::PreCallValidateSignalSemaphoreKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateSignalSemaphoreKHR) != typeid(&ValidationObject::PreCallValidateSignalSemaphoreKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateSignalSemaphoreKHR)     != typeid(&ValidationObject::PreCallValidateSignalSemaphoreKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateSignalSemaphoreKHR)          != typeid(&ValidationObject::PreCallValidateSignalSemaphoreKHR)) << 3))];

        disp_pre_rec_SignalSemaphoreKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordSignalSemaphoreKHR)        != typeid(&ValidationObject::PreCallRecordSignalSemaphoreKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordSignalSemaphoreKHR) != typeid(&ValidationObject::PreCallRecordSignalSemaphoreKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordSignalSemaphoreKHR)     != typeid(&ValidationObject::PreCallRecordSignalSemaphoreKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordSignalSemaphoreKHR)          != typeid(&ValidationObject::PreCallRecordSignalSemaphoreKHR)) << 3))];

        disp_post_rec_SignalSemaphoreKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordSignalSemaphoreKHR)        != typeid(&ValidationObject::PostCallRecordSignalSemaphoreKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordSignalSemaphoreKHR) != typeid(&ValidationObject::PostCallRecordSignalSemaphoreKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordSignalSemaphoreKHR)     != typeid(&ValidationObject::PostCallRecordSignalSemaphoreKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordSignalSemaphoreKHR)          != typeid(&ValidationObject::PostCallRecordSignalSemaphoreKHR)) << 3))];

        disp_pre_val_CmdSetFragmentShadingRateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetFragmentShadingRateKHR)        != typeid(&ValidationObject::PreCallValidateCmdSetFragmentShadingRateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetFragmentShadingRateKHR) != typeid(&ValidationObject::PreCallValidateCmdSetFragmentShadingRateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetFragmentShadingRateKHR)     != typeid(&ValidationObject::PreCallValidateCmdSetFragmentShadingRateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetFragmentShadingRateKHR)          != typeid(&ValidationObject::PreCallValidateCmdSetFragmentShadingRateKHR)) << 3))];

        disp_pre_rec_CmdSetFragmentShadingRateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetFragmentShadingRateKHR)        != typeid(&ValidationObject::PreCallRecordCmdSetFragmentShadingRateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetFragmentShadingRateKHR) != typeid(&ValidationObject::PreCallRecordCmdSetFragmentShadingRateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetFragmentShadingRateKHR)     != typeid(&ValidationObject::PreCallRecordCmdSetFragmentShadingRateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetFragmentShadingRateKHR)          != typeid(&ValidationObject::PreCallRecordCmdSetFragmentShadingRateKHR)) << 3))];

        disp_post_rec_CmdSetFragmentShadingRateKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetFragmentShadingRateKHR)        != typeid(&ValidationObject::PostCallRecordCmdSetFragmentShadingRateKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetFragmentShadingRateKHR) != typeid(&ValidationObject::PostCallRecordCmdSetFragmentShadingRateKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetFragmentShadingRateKHR)     != typeid(&ValidationObject::PostCallRecordCmdSetFragmentShadingRateKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetFragmentShadingRateKHR)          != typeid(&ValidationObject::PostCallRecordCmdSetFragmentShadingRateKHR)) << 3))];

        disp_pre_val_GetBufferDeviceAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetBufferDeviceAddressKHR)        != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetBufferDeviceAddressKHR) != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetBufferDeviceAddressKHR)     != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetBufferDeviceAddressKHR)          != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddressKHR)) << 3))];

        disp_pre_rec_GetBufferDeviceAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetBufferDeviceAddressKHR)        != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetBufferDeviceAddressKHR) != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetBufferDeviceAddressKHR)     != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetBufferDeviceAddressKHR)          != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddressKHR)) << 3))];

        disp_post_rec_GetBufferDeviceAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetBufferDeviceAddressKHR)        != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetBufferDeviceAddressKHR) != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetBufferDeviceAddressKHR)     != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetBufferDeviceAddressKHR)          != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddressKHR)) << 3))];

        disp_pre_val_GetBufferOpaqueCaptureAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetBufferOpaqueCaptureAddressKHR)        != typeid(&ValidationObject::PreCallValidateGetBufferOpaqueCaptureAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetBufferOpaqueCaptureAddressKHR) != typeid(&ValidationObject::PreCallValidateGetBufferOpaqueCaptureAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetBufferOpaqueCaptureAddressKHR)     != typeid(&ValidationObject::PreCallValidateGetBufferOpaqueCaptureAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetBufferOpaqueCaptureAddressKHR)          != typeid(&ValidationObject::PreCallValidateGetBufferOpaqueCaptureAddressKHR)) << 3))];

        disp_pre_rec_GetBufferOpaqueCaptureAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetBufferOpaqueCaptureAddressKHR)        != typeid(&ValidationObject::PreCallRecordGetBufferOpaqueCaptureAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetBufferOpaqueCaptureAddressKHR) != typeid(&ValidationObject::PreCallRecordGetBufferOpaqueCaptureAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetBufferOpaqueCaptureAddressKHR)     != typeid(&ValidationObject::PreCallRecordGetBufferOpaqueCaptureAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetBufferOpaqueCaptureAddressKHR)          != typeid(&ValidationObject::PreCallRecordGetBufferOpaqueCaptureAddressKHR)) << 3))];

        disp_post_rec_GetBufferOpaqueCaptureAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetBufferOpaqueCaptureAddressKHR)        != typeid(&ValidationObject::PostCallRecordGetBufferOpaqueCaptureAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetBufferOpaqueCaptureAddressKHR) != typeid(&ValidationObject::PostCallRecordGetBufferOpaqueCaptureAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetBufferOpaqueCaptureAddressKHR)     != typeid(&ValidationObject::PostCallRecordGetBufferOpaqueCaptureAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetBufferOpaqueCaptureAddressKHR)          != typeid(&ValidationObject::PostCallRecordGetBufferOpaqueCaptureAddressKHR)) << 3))];

        disp_pre_val_GetDeviceMemoryOpaqueCaptureAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceMemoryOpaqueCaptureAddressKHR)        != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryOpaqueCaptureAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceMemoryOpaqueCaptureAddressKHR) != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryOpaqueCaptureAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceMemoryOpaqueCaptureAddressKHR)     != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryOpaqueCaptureAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceMemoryOpaqueCaptureAddressKHR)          != typeid(&ValidationObject::PreCallValidateGetDeviceMemoryOpaqueCaptureAddressKHR)) << 3))];

        disp_pre_rec_GetDeviceMemoryOpaqueCaptureAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)        != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR) != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)     != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)          != typeid(&ValidationObject::PreCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)) << 3))];

        disp_post_rec_GetDeviceMemoryOpaqueCaptureAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)        != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR) != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)     != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)          != typeid(&ValidationObject::PostCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR)) << 3))];

        disp_pre_val_CreateDeferredOperationKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateDeferredOperationKHR)        != typeid(&ValidationObject::PreCallValidateCreateDeferredOperationKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateDeferredOperationKHR) != typeid(&ValidationObject::PreCallValidateCreateDeferredOperationKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateDeferredOperationKHR)     != typeid(&ValidationObject::PreCallValidateCreateDeferredOperationKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateDeferredOperationKHR)          != typeid(&ValidationObject::PreCallValidateCreateDeferredOperationKHR)) << 3))];

        disp_pre_rec_CreateDeferredOperationKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateDeferredOperationKHR)        != typeid(&ValidationObject::PreCallRecordCreateDeferredOperationKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateDeferredOperationKHR) != typeid(&ValidationObject::PreCallRecordCreateDeferredOperationKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateDeferredOperationKHR)     != typeid(&ValidationObject::PreCallRecordCreateDeferredOperationKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateDeferredOperationKHR)          != typeid(&ValidationObject::PreCallRecordCreateDeferredOperationKHR)) << 3))];

        disp_post_rec_CreateDeferredOperationKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateDeferredOperationKHR)        != typeid(&ValidationObject::PostCallRecordCreateDeferredOperationKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateDeferredOperationKHR) != typeid(&ValidationObject::PostCallRecordCreateDeferredOperationKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateDeferredOperationKHR)     != typeid(&ValidationObject::PostCallRecordCreateDeferredOperationKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateDeferredOperationKHR)          != typeid(&ValidationObject::PostCallRecordCreateDeferredOperationKHR)) << 3))];

        disp_pre_val_DestroyDeferredOperationKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyDeferredOperationKHR)        != typeid(&ValidationObject::PreCallValidateDestroyDeferredOperationKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyDeferredOperationKHR) != typeid(&ValidationObject::PreCallValidateDestroyDeferredOperationKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyDeferredOperationKHR)     != typeid(&ValidationObject::PreCallValidateDestroyDeferredOperationKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyDeferredOperationKHR)          != typeid(&ValidationObject::PreCallValidateDestroyDeferredOperationKHR)) << 3))];

        disp_pre_rec_DestroyDeferredOperationKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyDeferredOperationKHR)        != typeid(&ValidationObject::PreCallRecordDestroyDeferredOperationKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyDeferredOperationKHR) != typeid(&ValidationObject::PreCallRecordDestroyDeferredOperationKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyDeferredOperationKHR)     != typeid(&ValidationObject::PreCallRecordDestroyDeferredOperationKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyDeferredOperationKHR)          != typeid(&ValidationObject::PreCallRecordDestroyDeferredOperationKHR)) << 3))];

        disp_post_rec_DestroyDeferredOperationKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyDeferredOperationKHR)        != typeid(&ValidationObject::PostCallRecordDestroyDeferredOperationKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyDeferredOperationKHR) != typeid(&ValidationObject::PostCallRecordDestroyDeferredOperationKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyDeferredOperationKHR)     != typeid(&ValidationObject::PostCallRecordDestroyDeferredOperationKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyDeferredOperationKHR)          != typeid(&ValidationObject::PostCallRecordDestroyDeferredOperationKHR)) << 3))];

        disp_pre_val_GetDeferredOperationMaxConcurrencyKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeferredOperationMaxConcurrencyKHR)        != typeid(&ValidationObject::PreCallValidateGetDeferredOperationMaxConcurrencyKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeferredOperationMaxConcurrencyKHR) != typeid(&ValidationObject::PreCallValidateGetDeferredOperationMaxConcurrencyKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeferredOperationMaxConcurrencyKHR)     != typeid(&ValidationObject::PreCallValidateGetDeferredOperationMaxConcurrencyKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeferredOperationMaxConcurrencyKHR)          != typeid(&ValidationObject::PreCallValidateGetDeferredOperationMaxConcurrencyKHR)) << 3))];

        disp_pre_rec_GetDeferredOperationMaxConcurrencyKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeferredOperationMaxConcurrencyKHR)        != typeid(&ValidationObject::PreCallRecordGetDeferredOperationMaxConcurrencyKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeferredOperationMaxConcurrencyKHR) != typeid(&ValidationObject::PreCallRecordGetDeferredOperationMaxConcurrencyKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeferredOperationMaxConcurrencyKHR)     != typeid(&ValidationObject::PreCallRecordGetDeferredOperationMaxConcurrencyKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeferredOperationMaxConcurrencyKHR)          != typeid(&ValidationObject::PreCallRecordGetDeferredOperationMaxConcurrencyKHR)) << 3))];

        disp_post_rec_GetDeferredOperationMaxConcurrencyKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeferredOperationMaxConcurrencyKHR)        != typeid(&ValidationObject::PostCallRecordGetDeferredOperationMaxConcurrencyKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeferredOperationMaxConcurrencyKHR) != typeid(&ValidationObject::PostCallRecordGetDeferredOperationMaxConcurrencyKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeferredOperationMaxConcurrencyKHR)     != typeid(&ValidationObject::PostCallRecordGetDeferredOperationMaxConcurrencyKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeferredOperationMaxConcurrencyKHR)          != typeid(&ValidationObject::PostCallRecordGetDeferredOperationMaxConcurrencyKHR)) << 3))];

        disp_pre_val_GetDeferredOperationResultKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeferredOperationResultKHR)        != typeid(&ValidationObject::PreCallValidateGetDeferredOperationResultKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeferredOperationResultKHR) != typeid(&ValidationObject::PreCallValidateGetDeferredOperationResultKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeferredOperationResultKHR)     != typeid(&ValidationObject::PreCallValidateGetDeferredOperationResultKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeferredOperationResultKHR)          != typeid(&ValidationObject::PreCallValidateGetDeferredOperationResultKHR)) << 3))];

        disp_pre_rec_GetDeferredOperationResultKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeferredOperationResultKHR)        != typeid(&ValidationObject::PreCallRecordGetDeferredOperationResultKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeferredOperationResultKHR) != typeid(&ValidationObject::PreCallRecordGetDeferredOperationResultKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeferredOperationResultKHR)     != typeid(&ValidationObject::PreCallRecordGetDeferredOperationResultKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeferredOperationResultKHR)          != typeid(&ValidationObject::PreCallRecordGetDeferredOperationResultKHR)) << 3))];

        disp_post_rec_GetDeferredOperationResultKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeferredOperationResultKHR)        != typeid(&ValidationObject::PostCallRecordGetDeferredOperationResultKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeferredOperationResultKHR) != typeid(&ValidationObject::PostCallRecordGetDeferredOperationResultKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeferredOperationResultKHR)     != typeid(&ValidationObject::PostCallRecordGetDeferredOperationResultKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeferredOperationResultKHR)          != typeid(&ValidationObject::PostCallRecordGetDeferredOperationResultKHR)) << 3))];

        disp_pre_val_DeferredOperationJoinKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDeferredOperationJoinKHR)        != typeid(&ValidationObject::PreCallValidateDeferredOperationJoinKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDeferredOperationJoinKHR) != typeid(&ValidationObject::PreCallValidateDeferredOperationJoinKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDeferredOperationJoinKHR)     != typeid(&ValidationObject::PreCallValidateDeferredOperationJoinKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDeferredOperationJoinKHR)          != typeid(&ValidationObject::PreCallValidateDeferredOperationJoinKHR)) << 3))];

        disp_pre_rec_DeferredOperationJoinKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDeferredOperationJoinKHR)        != typeid(&ValidationObject::PreCallRecordDeferredOperationJoinKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDeferredOperationJoinKHR) != typeid(&ValidationObject::PreCallRecordDeferredOperationJoinKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDeferredOperationJoinKHR)     != typeid(&ValidationObject::PreCallRecordDeferredOperationJoinKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDeferredOperationJoinKHR)          != typeid(&ValidationObject::PreCallRecordDeferredOperationJoinKHR)) << 3))];

        disp_post_rec_DeferredOperationJoinKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDeferredOperationJoinKHR)        != typeid(&ValidationObject::PostCallRecordDeferredOperationJoinKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDeferredOperationJoinKHR) != typeid(&ValidationObject::PostCallRecordDeferredOperationJoinKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDeferredOperationJoinKHR)     != typeid(&ValidationObject::PostCallRecordDeferredOperationJoinKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDeferredOperationJoinKHR)          != typeid(&ValidationObject::PostCallRecordDeferredOperationJoinKHR)) << 3))];

        disp_pre_val_GetPipelineExecutablePropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetPipelineExecutablePropertiesKHR)        != typeid(&ValidationObject::PreCallValidateGetPipelineExecutablePropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetPipelineExecutablePropertiesKHR) != typeid(&ValidationObject::PreCallValidateGetPipelineExecutablePropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetPipelineExecutablePropertiesKHR)     != typeid(&ValidationObject::PreCallValidateGetPipelineExecutablePropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetPipelineExecutablePropertiesKHR)          != typeid(&ValidationObject::PreCallValidateGetPipelineExecutablePropertiesKHR)) << 3))];

        disp_pre_rec_GetPipelineExecutablePropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetPipelineExecutablePropertiesKHR)        != typeid(&ValidationObject::PreCallRecordGetPipelineExecutablePropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetPipelineExecutablePropertiesKHR) != typeid(&ValidationObject::PreCallRecordGetPipelineExecutablePropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetPipelineExecutablePropertiesKHR)     != typeid(&ValidationObject::PreCallRecordGetPipelineExecutablePropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetPipelineExecutablePropertiesKHR)          != typeid(&ValidationObject::PreCallRecordGetPipelineExecutablePropertiesKHR)) << 3))];

        disp_post_rec_GetPipelineExecutablePropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetPipelineExecutablePropertiesKHR)        != typeid(&ValidationObject::PostCallRecordGetPipelineExecutablePropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetPipelineExecutablePropertiesKHR) != typeid(&ValidationObject::PostCallRecordGetPipelineExecutablePropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetPipelineExecutablePropertiesKHR)     != typeid(&ValidationObject::PostCallRecordGetPipelineExecutablePropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetPipelineExecutablePropertiesKHR)          != typeid(&ValidationObject::PostCallRecordGetPipelineExecutablePropertiesKHR)) << 3))];

        disp_pre_val_GetPipelineExecutableStatisticsKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetPipelineExecutableStatisticsKHR)        != typeid(&ValidationObject::PreCallValidateGetPipelineExecutableStatisticsKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetPipelineExecutableStatisticsKHR) != typeid(&ValidationObject::PreCallValidateGetPipelineExecutableStatisticsKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetPipelineExecutableStatisticsKHR)     != typeid(&ValidationObject::PreCallValidateGetPipelineExecutableStatisticsKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetPipelineExecutableStatisticsKHR)          != typeid(&ValidationObject::PreCallValidateGetPipelineExecutableStatisticsKHR)) << 3))];

        disp_pre_rec_GetPipelineExecutableStatisticsKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetPipelineExecutableStatisticsKHR)        != typeid(&ValidationObject::PreCallRecordGetPipelineExecutableStatisticsKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetPipelineExecutableStatisticsKHR) != typeid(&ValidationObject::PreCallRecordGetPipelineExecutableStatisticsKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetPipelineExecutableStatisticsKHR)     != typeid(&ValidationObject::PreCallRecordGetPipelineExecutableStatisticsKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetPipelineExecutableStatisticsKHR)          != typeid(&ValidationObject::PreCallRecordGetPipelineExecutableStatisticsKHR)) << 3))];

        disp_post_rec_GetPipelineExecutableStatisticsKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetPipelineExecutableStatisticsKHR)        != typeid(&ValidationObject::PostCallRecordGetPipelineExecutableStatisticsKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetPipelineExecutableStatisticsKHR) != typeid(&ValidationObject::PostCallRecordGetPipelineExecutableStatisticsKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetPipelineExecutableStatisticsKHR)     != typeid(&ValidationObject::PostCallRecordGetPipelineExecutableStatisticsKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetPipelineExecutableStatisticsKHR)          != typeid(&ValidationObject::PostCallRecordGetPipelineExecutableStatisticsKHR)) << 3))];

        disp_pre_val_GetPipelineExecutableInternalRepresentationsKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetPipelineExecutableInternalRepresentationsKHR)        != typeid(&ValidationObject::PreCallValidateGetPipelineExecutableInternalRepresentationsKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetPipelineExecutableInternalRepresentationsKHR) != typeid(&ValidationObject::PreCallValidateGetPipelineExecutableInternalRepresentationsKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetPipelineExecutableInternalRepresentationsKHR)     != typeid(&ValidationObject::PreCallValidateGetPipelineExecutableInternalRepresentationsKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetPipelineExecutableInternalRepresentationsKHR)          != typeid(&ValidationObject::PreCallValidateGetPipelineExecutableInternalRepresentationsKHR)) << 3))];

        disp_pre_rec_GetPipelineExecutableInternalRepresentationsKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetPipelineExecutableInternalRepresentationsKHR)        != typeid(&ValidationObject::PreCallRecordGetPipelineExecutableInternalRepresentationsKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetPipelineExecutableInternalRepresentationsKHR) != typeid(&ValidationObject::PreCallRecordGetPipelineExecutableInternalRepresentationsKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetPipelineExecutableInternalRepresentationsKHR)     != typeid(&ValidationObject::PreCallRecordGetPipelineExecutableInternalRepresentationsKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetPipelineExecutableInternalRepresentationsKHR)          != typeid(&ValidationObject::PreCallRecordGetPipelineExecutableInternalRepresentationsKHR)) << 3))];

        disp_post_rec_GetPipelineExecutableInternalRepresentationsKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetPipelineExecutableInternalRepresentationsKHR)        != typeid(&ValidationObject::PostCallRecordGetPipelineExecutableInternalRepresentationsKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetPipelineExecutableInternalRepresentationsKHR) != typeid(&ValidationObject::PostCallRecordGetPipelineExecutableInternalRepresentationsKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetPipelineExecutableInternalRepresentationsKHR)     != typeid(&ValidationObject::PostCallRecordGetPipelineExecutableInternalRepresentationsKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetPipelineExecutableInternalRepresentationsKHR)          != typeid(&ValidationObject::PostCallRecordGetPipelineExecutableInternalRepresentationsKHR)) << 3))];

        disp_pre_val_CmdCopyBuffer2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyBuffer2KHR)        != typeid(&ValidationObject::PreCallValidateCmdCopyBuffer2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyBuffer2KHR) != typeid(&ValidationObject::PreCallValidateCmdCopyBuffer2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyBuffer2KHR)     != typeid(&ValidationObject::PreCallValidateCmdCopyBuffer2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyBuffer2KHR)          != typeid(&ValidationObject::PreCallValidateCmdCopyBuffer2KHR)) << 3))];

        disp_pre_rec_CmdCopyBuffer2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyBuffer2KHR)        != typeid(&ValidationObject::PreCallRecordCmdCopyBuffer2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyBuffer2KHR) != typeid(&ValidationObject::PreCallRecordCmdCopyBuffer2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyBuffer2KHR)     != typeid(&ValidationObject::PreCallRecordCmdCopyBuffer2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyBuffer2KHR)          != typeid(&ValidationObject::PreCallRecordCmdCopyBuffer2KHR)) << 3))];

        disp_post_rec_CmdCopyBuffer2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyBuffer2KHR)        != typeid(&ValidationObject::PostCallRecordCmdCopyBuffer2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyBuffer2KHR) != typeid(&ValidationObject::PostCallRecordCmdCopyBuffer2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyBuffer2KHR)     != typeid(&ValidationObject::PostCallRecordCmdCopyBuffer2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyBuffer2KHR)          != typeid(&ValidationObject::PostCallRecordCmdCopyBuffer2KHR)) << 3))];

        disp_pre_val_CmdCopyImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyImage2KHR)        != typeid(&ValidationObject::PreCallValidateCmdCopyImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyImage2KHR) != typeid(&ValidationObject::PreCallValidateCmdCopyImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyImage2KHR)     != typeid(&ValidationObject::PreCallValidateCmdCopyImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyImage2KHR)          != typeid(&ValidationObject::PreCallValidateCmdCopyImage2KHR)) << 3))];

        disp_pre_rec_CmdCopyImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyImage2KHR)        != typeid(&ValidationObject::PreCallRecordCmdCopyImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyImage2KHR) != typeid(&ValidationObject::PreCallRecordCmdCopyImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyImage2KHR)     != typeid(&ValidationObject::PreCallRecordCmdCopyImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyImage2KHR)          != typeid(&ValidationObject::PreCallRecordCmdCopyImage2KHR)) << 3))];

        disp_post_rec_CmdCopyImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyImage2KHR)        != typeid(&ValidationObject::PostCallRecordCmdCopyImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyImage2KHR) != typeid(&ValidationObject::PostCallRecordCmdCopyImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyImage2KHR)     != typeid(&ValidationObject::PostCallRecordCmdCopyImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyImage2KHR)          != typeid(&ValidationObject::PostCallRecordCmdCopyImage2KHR)) << 3))];

        disp_pre_val_CmdCopyBufferToImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyBufferToImage2KHR)        != typeid(&ValidationObject::PreCallValidateCmdCopyBufferToImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyBufferToImage2KHR) != typeid(&ValidationObject::PreCallValidateCmdCopyBufferToImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyBufferToImage2KHR)     != typeid(&ValidationObject::PreCallValidateCmdCopyBufferToImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyBufferToImage2KHR)          != typeid(&ValidationObject::PreCallValidateCmdCopyBufferToImage2KHR)) << 3))];

        disp_pre_rec_CmdCopyBufferToImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyBufferToImage2KHR)        != typeid(&ValidationObject::PreCallRecordCmdCopyBufferToImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyBufferToImage2KHR) != typeid(&ValidationObject::PreCallRecordCmdCopyBufferToImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyBufferToImage2KHR)     != typeid(&ValidationObject::PreCallRecordCmdCopyBufferToImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyBufferToImage2KHR)          != typeid(&ValidationObject::PreCallRecordCmdCopyBufferToImage2KHR)) << 3))];

        disp_post_rec_CmdCopyBufferToImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyBufferToImage2KHR)        != typeid(&ValidationObject::PostCallRecordCmdCopyBufferToImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyBufferToImage2KHR) != typeid(&ValidationObject::PostCallRecordCmdCopyBufferToImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyBufferToImage2KHR)     != typeid(&ValidationObject::PostCallRecordCmdCopyBufferToImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyBufferToImage2KHR)          != typeid(&ValidationObject::PostCallRecordCmdCopyBufferToImage2KHR)) << 3))];

        disp_pre_val_CmdCopyImageToBuffer2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyImageToBuffer2KHR)        != typeid(&ValidationObject::PreCallValidateCmdCopyImageToBuffer2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyImageToBuffer2KHR) != typeid(&ValidationObject::PreCallValidateCmdCopyImageToBuffer2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyImageToBuffer2KHR)     != typeid(&ValidationObject::PreCallValidateCmdCopyImageToBuffer2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyImageToBuffer2KHR)          != typeid(&ValidationObject::PreCallValidateCmdCopyImageToBuffer2KHR)) << 3))];

        disp_pre_rec_CmdCopyImageToBuffer2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyImageToBuffer2KHR)        != typeid(&ValidationObject::PreCallRecordCmdCopyImageToBuffer2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyImageToBuffer2KHR) != typeid(&ValidationObject::PreCallRecordCmdCopyImageToBuffer2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyImageToBuffer2KHR)     != typeid(&ValidationObject::PreCallRecordCmdCopyImageToBuffer2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyImageToBuffer2KHR)          != typeid(&ValidationObject::PreCallRecordCmdCopyImageToBuffer2KHR)) << 3))];

        disp_post_rec_CmdCopyImageToBuffer2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyImageToBuffer2KHR)        != typeid(&ValidationObject::PostCallRecordCmdCopyImageToBuffer2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyImageToBuffer2KHR) != typeid(&ValidationObject::PostCallRecordCmdCopyImageToBuffer2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyImageToBuffer2KHR)     != typeid(&ValidationObject::PostCallRecordCmdCopyImageToBuffer2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyImageToBuffer2KHR)          != typeid(&ValidationObject::PostCallRecordCmdCopyImageToBuffer2KHR)) << 3))];

        disp_pre_val_CmdBlitImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBlitImage2KHR)        != typeid(&ValidationObject::PreCallValidateCmdBlitImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBlitImage2KHR) != typeid(&ValidationObject::PreCallValidateCmdBlitImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBlitImage2KHR)     != typeid(&ValidationObject::PreCallValidateCmdBlitImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBlitImage2KHR)          != typeid(&ValidationObject::PreCallValidateCmdBlitImage2KHR)) << 3))];

        disp_pre_rec_CmdBlitImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBlitImage2KHR)        != typeid(&ValidationObject::PreCallRecordCmdBlitImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBlitImage2KHR) != typeid(&ValidationObject::PreCallRecordCmdBlitImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBlitImage2KHR)     != typeid(&ValidationObject::PreCallRecordCmdBlitImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBlitImage2KHR)          != typeid(&ValidationObject::PreCallRecordCmdBlitImage2KHR)) << 3))];

        disp_post_rec_CmdBlitImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBlitImage2KHR)        != typeid(&ValidationObject::PostCallRecordCmdBlitImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBlitImage2KHR) != typeid(&ValidationObject::PostCallRecordCmdBlitImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBlitImage2KHR)     != typeid(&ValidationObject::PostCallRecordCmdBlitImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBlitImage2KHR)          != typeid(&ValidationObject::PostCallRecordCmdBlitImage2KHR)) << 3))];

        disp_pre_val_CmdResolveImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdResolveImage2KHR)        != typeid(&ValidationObject::PreCallValidateCmdResolveImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdResolveImage2KHR) != typeid(&ValidationObject::PreCallValidateCmdResolveImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdResolveImage2KHR)     != typeid(&ValidationObject::PreCallValidateCmdResolveImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdResolveImage2KHR)          != typeid(&ValidationObject::PreCallValidateCmdResolveImage2KHR)) << 3))];

        disp_pre_rec_CmdResolveImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdResolveImage2KHR)        != typeid(&ValidationObject::PreCallRecordCmdResolveImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdResolveImage2KHR) != typeid(&ValidationObject::PreCallRecordCmdResolveImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdResolveImage2KHR)     != typeid(&ValidationObject::PreCallRecordCmdResolveImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdResolveImage2KHR)          != typeid(&ValidationObject::PreCallRecordCmdResolveImage2KHR)) << 3))];

        disp_post_rec_CmdResolveImage2KHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdResolveImage2KHR)        != typeid(&ValidationObject::PostCallRecordCmdResolveImage2KHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdResolveImage2KHR) != typeid(&ValidationObject::PostCallRecordCmdResolveImage2KHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdResolveImage2KHR)     != typeid(&ValidationObject::PostCallRecordCmdResolveImage2KHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdResolveImage2KHR)          != typeid(&ValidationObject::PostCallRecordCmdResolveImage2KHR)) << 3))];

        disp_pre_val_DebugMarkerSetObjectTagEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDebugMarkerSetObjectTagEXT)        != typeid(&ValidationObject::PreCallValidateDebugMarkerSetObjectTagEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDebugMarkerSetObjectTagEXT) != typeid(&ValidationObject::PreCallValidateDebugMarkerSetObjectTagEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDebugMarkerSetObjectTagEXT)     != typeid(&ValidationObject::PreCallValidateDebugMarkerSetObjectTagEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDebugMarkerSetObjectTagEXT)          != typeid(&ValidationObject::PreCallValidateDebugMarkerSetObjectTagEXT)) << 3))];

        disp_pre_rec_DebugMarkerSetObjectTagEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDebugMarkerSetObjectTagEXT)        != typeid(&ValidationObject::PreCallRecordDebugMarkerSetObjectTagEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDebugMarkerSetObjectTagEXT) != typeid(&ValidationObject::PreCallRecordDebugMarkerSetObjectTagEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDebugMarkerSetObjectTagEXT)     != typeid(&ValidationObject::PreCallRecordDebugMarkerSetObjectTagEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDebugMarkerSetObjectTagEXT)          != typeid(&ValidationObject::PreCallRecordDebugMarkerSetObjectTagEXT)) << 3))];

        disp_post_rec_DebugMarkerSetObjectTagEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDebugMarkerSetObjectTagEXT)        != typeid(&ValidationObject::PostCallRecordDebugMarkerSetObjectTagEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDebugMarkerSetObjectTagEXT) != typeid(&ValidationObject::PostCallRecordDebugMarkerSetObjectTagEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDebugMarkerSetObjectTagEXT)     != typeid(&ValidationObject::PostCallRecordDebugMarkerSetObjectTagEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDebugMarkerSetObjectTagEXT)          != typeid(&ValidationObject::PostCallRecordDebugMarkerSetObjectTagEXT)) << 3))];

        disp_pre_val_DebugMarkerSetObjectNameEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDebugMarkerSetObjectNameEXT)        != typeid(&ValidationObject::PreCallValidateDebugMarkerSetObjectNameEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDebugMarkerSetObjectNameEXT) != typeid(&ValidationObject::PreCallValidateDebugMarkerSetObjectNameEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDebugMarkerSetObjectNameEXT)     != typeid(&ValidationObject::PreCallValidateDebugMarkerSetObjectNameEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDebugMarkerSetObjectNameEXT)          != typeid(&ValidationObject::PreCallValidateDebugMarkerSetObjectNameEXT)) << 3))];

        disp_pre_rec_DebugMarkerSetObjectNameEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDebugMarkerSetObjectNameEXT)        != typeid(&ValidationObject::PreCallRecordDebugMarkerSetObjectNameEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDebugMarkerSetObjectNameEXT) != typeid(&ValidationObject::PreCallRecordDebugMarkerSetObjectNameEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDebugMarkerSetObjectNameEXT)     != typeid(&ValidationObject::PreCallRecordDebugMarkerSetObjectNameEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDebugMarkerSetObjectNameEXT)          != typeid(&ValidationObject::PreCallRecordDebugMarkerSetObjectNameEXT)) << 3))];

        disp_post_rec_DebugMarkerSetObjectNameEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDebugMarkerSetObjectNameEXT)        != typeid(&ValidationObject::PostCallRecordDebugMarkerSetObjectNameEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDebugMarkerSetObjectNameEXT) != typeid(&ValidationObject::PostCallRecordDebugMarkerSetObjectNameEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDebugMarkerSetObjectNameEXT)     != typeid(&ValidationObject::PostCallRecordDebugMarkerSetObjectNameEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDebugMarkerSetObjectNameEXT)          != typeid(&ValidationObject::PostCallRecordDebugMarkerSetObjectNameEXT)) << 3))];

        disp_pre_val_CmdDebugMarkerBeginEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDebugMarkerBeginEXT)        != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerBeginEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDebugMarkerBeginEXT) != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerBeginEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDebugMarkerBeginEXT)     != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerBeginEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDebugMarkerBeginEXT)          != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerBeginEXT)) << 3))];

        disp_pre_rec_CmdDebugMarkerBeginEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDebugMarkerBeginEXT)        != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerBeginEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDebugMarkerBeginEXT) != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerBeginEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDebugMarkerBeginEXT)     != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerBeginEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDebugMarkerBeginEXT)          != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerBeginEXT)) << 3))];

        disp_post_rec_CmdDebugMarkerBeginEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDebugMarkerBeginEXT)        != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerBeginEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDebugMarkerBeginEXT) != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerBeginEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDebugMarkerBeginEXT)     != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerBeginEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDebugMarkerBeginEXT)          != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerBeginEXT)) << 3))];

        disp_pre_val_CmdDebugMarkerEndEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDebugMarkerEndEXT)        != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerEndEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDebugMarkerEndEXT) != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerEndEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDebugMarkerEndEXT)     != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerEndEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDebugMarkerEndEXT)          != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerEndEXT)) << 3))];

        disp_pre_rec_CmdDebugMarkerEndEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDebugMarkerEndEXT)        != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerEndEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDebugMarkerEndEXT) != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerEndEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDebugMarkerEndEXT)     != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerEndEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDebugMarkerEndEXT)          != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerEndEXT)) << 3))];

        disp_post_rec_CmdDebugMarkerEndEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDebugMarkerEndEXT)        != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerEndEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDebugMarkerEndEXT) != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerEndEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDebugMarkerEndEXT)     != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerEndEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDebugMarkerEndEXT)          != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerEndEXT)) << 3))];

        disp_pre_val_CmdDebugMarkerInsertEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDebugMarkerInsertEXT)        != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerInsertEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDebugMarkerInsertEXT) != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerInsertEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDebugMarkerInsertEXT)     != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerInsertEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDebugMarkerInsertEXT)          != typeid(&ValidationObject::PreCallValidateCmdDebugMarkerInsertEXT)) << 3))];

        disp_pre_rec_CmdDebugMarkerInsertEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDebugMarkerInsertEXT)        != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerInsertEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDebugMarkerInsertEXT) != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerInsertEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDebugMarkerInsertEXT)     != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerInsertEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDebugMarkerInsertEXT)          != typeid(&ValidationObject::PreCallRecordCmdDebugMarkerInsertEXT)) << 3))];

        disp_post_rec_CmdDebugMarkerInsertEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDebugMarkerInsertEXT)        != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerInsertEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDebugMarkerInsertEXT) != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerInsertEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDebugMarkerInsertEXT)     != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerInsertEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDebugMarkerInsertEXT)          != typeid(&ValidationObject::PostCallRecordCmdDebugMarkerInsertEXT)) << 3))];

        disp_pre_val_CmdBindTransformFeedbackBuffersEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBindTransformFeedbackBuffersEXT)        != typeid(&ValidationObject::PreCallValidateCmdBindTransformFeedbackBuffersEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBindTransformFeedbackBuffersEXT) != typeid(&ValidationObject::PreCallValidateCmdBindTransformFeedbackBuffersEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBindTransformFeedbackBuffersEXT)     != typeid(&ValidationObject::PreCallValidateCmdBindTransformFeedbackBuffersEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBindTransformFeedbackBuffersEXT)          != typeid(&ValidationObject::PreCallValidateCmdBindTransformFeedbackBuffersEXT)) << 3))];

        disp_pre_rec_CmdBindTransformFeedbackBuffersEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBindTransformFeedbackBuffersEXT)        != typeid(&ValidationObject::PreCallRecordCmdBindTransformFeedbackBuffersEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBindTransformFeedbackBuffersEXT) != typeid(&ValidationObject::PreCallRecordCmdBindTransformFeedbackBuffersEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBindTransformFeedbackBuffersEXT)     != typeid(&ValidationObject::PreCallRecordCmdBindTransformFeedbackBuffersEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBindTransformFeedbackBuffersEXT)          != typeid(&ValidationObject::PreCallRecordCmdBindTransformFeedbackBuffersEXT)) << 3))];

        disp_post_rec_CmdBindTransformFeedbackBuffersEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBindTransformFeedbackBuffersEXT)        != typeid(&ValidationObject::PostCallRecordCmdBindTransformFeedbackBuffersEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBindTransformFeedbackBuffersEXT) != typeid(&ValidationObject::PostCallRecordCmdBindTransformFeedbackBuffersEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBindTransformFeedbackBuffersEXT)     != typeid(&ValidationObject::PostCallRecordCmdBindTransformFeedbackBuffersEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBindTransformFeedbackBuffersEXT)          != typeid(&ValidationObject::PostCallRecordCmdBindTransformFeedbackBuffersEXT)) << 3))];

        disp_pre_val_CmdBeginTransformFeedbackEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBeginTransformFeedbackEXT)        != typeid(&ValidationObject::PreCallValidateCmdBeginTransformFeedbackEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBeginTransformFeedbackEXT) != typeid(&ValidationObject::PreCallValidateCmdBeginTransformFeedbackEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBeginTransformFeedbackEXT)     != typeid(&ValidationObject::PreCallValidateCmdBeginTransformFeedbackEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBeginTransformFeedbackEXT)          != typeid(&ValidationObject::PreCallValidateCmdBeginTransformFeedbackEXT)) << 3))];

        disp_pre_rec_CmdBeginTransformFeedbackEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBeginTransformFeedbackEXT)        != typeid(&ValidationObject::PreCallRecordCmdBeginTransformFeedbackEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBeginTransformFeedbackEXT) != typeid(&ValidationObject::PreCallRecordCmdBeginTransformFeedbackEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBeginTransformFeedbackEXT)     != typeid(&ValidationObject::PreCallRecordCmdBeginTransformFeedbackEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBeginTransformFeedbackEXT)          != typeid(&ValidationObject::PreCallRecordCmdBeginTransformFeedbackEXT)) << 3))];

        disp_post_rec_CmdBeginTransformFeedbackEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBeginTransformFeedbackEXT)        != typeid(&ValidationObject::PostCallRecordCmdBeginTransformFeedbackEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBeginTransformFeedbackEXT) != typeid(&ValidationObject::PostCallRecordCmdBeginTransformFeedbackEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBeginTransformFeedbackEXT)     != typeid(&ValidationObject::PostCallRecordCmdBeginTransformFeedbackEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBeginTransformFeedbackEXT)          != typeid(&ValidationObject::PostCallRecordCmdBeginTransformFeedbackEXT)) << 3))];

        disp_pre_val_CmdEndTransformFeedbackEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdEndTransformFeedbackEXT)        != typeid(&ValidationObject::PreCallValidateCmdEndTransformFeedbackEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdEndTransformFeedbackEXT) != typeid(&ValidationObject::PreCallValidateCmdEndTransformFeedbackEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdEndTransformFeedbackEXT)     != typeid(&ValidationObject::PreCallValidateCmdEndTransformFeedbackEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdEndTransformFeedbackEXT)          != typeid(&ValidationObject::PreCallValidateCmdEndTransformFeedbackEXT)) << 3))];

        disp_pre_rec_CmdEndTransformFeedbackEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdEndTransformFeedbackEXT)        != typeid(&ValidationObject::PreCallRecordCmdEndTransformFeedbackEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdEndTransformFeedbackEXT) != typeid(&ValidationObject::PreCallRecordCmdEndTransformFeedbackEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdEndTransformFeedbackEXT)     != typeid(&ValidationObject::PreCallRecordCmdEndTransformFeedbackEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdEndTransformFeedbackEXT)          != typeid(&ValidationObject::PreCallRecordCmdEndTransformFeedbackEXT)) << 3))];

        disp_post_rec_CmdEndTransformFeedbackEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdEndTransformFeedbackEXT)        != typeid(&ValidationObject::PostCallRecordCmdEndTransformFeedbackEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdEndTransformFeedbackEXT) != typeid(&ValidationObject::PostCallRecordCmdEndTransformFeedbackEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdEndTransformFeedbackEXT)     != typeid(&ValidationObject::PostCallRecordCmdEndTransformFeedbackEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdEndTransformFeedbackEXT)          != typeid(&ValidationObject::PostCallRecordCmdEndTransformFeedbackEXT)) << 3))];

        disp_pre_val_CmdBeginQueryIndexedEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBeginQueryIndexedEXT)        != typeid(&ValidationObject::PreCallValidateCmdBeginQueryIndexedEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBeginQueryIndexedEXT) != typeid(&ValidationObject::PreCallValidateCmdBeginQueryIndexedEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBeginQueryIndexedEXT)     != typeid(&ValidationObject::PreCallValidateCmdBeginQueryIndexedEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBeginQueryIndexedEXT)          != typeid(&ValidationObject::PreCallValidateCmdBeginQueryIndexedEXT)) << 3))];

        disp_pre_rec_CmdBeginQueryIndexedEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBeginQueryIndexedEXT)        != typeid(&ValidationObject::PreCallRecordCmdBeginQueryIndexedEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBeginQueryIndexedEXT) != typeid(&ValidationObject::PreCallRecordCmdBeginQueryIndexedEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBeginQueryIndexedEXT)     != typeid(&ValidationObject::PreCallRecordCmdBeginQueryIndexedEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBeginQueryIndexedEXT)          != typeid(&ValidationObject::PreCallRecordCmdBeginQueryIndexedEXT)) << 3))];

        disp_post_rec_CmdBeginQueryIndexedEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBeginQueryIndexedEXT)        != typeid(&ValidationObject::PostCallRecordCmdBeginQueryIndexedEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBeginQueryIndexedEXT) != typeid(&ValidationObject::PostCallRecordCmdBeginQueryIndexedEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBeginQueryIndexedEXT)     != typeid(&ValidationObject::PostCallRecordCmdBeginQueryIndexedEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBeginQueryIndexedEXT)          != typeid(&ValidationObject::PostCallRecordCmdBeginQueryIndexedEXT)) << 3))];

        disp_pre_val_CmdEndQueryIndexedEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdEndQueryIndexedEXT)        != typeid(&ValidationObject::PreCallValidateCmdEndQueryIndexedEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdEndQueryIndexedEXT) != typeid(&ValidationObject::PreCallValidateCmdEndQueryIndexedEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdEndQueryIndexedEXT)     != typeid(&ValidationObject::PreCallValidateCmdEndQueryIndexedEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdEndQueryIndexedEXT)          != typeid(&ValidationObject::PreCallValidateCmdEndQueryIndexedEXT)) << 3))];

        disp_pre_rec_CmdEndQueryIndexedEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdEndQueryIndexedEXT)        != typeid(&ValidationObject::PreCallRecordCmdEndQueryIndexedEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdEndQueryIndexedEXT) != typeid(&ValidationObject::PreCallRecordCmdEndQueryIndexedEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdEndQueryIndexedEXT)     != typeid(&ValidationObject::PreCallRecordCmdEndQueryIndexedEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdEndQueryIndexedEXT)          != typeid(&ValidationObject::PreCallRecordCmdEndQueryIndexedEXT)) << 3))];

        disp_post_rec_CmdEndQueryIndexedEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdEndQueryIndexedEXT)        != typeid(&ValidationObject::PostCallRecordCmdEndQueryIndexedEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdEndQueryIndexedEXT) != typeid(&ValidationObject::PostCallRecordCmdEndQueryIndexedEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdEndQueryIndexedEXT)     != typeid(&ValidationObject::PostCallRecordCmdEndQueryIndexedEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdEndQueryIndexedEXT)          != typeid(&ValidationObject::PostCallRecordCmdEndQueryIndexedEXT)) << 3))];

        disp_pre_val_CmdDrawIndirectByteCountEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawIndirectByteCountEXT)        != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectByteCountEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawIndirectByteCountEXT) != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectByteCountEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawIndirectByteCountEXT)     != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectByteCountEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawIndirectByteCountEXT)          != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectByteCountEXT)) << 3))];

        disp_pre_rec_CmdDrawIndirectByteCountEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawIndirectByteCountEXT)        != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectByteCountEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawIndirectByteCountEXT) != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectByteCountEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawIndirectByteCountEXT)     != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectByteCountEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawIndirectByteCountEXT)          != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectByteCountEXT)) << 3))];

        disp_post_rec_CmdDrawIndirectByteCountEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawIndirectByteCountEXT)        != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectByteCountEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawIndirectByteCountEXT) != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectByteCountEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawIndirectByteCountEXT)     != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectByteCountEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawIndirectByteCountEXT)          != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectByteCountEXT)) << 3))];

        disp_pre_val_GetImageViewHandleNVX = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetImageViewHandleNVX)        != typeid(&ValidationObject::PreCallValidateGetImageViewHandleNVX)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetImageViewHandleNVX) != typeid(&ValidationObject::PreCallValidateGetImageViewHandleNVX)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetImageViewHandleNVX)     != typeid(&ValidationObject::PreCallValidateGetImageViewHandleNVX)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetImageViewHandleNVX)          != typeid(&ValidationObject::PreCallValidateGetImageViewHandleNVX)) << 3))];

        disp_pre_rec_GetImageViewHandleNVX = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetImageViewHandleNVX)        != typeid(&ValidationObject::PreCallRecordGetImageViewHandleNVX)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetImageViewHandleNVX) != typeid(&ValidationObject::PreCallRecordGetImageViewHandleNVX)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetImageViewHandleNVX)     != typeid(&ValidationObject::PreCallRecordGetImageViewHandleNVX)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetImageViewHandleNVX)          != typeid(&ValidationObject::PreCallRecordGetImageViewHandleNVX)) << 3))];

        disp_post_rec_GetImageViewHandleNVX = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetImageViewHandleNVX)        != typeid(&ValidationObject::PostCallRecordGetImageViewHandleNVX)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetImageViewHandleNVX) != typeid(&ValidationObject::PostCallRecordGetImageViewHandleNVX)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetImageViewHandleNVX)     != typeid(&ValidationObject::PostCallRecordGetImageViewHandleNVX)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetImageViewHandleNVX)          != typeid(&ValidationObject::PostCallRecordGetImageViewHandleNVX)) << 3))];

        disp_pre_val_GetImageViewAddressNVX = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetImageViewAddressNVX)        != typeid(&ValidationObject::PreCallValidateGetImageViewAddressNVX)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetImageViewAddressNVX) != typeid(&ValidationObject::PreCallValidateGetImageViewAddressNVX)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetImageViewAddressNVX)     != typeid(&ValidationObject::PreCallValidateGetImageViewAddressNVX)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetImageViewAddressNVX)          != typeid(&ValidationObject::PreCallValidateGetImageViewAddressNVX)) << 3))];

        disp_pre_rec_GetImageViewAddressNVX = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetImageViewAddressNVX)        != typeid(&ValidationObject::PreCallRecordGetImageViewAddressNVX)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetImageViewAddressNVX) != typeid(&ValidationObject::PreCallRecordGetImageViewAddressNVX)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetImageViewAddressNVX)     != typeid(&ValidationObject::PreCallRecordGetImageViewAddressNVX)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetImageViewAddressNVX)          != typeid(&ValidationObject::PreCallRecordGetImageViewAddressNVX)) << 3))];

        disp_post_rec_GetImageViewAddressNVX = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetImageViewAddressNVX)        != typeid(&ValidationObject::PostCallRecordGetImageViewAddressNVX)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetImageViewAddressNVX) != typeid(&ValidationObject::PostCallRecordGetImageViewAddressNVX)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetImageViewAddressNVX)     != typeid(&ValidationObject::PostCallRecordGetImageViewAddressNVX)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetImageViewAddressNVX)          != typeid(&ValidationObject::PostCallRecordGetImageViewAddressNVX)) << 3))];

        disp_pre_val_CmdDrawIndirectCountAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawIndirectCountAMD)        != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCountAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawIndirectCountAMD) != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCountAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawIndirectCountAMD)     != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCountAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawIndirectCountAMD)          != typeid(&ValidationObject::PreCallValidateCmdDrawIndirectCountAMD)) << 3))];

        disp_pre_rec_CmdDrawIndirectCountAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawIndirectCountAMD)        != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCountAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawIndirectCountAMD) != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCountAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawIndirectCountAMD)     != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCountAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawIndirectCountAMD)          != typeid(&ValidationObject::PreCallRecordCmdDrawIndirectCountAMD)) << 3))];

        disp_post_rec_CmdDrawIndirectCountAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawIndirectCountAMD)        != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCountAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawIndirectCountAMD) != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCountAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawIndirectCountAMD)     != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCountAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawIndirectCountAMD)          != typeid(&ValidationObject::PostCallRecordCmdDrawIndirectCountAMD)) << 3))];

        disp_pre_val_CmdDrawIndexedIndirectCountAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawIndexedIndirectCountAMD)        != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCountAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawIndexedIndirectCountAMD) != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCountAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawIndexedIndirectCountAMD)     != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCountAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawIndexedIndirectCountAMD)          != typeid(&ValidationObject::PreCallValidateCmdDrawIndexedIndirectCountAMD)) << 3))];

        disp_pre_rec_CmdDrawIndexedIndirectCountAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawIndexedIndirectCountAMD)        != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCountAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawIndexedIndirectCountAMD) != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCountAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawIndexedIndirectCountAMD)     != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCountAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawIndexedIndirectCountAMD)          != typeid(&ValidationObject::PreCallRecordCmdDrawIndexedIndirectCountAMD)) << 3))];

        disp_post_rec_CmdDrawIndexedIndirectCountAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawIndexedIndirectCountAMD)        != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCountAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawIndexedIndirectCountAMD) != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCountAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawIndexedIndirectCountAMD)     != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCountAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawIndexedIndirectCountAMD)          != typeid(&ValidationObject::PostCallRecordCmdDrawIndexedIndirectCountAMD)) << 3))];

        disp_pre_val_GetShaderInfoAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetShaderInfoAMD)        != typeid(&ValidationObject::PreCallValidateGetShaderInfoAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetShaderInfoAMD) != typeid(&ValidationObject::PreCallValidateGetShaderInfoAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetShaderInfoAMD)     != typeid(&ValidationObject::PreCallValidateGetShaderInfoAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetShaderInfoAMD)          != typeid(&ValidationObject::PreCallValidateGetShaderInfoAMD)) << 3))];

        disp_pre_rec_GetShaderInfoAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetShaderInfoAMD)        != typeid(&ValidationObject::PreCallRecordGetShaderInfoAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetShaderInfoAMD) != typeid(&ValidationObject::PreCallRecordGetShaderInfoAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetShaderInfoAMD)     != typeid(&ValidationObject::PreCallRecordGetShaderInfoAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetShaderInfoAMD)          != typeid(&ValidationObject::PreCallRecordGetShaderInfoAMD)) << 3))];

        disp_post_rec_GetShaderInfoAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetShaderInfoAMD)        != typeid(&ValidationObject::PostCallRecordGetShaderInfoAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetShaderInfoAMD) != typeid(&ValidationObject::PostCallRecordGetShaderInfoAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetShaderInfoAMD)     != typeid(&ValidationObject::PostCallRecordGetShaderInfoAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetShaderInfoAMD)          != typeid(&ValidationObject::PostCallRecordGetShaderInfoAMD)) << 3))];

#ifdef VK_USE_PLATFORM_GGP
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
        disp_pre_val_GetMemoryWin32HandleNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetMemoryWin32HandleNV)        != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandleNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetMemoryWin32HandleNV) != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandleNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetMemoryWin32HandleNV)     != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandleNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetMemoryWin32HandleNV)          != typeid(&ValidationObject::PreCallValidateGetMemoryWin32HandleNV)) << 3))];

        disp_pre_rec_GetMemoryWin32HandleNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetMemoryWin32HandleNV)        != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandleNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetMemoryWin32HandleNV) != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandleNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetMemoryWin32HandleNV)     != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandleNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetMemoryWin32HandleNV)          != typeid(&ValidationObject::PreCallRecordGetMemoryWin32HandleNV)) << 3))];

        disp_post_rec_GetMemoryWin32HandleNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetMemoryWin32HandleNV)        != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandleNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetMemoryWin32HandleNV) != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandleNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetMemoryWin32HandleNV)     != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandleNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetMemoryWin32HandleNV)          != typeid(&ValidationObject::PostCallRecordGetMemoryWin32HandleNV)) << 3))];

#endif
#ifdef VK_USE_PLATFORM_VI_NN
#endif
        disp_pre_val_CmdBeginConditionalRenderingEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBeginConditionalRenderingEXT)        != typeid(&ValidationObject::PreCallValidateCmdBeginConditionalRenderingEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBeginConditionalRenderingEXT) != typeid(&ValidationObject::PreCallValidateCmdBeginConditionalRenderingEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBeginConditionalRenderingEXT)     != typeid(&ValidationObject::PreCallValidateCmdBeginConditionalRenderingEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBeginConditionalRenderingEXT)          != typeid(&ValidationObject::PreCallValidateCmdBeginConditionalRenderingEXT)) << 3))];

        disp_pre_rec_CmdBeginConditionalRenderingEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBeginConditionalRenderingEXT)        != typeid(&ValidationObject::PreCallRecordCmdBeginConditionalRenderingEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBeginConditionalRenderingEXT) != typeid(&ValidationObject::PreCallRecordCmdBeginConditionalRenderingEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBeginConditionalRenderingEXT)     != typeid(&ValidationObject::PreCallRecordCmdBeginConditionalRenderingEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBeginConditionalRenderingEXT)          != typeid(&ValidationObject::PreCallRecordCmdBeginConditionalRenderingEXT)) << 3))];

        disp_post_rec_CmdBeginConditionalRenderingEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBeginConditionalRenderingEXT)        != typeid(&ValidationObject::PostCallRecordCmdBeginConditionalRenderingEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBeginConditionalRenderingEXT) != typeid(&ValidationObject::PostCallRecordCmdBeginConditionalRenderingEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBeginConditionalRenderingEXT)     != typeid(&ValidationObject::PostCallRecordCmdBeginConditionalRenderingEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBeginConditionalRenderingEXT)          != typeid(&ValidationObject::PostCallRecordCmdBeginConditionalRenderingEXT)) << 3))];

        disp_pre_val_CmdEndConditionalRenderingEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdEndConditionalRenderingEXT)        != typeid(&ValidationObject::PreCallValidateCmdEndConditionalRenderingEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdEndConditionalRenderingEXT) != typeid(&ValidationObject::PreCallValidateCmdEndConditionalRenderingEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdEndConditionalRenderingEXT)     != typeid(&ValidationObject::PreCallValidateCmdEndConditionalRenderingEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdEndConditionalRenderingEXT)          != typeid(&ValidationObject::PreCallValidateCmdEndConditionalRenderingEXT)) << 3))];

        disp_pre_rec_CmdEndConditionalRenderingEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdEndConditionalRenderingEXT)        != typeid(&ValidationObject::PreCallRecordCmdEndConditionalRenderingEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdEndConditionalRenderingEXT) != typeid(&ValidationObject::PreCallRecordCmdEndConditionalRenderingEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdEndConditionalRenderingEXT)     != typeid(&ValidationObject::PreCallRecordCmdEndConditionalRenderingEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdEndConditionalRenderingEXT)          != typeid(&ValidationObject::PreCallRecordCmdEndConditionalRenderingEXT)) << 3))];

        disp_post_rec_CmdEndConditionalRenderingEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdEndConditionalRenderingEXT)        != typeid(&ValidationObject::PostCallRecordCmdEndConditionalRenderingEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdEndConditionalRenderingEXT) != typeid(&ValidationObject::PostCallRecordCmdEndConditionalRenderingEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdEndConditionalRenderingEXT)     != typeid(&ValidationObject::PostCallRecordCmdEndConditionalRenderingEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdEndConditionalRenderingEXT)          != typeid(&ValidationObject::PostCallRecordCmdEndConditionalRenderingEXT)) << 3))];

        disp_pre_val_CmdSetViewportWScalingNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetViewportWScalingNV)        != typeid(&ValidationObject::PreCallValidateCmdSetViewportWScalingNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetViewportWScalingNV) != typeid(&ValidationObject::PreCallValidateCmdSetViewportWScalingNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetViewportWScalingNV)     != typeid(&ValidationObject::PreCallValidateCmdSetViewportWScalingNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetViewportWScalingNV)          != typeid(&ValidationObject::PreCallValidateCmdSetViewportWScalingNV)) << 3))];

        disp_pre_rec_CmdSetViewportWScalingNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetViewportWScalingNV)        != typeid(&ValidationObject::PreCallRecordCmdSetViewportWScalingNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetViewportWScalingNV) != typeid(&ValidationObject::PreCallRecordCmdSetViewportWScalingNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetViewportWScalingNV)     != typeid(&ValidationObject::PreCallRecordCmdSetViewportWScalingNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetViewportWScalingNV)          != typeid(&ValidationObject::PreCallRecordCmdSetViewportWScalingNV)) << 3))];

        disp_post_rec_CmdSetViewportWScalingNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetViewportWScalingNV)        != typeid(&ValidationObject::PostCallRecordCmdSetViewportWScalingNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetViewportWScalingNV) != typeid(&ValidationObject::PostCallRecordCmdSetViewportWScalingNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetViewportWScalingNV)     != typeid(&ValidationObject::PostCallRecordCmdSetViewportWScalingNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetViewportWScalingNV)          != typeid(&ValidationObject::PostCallRecordCmdSetViewportWScalingNV)) << 3))];

#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
#endif
#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
#endif
        disp_pre_val_DisplayPowerControlEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDisplayPowerControlEXT)        != typeid(&ValidationObject::PreCallValidateDisplayPowerControlEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDisplayPowerControlEXT) != typeid(&ValidationObject::PreCallValidateDisplayPowerControlEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDisplayPowerControlEXT)     != typeid(&ValidationObject::PreCallValidateDisplayPowerControlEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDisplayPowerControlEXT)          != typeid(&ValidationObject::PreCallValidateDisplayPowerControlEXT)) << 3))];

        disp_pre_rec_DisplayPowerControlEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDisplayPowerControlEXT)        != typeid(&ValidationObject::PreCallRecordDisplayPowerControlEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDisplayPowerControlEXT) != typeid(&ValidationObject::PreCallRecordDisplayPowerControlEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDisplayPowerControlEXT)     != typeid(&ValidationObject::PreCallRecordDisplayPowerControlEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDisplayPowerControlEXT)          != typeid(&ValidationObject::PreCallRecordDisplayPowerControlEXT)) << 3))];

        disp_post_rec_DisplayPowerControlEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDisplayPowerControlEXT)        != typeid(&ValidationObject::PostCallRecordDisplayPowerControlEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDisplayPowerControlEXT) != typeid(&ValidationObject::PostCallRecordDisplayPowerControlEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDisplayPowerControlEXT)     != typeid(&ValidationObject::PostCallRecordDisplayPowerControlEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDisplayPowerControlEXT)          != typeid(&ValidationObject::PostCallRecordDisplayPowerControlEXT)) << 3))];

        disp_pre_val_RegisterDeviceEventEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateRegisterDeviceEventEXT)        != typeid(&ValidationObject::PreCallValidateRegisterDeviceEventEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateRegisterDeviceEventEXT) != typeid(&ValidationObject::PreCallValidateRegisterDeviceEventEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateRegisterDeviceEventEXT)     != typeid(&ValidationObject::PreCallValidateRegisterDeviceEventEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateRegisterDeviceEventEXT)          != typeid(&ValidationObject::PreCallValidateRegisterDeviceEventEXT)) << 3))];

        disp_pre_rec_RegisterDeviceEventEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordRegisterDeviceEventEXT)        != typeid(&ValidationObject::PreCallRecordRegisterDeviceEventEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordRegisterDeviceEventEXT) != typeid(&ValidationObject::PreCallRecordRegisterDeviceEventEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordRegisterDeviceEventEXT)     != typeid(&ValidationObject::PreCallRecordRegisterDeviceEventEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordRegisterDeviceEventEXT)          != typeid(&ValidationObject::PreCallRecordRegisterDeviceEventEXT)) << 3))];

        disp_post_rec_RegisterDeviceEventEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordRegisterDeviceEventEXT)        != typeid(&ValidationObject::PostCallRecordRegisterDeviceEventEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordRegisterDeviceEventEXT) != typeid(&ValidationObject::PostCallRecordRegisterDeviceEventEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordRegisterDeviceEventEXT)     != typeid(&ValidationObject::PostCallRecordRegisterDeviceEventEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordRegisterDeviceEventEXT)          != typeid(&ValidationObject::PostCallRecordRegisterDeviceEventEXT)) << 3))];

        disp_pre_val_RegisterDisplayEventEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateRegisterDisplayEventEXT)        != typeid(&ValidationObject::PreCallValidateRegisterDisplayEventEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateRegisterDisplayEventEXT) != typeid(&ValidationObject::PreCallValidateRegisterDisplayEventEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateRegisterDisplayEventEXT)     != typeid(&ValidationObject::PreCallValidateRegisterDisplayEventEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateRegisterDisplayEventEXT)          != typeid(&ValidationObject::PreCallValidateRegisterDisplayEventEXT)) << 3))];

        disp_pre_rec_RegisterDisplayEventEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordRegisterDisplayEventEXT)        != typeid(&ValidationObject::PreCallRecordRegisterDisplayEventEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordRegisterDisplayEventEXT) != typeid(&ValidationObject::PreCallRecordRegisterDisplayEventEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordRegisterDisplayEventEXT)     != typeid(&ValidationObject::PreCallRecordRegisterDisplayEventEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordRegisterDisplayEventEXT)          != typeid(&ValidationObject::PreCallRecordRegisterDisplayEventEXT)) << 3))];

        disp_post_rec_RegisterDisplayEventEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordRegisterDisplayEventEXT)        != typeid(&ValidationObject::PostCallRecordRegisterDisplayEventEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordRegisterDisplayEventEXT) != typeid(&ValidationObject::PostCallRecordRegisterDisplayEventEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordRegisterDisplayEventEXT)     != typeid(&ValidationObject::PostCallRecordRegisterDisplayEventEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordRegisterDisplayEventEXT)          != typeid(&ValidationObject::PostCallRecordRegisterDisplayEventEXT)) << 3))];

        disp_pre_val_GetSwapchainCounterEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetSwapchainCounterEXT)        != typeid(&ValidationObject::PreCallValidateGetSwapchainCounterEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetSwapchainCounterEXT) != typeid(&ValidationObject::PreCallValidateGetSwapchainCounterEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetSwapchainCounterEXT)     != typeid(&ValidationObject::PreCallValidateGetSwapchainCounterEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetSwapchainCounterEXT)          != typeid(&ValidationObject::PreCallValidateGetSwapchainCounterEXT)) << 3))];

        disp_pre_rec_GetSwapchainCounterEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetSwapchainCounterEXT)        != typeid(&ValidationObject::PreCallRecordGetSwapchainCounterEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetSwapchainCounterEXT) != typeid(&ValidationObject::PreCallRecordGetSwapchainCounterEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetSwapchainCounterEXT)     != typeid(&ValidationObject::PreCallRecordGetSwapchainCounterEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetSwapchainCounterEXT)          != typeid(&ValidationObject::PreCallRecordGetSwapchainCounterEXT)) << 3))];

        disp_post_rec_GetSwapchainCounterEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetSwapchainCounterEXT)        != typeid(&ValidationObject::PostCallRecordGetSwapchainCounterEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetSwapchainCounterEXT) != typeid(&ValidationObject::PostCallRecordGetSwapchainCounterEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetSwapchainCounterEXT)     != typeid(&ValidationObject::PostCallRecordGetSwapchainCounterEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetSwapchainCounterEXT)          != typeid(&ValidationObject::PostCallRecordGetSwapchainCounterEXT)) << 3))];

        disp_pre_val_GetRefreshCycleDurationGOOGLE = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetRefreshCycleDurationGOOGLE)        != typeid(&ValidationObject::PreCallValidateGetRefreshCycleDurationGOOGLE)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetRefreshCycleDurationGOOGLE) != typeid(&ValidationObject::PreCallValidateGetRefreshCycleDurationGOOGLE)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetRefreshCycleDurationGOOGLE)     != typeid(&ValidationObject::PreCallValidateGetRefreshCycleDurationGOOGLE)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetRefreshCycleDurationGOOGLE)          != typeid(&ValidationObject::PreCallValidateGetRefreshCycleDurationGOOGLE)) << 3))];

        disp_pre_rec_GetRefreshCycleDurationGOOGLE = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetRefreshCycleDurationGOOGLE)        != typeid(&ValidationObject::PreCallRecordGetRefreshCycleDurationGOOGLE)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetRefreshCycleDurationGOOGLE) != typeid(&ValidationObject::PreCallRecordGetRefreshCycleDurationGOOGLE)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetRefreshCycleDurationGOOGLE)     != typeid(&ValidationObject::PreCallRecordGetRefreshCycleDurationGOOGLE)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetRefreshCycleDurationGOOGLE)          != typeid(&ValidationObject::PreCallRecordGetRefreshCycleDurationGOOGLE)) << 3))];

        disp_post_rec_GetRefreshCycleDurationGOOGLE = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetRefreshCycleDurationGOOGLE)        != typeid(&ValidationObject::PostCallRecordGetRefreshCycleDurationGOOGLE)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetRefreshCycleDurationGOOGLE) != typeid(&ValidationObject::PostCallRecordGetRefreshCycleDurationGOOGLE)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetRefreshCycleDurationGOOGLE)     != typeid(&ValidationObject::PostCallRecordGetRefreshCycleDurationGOOGLE)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetRefreshCycleDurationGOOGLE)          != typeid(&ValidationObject::PostCallRecordGetRefreshCycleDurationGOOGLE)) << 3))];

        disp_pre_val_GetPastPresentationTimingGOOGLE = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetPastPresentationTimingGOOGLE)        != typeid(&ValidationObject::PreCallValidateGetPastPresentationTimingGOOGLE)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetPastPresentationTimingGOOGLE) != typeid(&ValidationObject::PreCallValidateGetPastPresentationTimingGOOGLE)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetPastPresentationTimingGOOGLE)     != typeid(&ValidationObject::PreCallValidateGetPastPresentationTimingGOOGLE)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetPastPresentationTimingGOOGLE)          != typeid(&ValidationObject::PreCallValidateGetPastPresentationTimingGOOGLE)) << 3))];

        disp_pre_rec_GetPastPresentationTimingGOOGLE = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetPastPresentationTimingGOOGLE)        != typeid(&ValidationObject::PreCallRecordGetPastPresentationTimingGOOGLE)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetPastPresentationTimingGOOGLE) != typeid(&ValidationObject::PreCallRecordGetPastPresentationTimingGOOGLE)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetPastPresentationTimingGOOGLE)     != typeid(&ValidationObject::PreCallRecordGetPastPresentationTimingGOOGLE)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetPastPresentationTimingGOOGLE)          != typeid(&ValidationObject::PreCallRecordGetPastPresentationTimingGOOGLE)) << 3))];

        disp_post_rec_GetPastPresentationTimingGOOGLE = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetPastPresentationTimingGOOGLE)        != typeid(&ValidationObject::PostCallRecordGetPastPresentationTimingGOOGLE)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetPastPresentationTimingGOOGLE) != typeid(&ValidationObject::PostCallRecordGetPastPresentationTimingGOOGLE)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetPastPresentationTimingGOOGLE)     != typeid(&ValidationObject::PostCallRecordGetPastPresentationTimingGOOGLE)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetPastPresentationTimingGOOGLE)          != typeid(&ValidationObject::PostCallRecordGetPastPresentationTimingGOOGLE)) << 3))];

        disp_pre_val_CmdSetDiscardRectangleEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetDiscardRectangleEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetDiscardRectangleEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetDiscardRectangleEXT) != typeid(&ValidationObject::PreCallValidateCmdSetDiscardRectangleEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetDiscardRectangleEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetDiscardRectangleEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetDiscardRectangleEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetDiscardRectangleEXT)) << 3))];

        disp_pre_rec_CmdSetDiscardRectangleEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetDiscardRectangleEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetDiscardRectangleEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetDiscardRectangleEXT) != typeid(&ValidationObject::PreCallRecordCmdSetDiscardRectangleEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetDiscardRectangleEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetDiscardRectangleEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetDiscardRectangleEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetDiscardRectangleEXT)) << 3))];

        disp_post_rec_CmdSetDiscardRectangleEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetDiscardRectangleEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetDiscardRectangleEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetDiscardRectangleEXT) != typeid(&ValidationObject::PostCallRecordCmdSetDiscardRectangleEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetDiscardRectangleEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetDiscardRectangleEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetDiscardRectangleEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetDiscardRectangleEXT)) << 3))];

        disp_pre_val_SetHdrMetadataEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateSetHdrMetadataEXT)        != typeid(&ValidationObject::PreCallValidateSetHdrMetadataEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateSetHdrMetadataEXT) != typeid(&ValidationObject::PreCallValidateSetHdrMetadataEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateSetHdrMetadataEXT)     != typeid(&ValidationObject::PreCallValidateSetHdrMetadataEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateSetHdrMetadataEXT)          != typeid(&ValidationObject::PreCallValidateSetHdrMetadataEXT)) << 3))];

        disp_pre_rec_SetHdrMetadataEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordSetHdrMetadataEXT)        != typeid(&ValidationObject::PreCallRecordSetHdrMetadataEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordSetHdrMetadataEXT) != typeid(&ValidationObject::PreCallRecordSetHdrMetadataEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordSetHdrMetadataEXT)     != typeid(&ValidationObject::PreCallRecordSetHdrMetadataEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordSetHdrMetadataEXT)          != typeid(&ValidationObject::PreCallRecordSetHdrMetadataEXT)) << 3))];

        disp_post_rec_SetHdrMetadataEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordSetHdrMetadataEXT)        != typeid(&ValidationObject::PostCallRecordSetHdrMetadataEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordSetHdrMetadataEXT) != typeid(&ValidationObject::PostCallRecordSetHdrMetadataEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordSetHdrMetadataEXT)     != typeid(&ValidationObject::PostCallRecordSetHdrMetadataEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordSetHdrMetadataEXT)          != typeid(&ValidationObject::PostCallRecordSetHdrMetadataEXT)) << 3))];

#ifdef VK_USE_PLATFORM_IOS_MVK
#endif
#ifdef VK_USE_PLATFORM_MACOS_MVK
#endif
        disp_pre_val_SetDebugUtilsObjectNameEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateSetDebugUtilsObjectNameEXT)        != typeid(&ValidationObject::PreCallValidateSetDebugUtilsObjectNameEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateSetDebugUtilsObjectNameEXT) != typeid(&ValidationObject::PreCallValidateSetDebugUtilsObjectNameEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateSetDebugUtilsObjectNameEXT)     != typeid(&ValidationObject::PreCallValidateSetDebugUtilsObjectNameEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateSetDebugUtilsObjectNameEXT)          != typeid(&ValidationObject::PreCallValidateSetDebugUtilsObjectNameEXT)) << 3))];

        disp_pre_rec_SetDebugUtilsObjectNameEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordSetDebugUtilsObjectNameEXT)        != typeid(&ValidationObject::PreCallRecordSetDebugUtilsObjectNameEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordSetDebugUtilsObjectNameEXT) != typeid(&ValidationObject::PreCallRecordSetDebugUtilsObjectNameEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordSetDebugUtilsObjectNameEXT)     != typeid(&ValidationObject::PreCallRecordSetDebugUtilsObjectNameEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordSetDebugUtilsObjectNameEXT)          != typeid(&ValidationObject::PreCallRecordSetDebugUtilsObjectNameEXT)) << 3))];

        disp_post_rec_SetDebugUtilsObjectNameEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordSetDebugUtilsObjectNameEXT)        != typeid(&ValidationObject::PostCallRecordSetDebugUtilsObjectNameEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordSetDebugUtilsObjectNameEXT) != typeid(&ValidationObject::PostCallRecordSetDebugUtilsObjectNameEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordSetDebugUtilsObjectNameEXT)     != typeid(&ValidationObject::PostCallRecordSetDebugUtilsObjectNameEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordSetDebugUtilsObjectNameEXT)          != typeid(&ValidationObject::PostCallRecordSetDebugUtilsObjectNameEXT)) << 3))];

        disp_pre_val_SetDebugUtilsObjectTagEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateSetDebugUtilsObjectTagEXT)        != typeid(&ValidationObject::PreCallValidateSetDebugUtilsObjectTagEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateSetDebugUtilsObjectTagEXT) != typeid(&ValidationObject::PreCallValidateSetDebugUtilsObjectTagEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateSetDebugUtilsObjectTagEXT)     != typeid(&ValidationObject::PreCallValidateSetDebugUtilsObjectTagEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateSetDebugUtilsObjectTagEXT)          != typeid(&ValidationObject::PreCallValidateSetDebugUtilsObjectTagEXT)) << 3))];

        disp_pre_rec_SetDebugUtilsObjectTagEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordSetDebugUtilsObjectTagEXT)        != typeid(&ValidationObject::PreCallRecordSetDebugUtilsObjectTagEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordSetDebugUtilsObjectTagEXT) != typeid(&ValidationObject::PreCallRecordSetDebugUtilsObjectTagEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordSetDebugUtilsObjectTagEXT)     != typeid(&ValidationObject::PreCallRecordSetDebugUtilsObjectTagEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordSetDebugUtilsObjectTagEXT)          != typeid(&ValidationObject::PreCallRecordSetDebugUtilsObjectTagEXT)) << 3))];

        disp_post_rec_SetDebugUtilsObjectTagEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordSetDebugUtilsObjectTagEXT)        != typeid(&ValidationObject::PostCallRecordSetDebugUtilsObjectTagEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordSetDebugUtilsObjectTagEXT) != typeid(&ValidationObject::PostCallRecordSetDebugUtilsObjectTagEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordSetDebugUtilsObjectTagEXT)     != typeid(&ValidationObject::PostCallRecordSetDebugUtilsObjectTagEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordSetDebugUtilsObjectTagEXT)          != typeid(&ValidationObject::PostCallRecordSetDebugUtilsObjectTagEXT)) << 3))];

        disp_pre_val_QueueBeginDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateQueueBeginDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallValidateQueueBeginDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateQueueBeginDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallValidateQueueBeginDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateQueueBeginDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallValidateQueueBeginDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateQueueBeginDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallValidateQueueBeginDebugUtilsLabelEXT)) << 3))];

        disp_pre_rec_QueueBeginDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordQueueBeginDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallRecordQueueBeginDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordQueueBeginDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallRecordQueueBeginDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordQueueBeginDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallRecordQueueBeginDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordQueueBeginDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallRecordQueueBeginDebugUtilsLabelEXT)) << 3))];

        disp_post_rec_QueueBeginDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordQueueBeginDebugUtilsLabelEXT)        != typeid(&ValidationObject::PostCallRecordQueueBeginDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordQueueBeginDebugUtilsLabelEXT) != typeid(&ValidationObject::PostCallRecordQueueBeginDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordQueueBeginDebugUtilsLabelEXT)     != typeid(&ValidationObject::PostCallRecordQueueBeginDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordQueueBeginDebugUtilsLabelEXT)          != typeid(&ValidationObject::PostCallRecordQueueBeginDebugUtilsLabelEXT)) << 3))];

        disp_pre_val_QueueEndDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateQueueEndDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallValidateQueueEndDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateQueueEndDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallValidateQueueEndDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateQueueEndDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallValidateQueueEndDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateQueueEndDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallValidateQueueEndDebugUtilsLabelEXT)) << 3))];

        disp_pre_rec_QueueEndDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordQueueEndDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallRecordQueueEndDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordQueueEndDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallRecordQueueEndDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordQueueEndDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallRecordQueueEndDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordQueueEndDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallRecordQueueEndDebugUtilsLabelEXT)) << 3))];

        disp_post_rec_QueueEndDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordQueueEndDebugUtilsLabelEXT)        != typeid(&ValidationObject::PostCallRecordQueueEndDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordQueueEndDebugUtilsLabelEXT) != typeid(&ValidationObject::PostCallRecordQueueEndDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordQueueEndDebugUtilsLabelEXT)     != typeid(&ValidationObject::PostCallRecordQueueEndDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordQueueEndDebugUtilsLabelEXT)          != typeid(&ValidationObject::PostCallRecordQueueEndDebugUtilsLabelEXT)) << 3))];

        disp_pre_val_QueueInsertDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateQueueInsertDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallValidateQueueInsertDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateQueueInsertDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallValidateQueueInsertDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateQueueInsertDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallValidateQueueInsertDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateQueueInsertDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallValidateQueueInsertDebugUtilsLabelEXT)) << 3))];

        disp_pre_rec_QueueInsertDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordQueueInsertDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallRecordQueueInsertDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordQueueInsertDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallRecordQueueInsertDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordQueueInsertDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallRecordQueueInsertDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordQueueInsertDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallRecordQueueInsertDebugUtilsLabelEXT)) << 3))];

        disp_post_rec_QueueInsertDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordQueueInsertDebugUtilsLabelEXT)        != typeid(&ValidationObject::PostCallRecordQueueInsertDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordQueueInsertDebugUtilsLabelEXT) != typeid(&ValidationObject::PostCallRecordQueueInsertDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordQueueInsertDebugUtilsLabelEXT)     != typeid(&ValidationObject::PostCallRecordQueueInsertDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordQueueInsertDebugUtilsLabelEXT)          != typeid(&ValidationObject::PostCallRecordQueueInsertDebugUtilsLabelEXT)) << 3))];

        disp_pre_val_CmdBeginDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBeginDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallValidateCmdBeginDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBeginDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallValidateCmdBeginDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBeginDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallValidateCmdBeginDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBeginDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallValidateCmdBeginDebugUtilsLabelEXT)) << 3))];

        disp_pre_rec_CmdBeginDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBeginDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallRecordCmdBeginDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBeginDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallRecordCmdBeginDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBeginDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallRecordCmdBeginDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBeginDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallRecordCmdBeginDebugUtilsLabelEXT)) << 3))];

        disp_post_rec_CmdBeginDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBeginDebugUtilsLabelEXT)        != typeid(&ValidationObject::PostCallRecordCmdBeginDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBeginDebugUtilsLabelEXT) != typeid(&ValidationObject::PostCallRecordCmdBeginDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBeginDebugUtilsLabelEXT)     != typeid(&ValidationObject::PostCallRecordCmdBeginDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBeginDebugUtilsLabelEXT)          != typeid(&ValidationObject::PostCallRecordCmdBeginDebugUtilsLabelEXT)) << 3))];

        disp_pre_val_CmdEndDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdEndDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallValidateCmdEndDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdEndDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallValidateCmdEndDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdEndDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallValidateCmdEndDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdEndDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallValidateCmdEndDebugUtilsLabelEXT)) << 3))];

        disp_pre_rec_CmdEndDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdEndDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallRecordCmdEndDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdEndDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallRecordCmdEndDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdEndDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallRecordCmdEndDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdEndDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallRecordCmdEndDebugUtilsLabelEXT)) << 3))];

        disp_post_rec_CmdEndDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdEndDebugUtilsLabelEXT)        != typeid(&ValidationObject::PostCallRecordCmdEndDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdEndDebugUtilsLabelEXT) != typeid(&ValidationObject::PostCallRecordCmdEndDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdEndDebugUtilsLabelEXT)     != typeid(&ValidationObject::PostCallRecordCmdEndDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdEndDebugUtilsLabelEXT)          != typeid(&ValidationObject::PostCallRecordCmdEndDebugUtilsLabelEXT)) << 3))];

        disp_pre_val_CmdInsertDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdInsertDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallValidateCmdInsertDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdInsertDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallValidateCmdInsertDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdInsertDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallValidateCmdInsertDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdInsertDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallValidateCmdInsertDebugUtilsLabelEXT)) << 3))];

        disp_pre_rec_CmdInsertDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdInsertDebugUtilsLabelEXT)        != typeid(&ValidationObject::PreCallRecordCmdInsertDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdInsertDebugUtilsLabelEXT) != typeid(&ValidationObject::PreCallRecordCmdInsertDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdInsertDebugUtilsLabelEXT)     != typeid(&ValidationObject::PreCallRecordCmdInsertDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdInsertDebugUtilsLabelEXT)          != typeid(&ValidationObject::PreCallRecordCmdInsertDebugUtilsLabelEXT)) << 3))];

        disp_post_rec_CmdInsertDebugUtilsLabelEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdInsertDebugUtilsLabelEXT)        != typeid(&ValidationObject::PostCallRecordCmdInsertDebugUtilsLabelEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdInsertDebugUtilsLabelEXT) != typeid(&ValidationObject::PostCallRecordCmdInsertDebugUtilsLabelEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdInsertDebugUtilsLabelEXT)     != typeid(&ValidationObject::PostCallRecordCmdInsertDebugUtilsLabelEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdInsertDebugUtilsLabelEXT)          != typeid(&ValidationObject::PostCallRecordCmdInsertDebugUtilsLabelEXT)) << 3))];

#ifdef VK_USE_PLATFORM_ANDROID_KHR
        disp_pre_val_GetAndroidHardwareBufferPropertiesANDROID = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetAndroidHardwareBufferPropertiesANDROID)        != typeid(&ValidationObject::PreCallValidateGetAndroidHardwareBufferPropertiesANDROID)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetAndroidHardwareBufferPropertiesANDROID) != typeid(&ValidationObject::PreCallValidateGetAndroidHardwareBufferPropertiesANDROID)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetAndroidHardwareBufferPropertiesANDROID)     != typeid(&ValidationObject::PreCallValidateGetAndroidHardwareBufferPropertiesANDROID)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetAndroidHardwareBufferPropertiesANDROID)          != typeid(&ValidationObject::PreCallValidateGetAndroidHardwareBufferPropertiesANDROID)) << 3))];

        disp_pre_rec_GetAndroidHardwareBufferPropertiesANDROID = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetAndroidHardwareBufferPropertiesANDROID)        != typeid(&ValidationObject::PreCallRecordGetAndroidHardwareBufferPropertiesANDROID)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetAndroidHardwareBufferPropertiesANDROID) != typeid(&ValidationObject::PreCallRecordGetAndroidHardwareBufferPropertiesANDROID)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetAndroidHardwareBufferPropertiesANDROID)     != typeid(&ValidationObject::PreCallRecordGetAndroidHardwareBufferPropertiesANDROID)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetAndroidHardwareBufferPropertiesANDROID)          != typeid(&ValidationObject::PreCallRecordGetAndroidHardwareBufferPropertiesANDROID)) << 3))];

        disp_post_rec_GetAndroidHardwareBufferPropertiesANDROID = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetAndroidHardwareBufferPropertiesANDROID)        != typeid(&ValidationObject::PostCallRecordGetAndroidHardwareBufferPropertiesANDROID)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetAndroidHardwareBufferPropertiesANDROID) != typeid(&ValidationObject::PostCallRecordGetAndroidHardwareBufferPropertiesANDROID)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetAndroidHardwareBufferPropertiesANDROID)     != typeid(&ValidationObject::PostCallRecordGetAndroidHardwareBufferPropertiesANDROID)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetAndroidHardwareBufferPropertiesANDROID)          != typeid(&ValidationObject::PostCallRecordGetAndroidHardwareBufferPropertiesANDROID)) << 3))];

#endif
#ifdef VK_USE_PLATFORM_ANDROID_KHR
        disp_pre_val_GetMemoryAndroidHardwareBufferANDROID = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetMemoryAndroidHardwareBufferANDROID)        != typeid(&ValidationObject::PreCallValidateGetMemoryAndroidHardwareBufferANDROID)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetMemoryAndroidHardwareBufferANDROID) != typeid(&ValidationObject::PreCallValidateGetMemoryAndroidHardwareBufferANDROID)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetMemoryAndroidHardwareBufferANDROID)     != typeid(&ValidationObject::PreCallValidateGetMemoryAndroidHardwareBufferANDROID)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetMemoryAndroidHardwareBufferANDROID)          != typeid(&ValidationObject::PreCallValidateGetMemoryAndroidHardwareBufferANDROID)) << 3))];

        disp_pre_rec_GetMemoryAndroidHardwareBufferANDROID = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetMemoryAndroidHardwareBufferANDROID)        != typeid(&ValidationObject::PreCallRecordGetMemoryAndroidHardwareBufferANDROID)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetMemoryAndroidHardwareBufferANDROID) != typeid(&ValidationObject::PreCallRecordGetMemoryAndroidHardwareBufferANDROID)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetMemoryAndroidHardwareBufferANDROID)     != typeid(&ValidationObject::PreCallRecordGetMemoryAndroidHardwareBufferANDROID)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetMemoryAndroidHardwareBufferANDROID)          != typeid(&ValidationObject::PreCallRecordGetMemoryAndroidHardwareBufferANDROID)) << 3))];

        disp_post_rec_GetMemoryAndroidHardwareBufferANDROID = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetMemoryAndroidHardwareBufferANDROID)        != typeid(&ValidationObject::PostCallRecordGetMemoryAndroidHardwareBufferANDROID)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetMemoryAndroidHardwareBufferANDROID) != typeid(&ValidationObject::PostCallRecordGetMemoryAndroidHardwareBufferANDROID)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetMemoryAndroidHardwareBufferANDROID)     != typeid(&ValidationObject::PostCallRecordGetMemoryAndroidHardwareBufferANDROID)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetMemoryAndroidHardwareBufferANDROID)          != typeid(&ValidationObject::PostCallRecordGetMemoryAndroidHardwareBufferANDROID)) << 3))];

#endif
        disp_pre_val_CmdSetSampleLocationsEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetSampleLocationsEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetSampleLocationsEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetSampleLocationsEXT) != typeid(&ValidationObject::PreCallValidateCmdSetSampleLocationsEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetSampleLocationsEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetSampleLocationsEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetSampleLocationsEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetSampleLocationsEXT)) << 3))];

        disp_pre_rec_CmdSetSampleLocationsEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetSampleLocationsEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetSampleLocationsEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetSampleLocationsEXT) != typeid(&ValidationObject::PreCallRecordCmdSetSampleLocationsEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetSampleLocationsEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetSampleLocationsEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetSampleLocationsEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetSampleLocationsEXT)) << 3))];

        disp_post_rec_CmdSetSampleLocationsEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetSampleLocationsEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetSampleLocationsEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetSampleLocationsEXT) != typeid(&ValidationObject::PostCallRecordCmdSetSampleLocationsEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetSampleLocationsEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetSampleLocationsEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetSampleLocationsEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetSampleLocationsEXT)) << 3))];

        disp_pre_val_GetImageDrmFormatModifierPropertiesEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetImageDrmFormatModifierPropertiesEXT)        != typeid(&ValidationObject::PreCallValidateGetImageDrmFormatModifierPropertiesEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetImageDrmFormatModifierPropertiesEXT) != typeid(&ValidationObject::PreCallValidateGetImageDrmFormatModifierPropertiesEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetImageDrmFormatModifierPropertiesEXT)     != typeid(&ValidationObject::PreCallValidateGetImageDrmFormatModifierPropertiesEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetImageDrmFormatModifierPropertiesEXT)          != typeid(&ValidationObject::PreCallValidateGetImageDrmFormatModifierPropertiesEXT)) << 3))];

        disp_pre_rec_GetImageDrmFormatModifierPropertiesEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetImageDrmFormatModifierPropertiesEXT)        != typeid(&ValidationObject::PreCallRecordGetImageDrmFormatModifierPropertiesEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetImageDrmFormatModifierPropertiesEXT) != typeid(&ValidationObject::PreCallRecordGetImageDrmFormatModifierPropertiesEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetImageDrmFormatModifierPropertiesEXT)     != typeid(&ValidationObject::PreCallRecordGetImageDrmFormatModifierPropertiesEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetImageDrmFormatModifierPropertiesEXT)          != typeid(&ValidationObject::PreCallRecordGetImageDrmFormatModifierPropertiesEXT)) << 3))];

        disp_post_rec_GetImageDrmFormatModifierPropertiesEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetImageDrmFormatModifierPropertiesEXT)        != typeid(&ValidationObject::PostCallRecordGetImageDrmFormatModifierPropertiesEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetImageDrmFormatModifierPropertiesEXT) != typeid(&ValidationObject::PostCallRecordGetImageDrmFormatModifierPropertiesEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetImageDrmFormatModifierPropertiesEXT)     != typeid(&ValidationObject::PostCallRecordGetImageDrmFormatModifierPropertiesEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetImageDrmFormatModifierPropertiesEXT)          != typeid(&ValidationObject::PostCallRecordGetImageDrmFormatModifierPropertiesEXT)) << 3))];

        disp_pre_val_CmdBindShadingRateImageNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBindShadingRateImageNV)        != typeid(&ValidationObject::PreCallValidateCmdBindShadingRateImageNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBindShadingRateImageNV) != typeid(&ValidationObject::PreCallValidateCmdBindShadingRateImageNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBindShadingRateImageNV)     != typeid(&ValidationObject::PreCallValidateCmdBindShadingRateImageNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBindShadingRateImageNV)          != typeid(&ValidationObject::PreCallValidateCmdBindShadingRateImageNV)) << 3))];

        disp_pre_rec_CmdBindShadingRateImageNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBindShadingRateImageNV)        != typeid(&ValidationObject::PreCallRecordCmdBindShadingRateImageNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBindShadingRateImageNV) != typeid(&ValidationObject::PreCallRecordCmdBindShadingRateImageNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBindShadingRateImageNV)     != typeid(&ValidationObject::PreCallRecordCmdBindShadingRateImageNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBindShadingRateImageNV)          != typeid(&ValidationObject::PreCallRecordCmdBindShadingRateImageNV)) << 3))];

        disp_post_rec_CmdBindShadingRateImageNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBindShadingRateImageNV)        != typeid(&ValidationObject::PostCallRecordCmdBindShadingRateImageNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBindShadingRateImageNV) != typeid(&ValidationObject::PostCallRecordCmdBindShadingRateImageNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBindShadingRateImageNV)     != typeid(&ValidationObject::PostCallRecordCmdBindShadingRateImageNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBindShadingRateImageNV)          != typeid(&ValidationObject::PostCallRecordCmdBindShadingRateImageNV)) << 3))];

        disp_pre_val_CmdSetViewportShadingRatePaletteNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetViewportShadingRatePaletteNV)        != typeid(&ValidationObject::PreCallValidateCmdSetViewportShadingRatePaletteNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetViewportShadingRatePaletteNV) != typeid(&ValidationObject::PreCallValidateCmdSetViewportShadingRatePaletteNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetViewportShadingRatePaletteNV)     != typeid(&ValidationObject::PreCallValidateCmdSetViewportShadingRatePaletteNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetViewportShadingRatePaletteNV)          != typeid(&ValidationObject::PreCallValidateCmdSetViewportShadingRatePaletteNV)) << 3))];

        disp_pre_rec_CmdSetViewportShadingRatePaletteNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetViewportShadingRatePaletteNV)        != typeid(&ValidationObject::PreCallRecordCmdSetViewportShadingRatePaletteNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetViewportShadingRatePaletteNV) != typeid(&ValidationObject::PreCallRecordCmdSetViewportShadingRatePaletteNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetViewportShadingRatePaletteNV)     != typeid(&ValidationObject::PreCallRecordCmdSetViewportShadingRatePaletteNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetViewportShadingRatePaletteNV)          != typeid(&ValidationObject::PreCallRecordCmdSetViewportShadingRatePaletteNV)) << 3))];

        disp_post_rec_CmdSetViewportShadingRatePaletteNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetViewportShadingRatePaletteNV)        != typeid(&ValidationObject::PostCallRecordCmdSetViewportShadingRatePaletteNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetViewportShadingRatePaletteNV) != typeid(&ValidationObject::PostCallRecordCmdSetViewportShadingRatePaletteNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetViewportShadingRatePaletteNV)     != typeid(&ValidationObject::PostCallRecordCmdSetViewportShadingRatePaletteNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetViewportShadingRatePaletteNV)          != typeid(&ValidationObject::PostCallRecordCmdSetViewportShadingRatePaletteNV)) << 3))];

        disp_pre_val_CmdSetCoarseSampleOrderNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetCoarseSampleOrderNV)        != typeid(&ValidationObject::PreCallValidateCmdSetCoarseSampleOrderNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetCoarseSampleOrderNV) != typeid(&ValidationObject::PreCallValidateCmdSetCoarseSampleOrderNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetCoarseSampleOrderNV)     != typeid(&ValidationObject::PreCallValidateCmdSetCoarseSampleOrderNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetCoarseSampleOrderNV)          != typeid(&ValidationObject::PreCallValidateCmdSetCoarseSampleOrderNV)) << 3))];

        disp_pre_rec_CmdSetCoarseSampleOrderNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetCoarseSampleOrderNV)        != typeid(&ValidationObject::PreCallRecordCmdSetCoarseSampleOrderNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetCoarseSampleOrderNV) != typeid(&ValidationObject::PreCallRecordCmdSetCoarseSampleOrderNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetCoarseSampleOrderNV)     != typeid(&ValidationObject::PreCallRecordCmdSetCoarseSampleOrderNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetCoarseSampleOrderNV)          != typeid(&ValidationObject::PreCallRecordCmdSetCoarseSampleOrderNV)) << 3))];

        disp_post_rec_CmdSetCoarseSampleOrderNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetCoarseSampleOrderNV)        != typeid(&ValidationObject::PostCallRecordCmdSetCoarseSampleOrderNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetCoarseSampleOrderNV) != typeid(&ValidationObject::PostCallRecordCmdSetCoarseSampleOrderNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetCoarseSampleOrderNV)     != typeid(&ValidationObject::PostCallRecordCmdSetCoarseSampleOrderNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetCoarseSampleOrderNV)          != typeid(&ValidationObject::PostCallRecordCmdSetCoarseSampleOrderNV)) << 3))];

        disp_pre_val_CreateAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateAccelerationStructureNV)        != typeid(&ValidationObject::PreCallValidateCreateAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateAccelerationStructureNV) != typeid(&ValidationObject::PreCallValidateCreateAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateAccelerationStructureNV)     != typeid(&ValidationObject::PreCallValidateCreateAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateAccelerationStructureNV)          != typeid(&ValidationObject::PreCallValidateCreateAccelerationStructureNV)) << 3))];

        disp_pre_rec_CreateAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateAccelerationStructureNV)        != typeid(&ValidationObject::PreCallRecordCreateAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateAccelerationStructureNV) != typeid(&ValidationObject::PreCallRecordCreateAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateAccelerationStructureNV)     != typeid(&ValidationObject::PreCallRecordCreateAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateAccelerationStructureNV)          != typeid(&ValidationObject::PreCallRecordCreateAccelerationStructureNV)) << 3))];

        disp_post_rec_CreateAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateAccelerationStructureNV)        != typeid(&ValidationObject::PostCallRecordCreateAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateAccelerationStructureNV) != typeid(&ValidationObject::PostCallRecordCreateAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateAccelerationStructureNV)     != typeid(&ValidationObject::PostCallRecordCreateAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateAccelerationStructureNV)          != typeid(&ValidationObject::PostCallRecordCreateAccelerationStructureNV)) << 3))];

        disp_pre_val_DestroyAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyAccelerationStructureNV)        != typeid(&ValidationObject::PreCallValidateDestroyAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyAccelerationStructureNV) != typeid(&ValidationObject::PreCallValidateDestroyAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyAccelerationStructureNV)     != typeid(&ValidationObject::PreCallValidateDestroyAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyAccelerationStructureNV)          != typeid(&ValidationObject::PreCallValidateDestroyAccelerationStructureNV)) << 3))];

        disp_pre_rec_DestroyAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyAccelerationStructureNV)        != typeid(&ValidationObject::PreCallRecordDestroyAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyAccelerationStructureNV) != typeid(&ValidationObject::PreCallRecordDestroyAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyAccelerationStructureNV)     != typeid(&ValidationObject::PreCallRecordDestroyAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyAccelerationStructureNV)          != typeid(&ValidationObject::PreCallRecordDestroyAccelerationStructureNV)) << 3))];

        disp_post_rec_DestroyAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyAccelerationStructureNV)        != typeid(&ValidationObject::PostCallRecordDestroyAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyAccelerationStructureNV) != typeid(&ValidationObject::PostCallRecordDestroyAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyAccelerationStructureNV)     != typeid(&ValidationObject::PostCallRecordDestroyAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyAccelerationStructureNV)          != typeid(&ValidationObject::PostCallRecordDestroyAccelerationStructureNV)) << 3))];

        disp_pre_val_GetAccelerationStructureMemoryRequirementsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetAccelerationStructureMemoryRequirementsNV)        != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureMemoryRequirementsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetAccelerationStructureMemoryRequirementsNV) != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureMemoryRequirementsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetAccelerationStructureMemoryRequirementsNV)     != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureMemoryRequirementsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetAccelerationStructureMemoryRequirementsNV)          != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureMemoryRequirementsNV)) << 3))];

        disp_pre_rec_GetAccelerationStructureMemoryRequirementsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetAccelerationStructureMemoryRequirementsNV)        != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureMemoryRequirementsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetAccelerationStructureMemoryRequirementsNV) != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureMemoryRequirementsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetAccelerationStructureMemoryRequirementsNV)     != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureMemoryRequirementsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetAccelerationStructureMemoryRequirementsNV)          != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureMemoryRequirementsNV)) << 3))];

        disp_post_rec_GetAccelerationStructureMemoryRequirementsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetAccelerationStructureMemoryRequirementsNV)        != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureMemoryRequirementsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetAccelerationStructureMemoryRequirementsNV) != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureMemoryRequirementsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetAccelerationStructureMemoryRequirementsNV)     != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureMemoryRequirementsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetAccelerationStructureMemoryRequirementsNV)          != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureMemoryRequirementsNV)) << 3))];

        disp_pre_val_BindAccelerationStructureMemoryNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateBindAccelerationStructureMemoryNV)        != typeid(&ValidationObject::PreCallValidateBindAccelerationStructureMemoryNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateBindAccelerationStructureMemoryNV) != typeid(&ValidationObject::PreCallValidateBindAccelerationStructureMemoryNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateBindAccelerationStructureMemoryNV)     != typeid(&ValidationObject::PreCallValidateBindAccelerationStructureMemoryNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateBindAccelerationStructureMemoryNV)          != typeid(&ValidationObject::PreCallValidateBindAccelerationStructureMemoryNV)) << 3))];

        disp_pre_rec_BindAccelerationStructureMemoryNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordBindAccelerationStructureMemoryNV)        != typeid(&ValidationObject::PreCallRecordBindAccelerationStructureMemoryNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordBindAccelerationStructureMemoryNV) != typeid(&ValidationObject::PreCallRecordBindAccelerationStructureMemoryNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordBindAccelerationStructureMemoryNV)     != typeid(&ValidationObject::PreCallRecordBindAccelerationStructureMemoryNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordBindAccelerationStructureMemoryNV)          != typeid(&ValidationObject::PreCallRecordBindAccelerationStructureMemoryNV)) << 3))];

        disp_post_rec_BindAccelerationStructureMemoryNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordBindAccelerationStructureMemoryNV)        != typeid(&ValidationObject::PostCallRecordBindAccelerationStructureMemoryNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordBindAccelerationStructureMemoryNV) != typeid(&ValidationObject::PostCallRecordBindAccelerationStructureMemoryNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordBindAccelerationStructureMemoryNV)     != typeid(&ValidationObject::PostCallRecordBindAccelerationStructureMemoryNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordBindAccelerationStructureMemoryNV)          != typeid(&ValidationObject::PostCallRecordBindAccelerationStructureMemoryNV)) << 3))];

        disp_pre_val_CmdBuildAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBuildAccelerationStructureNV)        != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBuildAccelerationStructureNV) != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBuildAccelerationStructureNV)     != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBuildAccelerationStructureNV)          != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructureNV)) << 3))];

        disp_pre_rec_CmdBuildAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBuildAccelerationStructureNV)        != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBuildAccelerationStructureNV) != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBuildAccelerationStructureNV)     != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBuildAccelerationStructureNV)          != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructureNV)) << 3))];

        disp_post_rec_CmdBuildAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBuildAccelerationStructureNV)        != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBuildAccelerationStructureNV) != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBuildAccelerationStructureNV)     != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBuildAccelerationStructureNV)          != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructureNV)) << 3))];

        disp_pre_val_CmdCopyAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyAccelerationStructureNV)        != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyAccelerationStructureNV) != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyAccelerationStructureNV)     != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyAccelerationStructureNV)          != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureNV)) << 3))];

        disp_pre_rec_CmdCopyAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyAccelerationStructureNV)        != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyAccelerationStructureNV) != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyAccelerationStructureNV)     != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyAccelerationStructureNV)          != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureNV)) << 3))];

        disp_post_rec_CmdCopyAccelerationStructureNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyAccelerationStructureNV)        != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyAccelerationStructureNV) != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyAccelerationStructureNV)     != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyAccelerationStructureNV)          != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureNV)) << 3))];

        disp_pre_val_CmdTraceRaysNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdTraceRaysNV)        != typeid(&ValidationObject::PreCallValidateCmdTraceRaysNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdTraceRaysNV) != typeid(&ValidationObject::PreCallValidateCmdTraceRaysNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdTraceRaysNV)     != typeid(&ValidationObject::PreCallValidateCmdTraceRaysNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdTraceRaysNV)          != typeid(&ValidationObject::PreCallValidateCmdTraceRaysNV)) << 3))];

        disp_pre_rec_CmdTraceRaysNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdTraceRaysNV)        != typeid(&ValidationObject::PreCallRecordCmdTraceRaysNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdTraceRaysNV) != typeid(&ValidationObject::PreCallRecordCmdTraceRaysNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdTraceRaysNV)     != typeid(&ValidationObject::PreCallRecordCmdTraceRaysNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdTraceRaysNV)          != typeid(&ValidationObject::PreCallRecordCmdTraceRaysNV)) << 3))];

        disp_post_rec_CmdTraceRaysNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdTraceRaysNV)        != typeid(&ValidationObject::PostCallRecordCmdTraceRaysNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdTraceRaysNV) != typeid(&ValidationObject::PostCallRecordCmdTraceRaysNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdTraceRaysNV)     != typeid(&ValidationObject::PostCallRecordCmdTraceRaysNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdTraceRaysNV)          != typeid(&ValidationObject::PostCallRecordCmdTraceRaysNV)) << 3))];

        disp_pre_val_GetRayTracingShaderGroupHandlesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetRayTracingShaderGroupHandlesKHR)        != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupHandlesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetRayTracingShaderGroupHandlesKHR) != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupHandlesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetRayTracingShaderGroupHandlesKHR)     != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupHandlesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetRayTracingShaderGroupHandlesKHR)          != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupHandlesKHR)) << 3))];

        disp_pre_rec_GetRayTracingShaderGroupHandlesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetRayTracingShaderGroupHandlesKHR)        != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupHandlesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetRayTracingShaderGroupHandlesKHR) != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupHandlesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetRayTracingShaderGroupHandlesKHR)     != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupHandlesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetRayTracingShaderGroupHandlesKHR)          != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupHandlesKHR)) << 3))];

        disp_post_rec_GetRayTracingShaderGroupHandlesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetRayTracingShaderGroupHandlesKHR)        != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupHandlesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetRayTracingShaderGroupHandlesKHR) != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupHandlesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetRayTracingShaderGroupHandlesKHR)     != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupHandlesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetRayTracingShaderGroupHandlesKHR)          != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupHandlesKHR)) << 3))];

        disp_pre_val_GetRayTracingShaderGroupHandlesNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetRayTracingShaderGroupHandlesNV)        != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupHandlesNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetRayTracingShaderGroupHandlesNV) != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupHandlesNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetRayTracingShaderGroupHandlesNV)     != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupHandlesNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetRayTracingShaderGroupHandlesNV)          != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupHandlesNV)) << 3))];

        disp_pre_rec_GetRayTracingShaderGroupHandlesNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetRayTracingShaderGroupHandlesNV)        != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupHandlesNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetRayTracingShaderGroupHandlesNV) != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupHandlesNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetRayTracingShaderGroupHandlesNV)     != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupHandlesNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetRayTracingShaderGroupHandlesNV)          != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupHandlesNV)) << 3))];

        disp_post_rec_GetRayTracingShaderGroupHandlesNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetRayTracingShaderGroupHandlesNV)        != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupHandlesNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetRayTracingShaderGroupHandlesNV) != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupHandlesNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetRayTracingShaderGroupHandlesNV)     != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupHandlesNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetRayTracingShaderGroupHandlesNV)          != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupHandlesNV)) << 3))];

        disp_pre_val_GetAccelerationStructureHandleNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetAccelerationStructureHandleNV)        != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureHandleNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetAccelerationStructureHandleNV) != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureHandleNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetAccelerationStructureHandleNV)     != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureHandleNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetAccelerationStructureHandleNV)          != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureHandleNV)) << 3))];

        disp_pre_rec_GetAccelerationStructureHandleNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetAccelerationStructureHandleNV)        != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureHandleNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetAccelerationStructureHandleNV) != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureHandleNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetAccelerationStructureHandleNV)     != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureHandleNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetAccelerationStructureHandleNV)          != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureHandleNV)) << 3))];

        disp_post_rec_GetAccelerationStructureHandleNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetAccelerationStructureHandleNV)        != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureHandleNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetAccelerationStructureHandleNV) != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureHandleNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetAccelerationStructureHandleNV)     != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureHandleNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetAccelerationStructureHandleNV)          != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureHandleNV)) << 3))];

        disp_pre_val_CmdWriteAccelerationStructuresPropertiesNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdWriteAccelerationStructuresPropertiesNV)        != typeid(&ValidationObject::PreCallValidateCmdWriteAccelerationStructuresPropertiesNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdWriteAccelerationStructuresPropertiesNV) != typeid(&ValidationObject::PreCallValidateCmdWriteAccelerationStructuresPropertiesNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdWriteAccelerationStructuresPropertiesNV)     != typeid(&ValidationObject::PreCallValidateCmdWriteAccelerationStructuresPropertiesNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdWriteAccelerationStructuresPropertiesNV)          != typeid(&ValidationObject::PreCallValidateCmdWriteAccelerationStructuresPropertiesNV)) << 3))];

        disp_pre_rec_CmdWriteAccelerationStructuresPropertiesNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdWriteAccelerationStructuresPropertiesNV)        != typeid(&ValidationObject::PreCallRecordCmdWriteAccelerationStructuresPropertiesNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdWriteAccelerationStructuresPropertiesNV) != typeid(&ValidationObject::PreCallRecordCmdWriteAccelerationStructuresPropertiesNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdWriteAccelerationStructuresPropertiesNV)     != typeid(&ValidationObject::PreCallRecordCmdWriteAccelerationStructuresPropertiesNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdWriteAccelerationStructuresPropertiesNV)          != typeid(&ValidationObject::PreCallRecordCmdWriteAccelerationStructuresPropertiesNV)) << 3))];

        disp_post_rec_CmdWriteAccelerationStructuresPropertiesNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdWriteAccelerationStructuresPropertiesNV)        != typeid(&ValidationObject::PostCallRecordCmdWriteAccelerationStructuresPropertiesNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdWriteAccelerationStructuresPropertiesNV) != typeid(&ValidationObject::PostCallRecordCmdWriteAccelerationStructuresPropertiesNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdWriteAccelerationStructuresPropertiesNV)     != typeid(&ValidationObject::PostCallRecordCmdWriteAccelerationStructuresPropertiesNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdWriteAccelerationStructuresPropertiesNV)          != typeid(&ValidationObject::PostCallRecordCmdWriteAccelerationStructuresPropertiesNV)) << 3))];

        disp_pre_val_CompileDeferredNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCompileDeferredNV)        != typeid(&ValidationObject::PreCallValidateCompileDeferredNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCompileDeferredNV) != typeid(&ValidationObject::PreCallValidateCompileDeferredNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCompileDeferredNV)     != typeid(&ValidationObject::PreCallValidateCompileDeferredNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCompileDeferredNV)          != typeid(&ValidationObject::PreCallValidateCompileDeferredNV)) << 3))];

        disp_pre_rec_CompileDeferredNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCompileDeferredNV)        != typeid(&ValidationObject::PreCallRecordCompileDeferredNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCompileDeferredNV) != typeid(&ValidationObject::PreCallRecordCompileDeferredNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCompileDeferredNV)     != typeid(&ValidationObject::PreCallRecordCompileDeferredNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCompileDeferredNV)          != typeid(&ValidationObject::PreCallRecordCompileDeferredNV)) << 3))];

        disp_post_rec_CompileDeferredNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCompileDeferredNV)        != typeid(&ValidationObject::PostCallRecordCompileDeferredNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCompileDeferredNV) != typeid(&ValidationObject::PostCallRecordCompileDeferredNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCompileDeferredNV)     != typeid(&ValidationObject::PostCallRecordCompileDeferredNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCompileDeferredNV)          != typeid(&ValidationObject::PostCallRecordCompileDeferredNV)) << 3))];

        disp_pre_val_GetMemoryHostPointerPropertiesEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetMemoryHostPointerPropertiesEXT)        != typeid(&ValidationObject::PreCallValidateGetMemoryHostPointerPropertiesEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetMemoryHostPointerPropertiesEXT) != typeid(&ValidationObject::PreCallValidateGetMemoryHostPointerPropertiesEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetMemoryHostPointerPropertiesEXT)     != typeid(&ValidationObject::PreCallValidateGetMemoryHostPointerPropertiesEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetMemoryHostPointerPropertiesEXT)          != typeid(&ValidationObject::PreCallValidateGetMemoryHostPointerPropertiesEXT)) << 3))];

        disp_pre_rec_GetMemoryHostPointerPropertiesEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetMemoryHostPointerPropertiesEXT)        != typeid(&ValidationObject::PreCallRecordGetMemoryHostPointerPropertiesEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetMemoryHostPointerPropertiesEXT) != typeid(&ValidationObject::PreCallRecordGetMemoryHostPointerPropertiesEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetMemoryHostPointerPropertiesEXT)     != typeid(&ValidationObject::PreCallRecordGetMemoryHostPointerPropertiesEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetMemoryHostPointerPropertiesEXT)          != typeid(&ValidationObject::PreCallRecordGetMemoryHostPointerPropertiesEXT)) << 3))];

        disp_post_rec_GetMemoryHostPointerPropertiesEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetMemoryHostPointerPropertiesEXT)        != typeid(&ValidationObject::PostCallRecordGetMemoryHostPointerPropertiesEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetMemoryHostPointerPropertiesEXT) != typeid(&ValidationObject::PostCallRecordGetMemoryHostPointerPropertiesEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetMemoryHostPointerPropertiesEXT)     != typeid(&ValidationObject::PostCallRecordGetMemoryHostPointerPropertiesEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetMemoryHostPointerPropertiesEXT)          != typeid(&ValidationObject::PostCallRecordGetMemoryHostPointerPropertiesEXT)) << 3))];

        disp_pre_val_CmdWriteBufferMarkerAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdWriteBufferMarkerAMD)        != typeid(&ValidationObject::PreCallValidateCmdWriteBufferMarkerAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdWriteBufferMarkerAMD) != typeid(&ValidationObject::PreCallValidateCmdWriteBufferMarkerAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdWriteBufferMarkerAMD)     != typeid(&ValidationObject::PreCallValidateCmdWriteBufferMarkerAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdWriteBufferMarkerAMD)          != typeid(&ValidationObject::PreCallValidateCmdWriteBufferMarkerAMD)) << 3))];

        disp_pre_rec_CmdWriteBufferMarkerAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdWriteBufferMarkerAMD)        != typeid(&ValidationObject::PreCallRecordCmdWriteBufferMarkerAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdWriteBufferMarkerAMD) != typeid(&ValidationObject::PreCallRecordCmdWriteBufferMarkerAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdWriteBufferMarkerAMD)     != typeid(&ValidationObject::PreCallRecordCmdWriteBufferMarkerAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdWriteBufferMarkerAMD)          != typeid(&ValidationObject::PreCallRecordCmdWriteBufferMarkerAMD)) << 3))];

        disp_post_rec_CmdWriteBufferMarkerAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdWriteBufferMarkerAMD)        != typeid(&ValidationObject::PostCallRecordCmdWriteBufferMarkerAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdWriteBufferMarkerAMD) != typeid(&ValidationObject::PostCallRecordCmdWriteBufferMarkerAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdWriteBufferMarkerAMD)     != typeid(&ValidationObject::PostCallRecordCmdWriteBufferMarkerAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdWriteBufferMarkerAMD)          != typeid(&ValidationObject::PostCallRecordCmdWriteBufferMarkerAMD)) << 3))];

        disp_pre_val_GetCalibratedTimestampsEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetCalibratedTimestampsEXT)        != typeid(&ValidationObject::PreCallValidateGetCalibratedTimestampsEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetCalibratedTimestampsEXT) != typeid(&ValidationObject::PreCallValidateGetCalibratedTimestampsEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetCalibratedTimestampsEXT)     != typeid(&ValidationObject::PreCallValidateGetCalibratedTimestampsEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetCalibratedTimestampsEXT)          != typeid(&ValidationObject::PreCallValidateGetCalibratedTimestampsEXT)) << 3))];

        disp_pre_rec_GetCalibratedTimestampsEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetCalibratedTimestampsEXT)        != typeid(&ValidationObject::PreCallRecordGetCalibratedTimestampsEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetCalibratedTimestampsEXT) != typeid(&ValidationObject::PreCallRecordGetCalibratedTimestampsEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetCalibratedTimestampsEXT)     != typeid(&ValidationObject::PreCallRecordGetCalibratedTimestampsEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetCalibratedTimestampsEXT)          != typeid(&ValidationObject::PreCallRecordGetCalibratedTimestampsEXT)) << 3))];

        disp_post_rec_GetCalibratedTimestampsEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetCalibratedTimestampsEXT)        != typeid(&ValidationObject::PostCallRecordGetCalibratedTimestampsEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetCalibratedTimestampsEXT) != typeid(&ValidationObject::PostCallRecordGetCalibratedTimestampsEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetCalibratedTimestampsEXT)     != typeid(&ValidationObject::PostCallRecordGetCalibratedTimestampsEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetCalibratedTimestampsEXT)          != typeid(&ValidationObject::PostCallRecordGetCalibratedTimestampsEXT)) << 3))];

        disp_pre_val_CmdDrawMeshTasksNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawMeshTasksNV)        != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawMeshTasksNV) != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawMeshTasksNV)     != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawMeshTasksNV)          != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksNV)) << 3))];

        disp_pre_rec_CmdDrawMeshTasksNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawMeshTasksNV)        != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawMeshTasksNV) != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawMeshTasksNV)     != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawMeshTasksNV)          != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksNV)) << 3))];

        disp_post_rec_CmdDrawMeshTasksNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawMeshTasksNV)        != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawMeshTasksNV) != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawMeshTasksNV)     != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawMeshTasksNV)          != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksNV)) << 3))];

        disp_pre_val_CmdDrawMeshTasksIndirectNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawMeshTasksIndirectNV)        != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksIndirectNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawMeshTasksIndirectNV) != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksIndirectNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawMeshTasksIndirectNV)     != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksIndirectNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawMeshTasksIndirectNV)          != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksIndirectNV)) << 3))];

        disp_pre_rec_CmdDrawMeshTasksIndirectNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawMeshTasksIndirectNV)        != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksIndirectNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawMeshTasksIndirectNV) != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksIndirectNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawMeshTasksIndirectNV)     != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksIndirectNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawMeshTasksIndirectNV)          != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksIndirectNV)) << 3))];

        disp_post_rec_CmdDrawMeshTasksIndirectNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawMeshTasksIndirectNV)        != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksIndirectNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawMeshTasksIndirectNV) != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksIndirectNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawMeshTasksIndirectNV)     != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksIndirectNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawMeshTasksIndirectNV)          != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksIndirectNV)) << 3))];

        disp_pre_val_CmdDrawMeshTasksIndirectCountNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdDrawMeshTasksIndirectCountNV)        != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksIndirectCountNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdDrawMeshTasksIndirectCountNV) != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksIndirectCountNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdDrawMeshTasksIndirectCountNV)     != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksIndirectCountNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdDrawMeshTasksIndirectCountNV)          != typeid(&ValidationObject::PreCallValidateCmdDrawMeshTasksIndirectCountNV)) << 3))];

        disp_pre_rec_CmdDrawMeshTasksIndirectCountNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdDrawMeshTasksIndirectCountNV)        != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksIndirectCountNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdDrawMeshTasksIndirectCountNV) != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksIndirectCountNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdDrawMeshTasksIndirectCountNV)     != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksIndirectCountNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdDrawMeshTasksIndirectCountNV)          != typeid(&ValidationObject::PreCallRecordCmdDrawMeshTasksIndirectCountNV)) << 3))];

        disp_post_rec_CmdDrawMeshTasksIndirectCountNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdDrawMeshTasksIndirectCountNV)        != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksIndirectCountNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdDrawMeshTasksIndirectCountNV) != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksIndirectCountNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdDrawMeshTasksIndirectCountNV)     != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksIndirectCountNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdDrawMeshTasksIndirectCountNV)          != typeid(&ValidationObject::PostCallRecordCmdDrawMeshTasksIndirectCountNV)) << 3))];

        disp_pre_val_CmdSetExclusiveScissorNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetExclusiveScissorNV)        != typeid(&ValidationObject::PreCallValidateCmdSetExclusiveScissorNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetExclusiveScissorNV) != typeid(&ValidationObject::PreCallValidateCmdSetExclusiveScissorNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetExclusiveScissorNV)     != typeid(&ValidationObject::PreCallValidateCmdSetExclusiveScissorNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetExclusiveScissorNV)          != typeid(&ValidationObject::PreCallValidateCmdSetExclusiveScissorNV)) << 3))];

        disp_pre_rec_CmdSetExclusiveScissorNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetExclusiveScissorNV)        != typeid(&ValidationObject::PreCallRecordCmdSetExclusiveScissorNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetExclusiveScissorNV) != typeid(&ValidationObject::PreCallRecordCmdSetExclusiveScissorNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetExclusiveScissorNV)     != typeid(&ValidationObject::PreCallRecordCmdSetExclusiveScissorNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetExclusiveScissorNV)          != typeid(&ValidationObject::PreCallRecordCmdSetExclusiveScissorNV)) << 3))];

        disp_post_rec_CmdSetExclusiveScissorNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetExclusiveScissorNV)        != typeid(&ValidationObject::PostCallRecordCmdSetExclusiveScissorNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetExclusiveScissorNV) != typeid(&ValidationObject::PostCallRecordCmdSetExclusiveScissorNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetExclusiveScissorNV)     != typeid(&ValidationObject::PostCallRecordCmdSetExclusiveScissorNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetExclusiveScissorNV)          != typeid(&ValidationObject::PostCallRecordCmdSetExclusiveScissorNV)) << 3))];

        disp_pre_val_CmdSetCheckpointNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetCheckpointNV)        != typeid(&ValidationObject::PreCallValidateCmdSetCheckpointNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetCheckpointNV) != typeid(&ValidationObject::PreCallValidateCmdSetCheckpointNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetCheckpointNV)     != typeid(&ValidationObject::PreCallValidateCmdSetCheckpointNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetCheckpointNV)          != typeid(&ValidationObject::PreCallValidateCmdSetCheckpointNV)) << 3))];

        disp_pre_rec_CmdSetCheckpointNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetCheckpointNV)        != typeid(&ValidationObject::PreCallRecordCmdSetCheckpointNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetCheckpointNV) != typeid(&ValidationObject::PreCallRecordCmdSetCheckpointNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetCheckpointNV)     != typeid(&ValidationObject::PreCallRecordCmdSetCheckpointNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetCheckpointNV)          != typeid(&ValidationObject::PreCallRecordCmdSetCheckpointNV)) << 3))];

        disp_post_rec_CmdSetCheckpointNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetCheckpointNV)        != typeid(&ValidationObject::PostCallRecordCmdSetCheckpointNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetCheckpointNV) != typeid(&ValidationObject::PostCallRecordCmdSetCheckpointNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetCheckpointNV)     != typeid(&ValidationObject::PostCallRecordCmdSetCheckpointNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetCheckpointNV)          != typeid(&ValidationObject::PostCallRecordCmdSetCheckpointNV)) << 3))];

        disp_pre_val_GetQueueCheckpointDataNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetQueueCheckpointDataNV)        != typeid(&ValidationObject::PreCallValidateGetQueueCheckpointDataNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetQueueCheckpointDataNV) != typeid(&ValidationObject::PreCallValidateGetQueueCheckpointDataNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetQueueCheckpointDataNV)     != typeid(&ValidationObject::PreCallValidateGetQueueCheckpointDataNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetQueueCheckpointDataNV)          != typeid(&ValidationObject::PreCallValidateGetQueueCheckpointDataNV)) << 3))];

        disp_pre_rec_GetQueueCheckpointDataNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetQueueCheckpointDataNV)        != typeid(&ValidationObject::PreCallRecordGetQueueCheckpointDataNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetQueueCheckpointDataNV) != typeid(&ValidationObject::PreCallRecordGetQueueCheckpointDataNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetQueueCheckpointDataNV)     != typeid(&ValidationObject::PreCallRecordGetQueueCheckpointDataNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetQueueCheckpointDataNV)          != typeid(&ValidationObject::PreCallRecordGetQueueCheckpointDataNV)) << 3))];

        disp_post_rec_GetQueueCheckpointDataNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetQueueCheckpointDataNV)        != typeid(&ValidationObject::PostCallRecordGetQueueCheckpointDataNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetQueueCheckpointDataNV) != typeid(&ValidationObject::PostCallRecordGetQueueCheckpointDataNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetQueueCheckpointDataNV)     != typeid(&ValidationObject::PostCallRecordGetQueueCheckpointDataNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetQueueCheckpointDataNV)          != typeid(&ValidationObject::PostCallRecordGetQueueCheckpointDataNV)) << 3))];

        disp_pre_val_InitializePerformanceApiINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateInitializePerformanceApiINTEL)        != typeid(&ValidationObject::PreCallValidateInitializePerformanceApiINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateInitializePerformanceApiINTEL) != typeid(&ValidationObject::PreCallValidateInitializePerformanceApiINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateInitializePerformanceApiINTEL)     != typeid(&ValidationObject::PreCallValidateInitializePerformanceApiINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateInitializePerformanceApiINTEL)          != typeid(&ValidationObject::PreCallValidateInitializePerformanceApiINTEL)) << 3))];

        disp_pre_rec_InitializePerformanceApiINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordInitializePerformanceApiINTEL)        != typeid(&ValidationObject::PreCallRecordInitializePerformanceApiINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordInitializePerformanceApiINTEL) != typeid(&ValidationObject::PreCallRecordInitializePerformanceApiINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordInitializePerformanceApiINTEL)     != typeid(&ValidationObject::PreCallRecordInitializePerformanceApiINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordInitializePerformanceApiINTEL)          != typeid(&ValidationObject::PreCallRecordInitializePerformanceApiINTEL)) << 3))];

        disp_post_rec_InitializePerformanceApiINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordInitializePerformanceApiINTEL)        != typeid(&ValidationObject::PostCallRecordInitializePerformanceApiINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordInitializePerformanceApiINTEL) != typeid(&ValidationObject::PostCallRecordInitializePerformanceApiINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordInitializePerformanceApiINTEL)     != typeid(&ValidationObject::PostCallRecordInitializePerformanceApiINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordInitializePerformanceApiINTEL)          != typeid(&ValidationObject::PostCallRecordInitializePerformanceApiINTEL)) << 3))];

        disp_pre_val_UninitializePerformanceApiINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateUninitializePerformanceApiINTEL)        != typeid(&ValidationObject::PreCallValidateUninitializePerformanceApiINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateUninitializePerformanceApiINTEL) != typeid(&ValidationObject::PreCallValidateUninitializePerformanceApiINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateUninitializePerformanceApiINTEL)     != typeid(&ValidationObject::PreCallValidateUninitializePerformanceApiINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateUninitializePerformanceApiINTEL)          != typeid(&ValidationObject::PreCallValidateUninitializePerformanceApiINTEL)) << 3))];

        disp_pre_rec_UninitializePerformanceApiINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordUninitializePerformanceApiINTEL)        != typeid(&ValidationObject::PreCallRecordUninitializePerformanceApiINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordUninitializePerformanceApiINTEL) != typeid(&ValidationObject::PreCallRecordUninitializePerformanceApiINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordUninitializePerformanceApiINTEL)     != typeid(&ValidationObject::PreCallRecordUninitializePerformanceApiINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordUninitializePerformanceApiINTEL)          != typeid(&ValidationObject::PreCallRecordUninitializePerformanceApiINTEL)) << 3))];

        disp_post_rec_UninitializePerformanceApiINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordUninitializePerformanceApiINTEL)        != typeid(&ValidationObject::PostCallRecordUninitializePerformanceApiINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordUninitializePerformanceApiINTEL) != typeid(&ValidationObject::PostCallRecordUninitializePerformanceApiINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordUninitializePerformanceApiINTEL)     != typeid(&ValidationObject::PostCallRecordUninitializePerformanceApiINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordUninitializePerformanceApiINTEL)          != typeid(&ValidationObject::PostCallRecordUninitializePerformanceApiINTEL)) << 3))];

        disp_pre_val_CmdSetPerformanceMarkerINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetPerformanceMarkerINTEL)        != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceMarkerINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetPerformanceMarkerINTEL) != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceMarkerINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetPerformanceMarkerINTEL)     != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceMarkerINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetPerformanceMarkerINTEL)          != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceMarkerINTEL)) << 3))];

        disp_pre_rec_CmdSetPerformanceMarkerINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetPerformanceMarkerINTEL)        != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceMarkerINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetPerformanceMarkerINTEL) != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceMarkerINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetPerformanceMarkerINTEL)     != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceMarkerINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetPerformanceMarkerINTEL)          != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceMarkerINTEL)) << 3))];

        disp_post_rec_CmdSetPerformanceMarkerINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetPerformanceMarkerINTEL)        != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceMarkerINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetPerformanceMarkerINTEL) != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceMarkerINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetPerformanceMarkerINTEL)     != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceMarkerINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetPerformanceMarkerINTEL)          != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceMarkerINTEL)) << 3))];

        disp_pre_val_CmdSetPerformanceStreamMarkerINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetPerformanceStreamMarkerINTEL)        != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceStreamMarkerINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetPerformanceStreamMarkerINTEL) != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceStreamMarkerINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetPerformanceStreamMarkerINTEL)     != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceStreamMarkerINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetPerformanceStreamMarkerINTEL)          != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceStreamMarkerINTEL)) << 3))];

        disp_pre_rec_CmdSetPerformanceStreamMarkerINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetPerformanceStreamMarkerINTEL)        != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceStreamMarkerINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetPerformanceStreamMarkerINTEL) != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceStreamMarkerINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetPerformanceStreamMarkerINTEL)     != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceStreamMarkerINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetPerformanceStreamMarkerINTEL)          != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceStreamMarkerINTEL)) << 3))];

        disp_post_rec_CmdSetPerformanceStreamMarkerINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetPerformanceStreamMarkerINTEL)        != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceStreamMarkerINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetPerformanceStreamMarkerINTEL) != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceStreamMarkerINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetPerformanceStreamMarkerINTEL)     != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceStreamMarkerINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetPerformanceStreamMarkerINTEL)          != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceStreamMarkerINTEL)) << 3))];

        disp_pre_val_CmdSetPerformanceOverrideINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetPerformanceOverrideINTEL)        != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceOverrideINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetPerformanceOverrideINTEL) != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceOverrideINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetPerformanceOverrideINTEL)     != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceOverrideINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetPerformanceOverrideINTEL)          != typeid(&ValidationObject::PreCallValidateCmdSetPerformanceOverrideINTEL)) << 3))];

        disp_pre_rec_CmdSetPerformanceOverrideINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetPerformanceOverrideINTEL)        != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceOverrideINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetPerformanceOverrideINTEL) != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceOverrideINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetPerformanceOverrideINTEL)     != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceOverrideINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetPerformanceOverrideINTEL)          != typeid(&ValidationObject::PreCallRecordCmdSetPerformanceOverrideINTEL)) << 3))];

        disp_post_rec_CmdSetPerformanceOverrideINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetPerformanceOverrideINTEL)        != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceOverrideINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetPerformanceOverrideINTEL) != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceOverrideINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetPerformanceOverrideINTEL)     != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceOverrideINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetPerformanceOverrideINTEL)          != typeid(&ValidationObject::PostCallRecordCmdSetPerformanceOverrideINTEL)) << 3))];

        disp_pre_val_AcquirePerformanceConfigurationINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateAcquirePerformanceConfigurationINTEL)        != typeid(&ValidationObject::PreCallValidateAcquirePerformanceConfigurationINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateAcquirePerformanceConfigurationINTEL) != typeid(&ValidationObject::PreCallValidateAcquirePerformanceConfigurationINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateAcquirePerformanceConfigurationINTEL)     != typeid(&ValidationObject::PreCallValidateAcquirePerformanceConfigurationINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateAcquirePerformanceConfigurationINTEL)          != typeid(&ValidationObject::PreCallValidateAcquirePerformanceConfigurationINTEL)) << 3))];

        disp_pre_rec_AcquirePerformanceConfigurationINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordAcquirePerformanceConfigurationINTEL)        != typeid(&ValidationObject::PreCallRecordAcquirePerformanceConfigurationINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordAcquirePerformanceConfigurationINTEL) != typeid(&ValidationObject::PreCallRecordAcquirePerformanceConfigurationINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordAcquirePerformanceConfigurationINTEL)     != typeid(&ValidationObject::PreCallRecordAcquirePerformanceConfigurationINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordAcquirePerformanceConfigurationINTEL)          != typeid(&ValidationObject::PreCallRecordAcquirePerformanceConfigurationINTEL)) << 3))];

        disp_post_rec_AcquirePerformanceConfigurationINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordAcquirePerformanceConfigurationINTEL)        != typeid(&ValidationObject::PostCallRecordAcquirePerformanceConfigurationINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordAcquirePerformanceConfigurationINTEL) != typeid(&ValidationObject::PostCallRecordAcquirePerformanceConfigurationINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordAcquirePerformanceConfigurationINTEL)     != typeid(&ValidationObject::PostCallRecordAcquirePerformanceConfigurationINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordAcquirePerformanceConfigurationINTEL)          != typeid(&ValidationObject::PostCallRecordAcquirePerformanceConfigurationINTEL)) << 3))];

        disp_pre_val_ReleasePerformanceConfigurationINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateReleasePerformanceConfigurationINTEL)        != typeid(&ValidationObject::PreCallValidateReleasePerformanceConfigurationINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateReleasePerformanceConfigurationINTEL) != typeid(&ValidationObject::PreCallValidateReleasePerformanceConfigurationINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateReleasePerformanceConfigurationINTEL)     != typeid(&ValidationObject::PreCallValidateReleasePerformanceConfigurationINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateReleasePerformanceConfigurationINTEL)          != typeid(&ValidationObject::PreCallValidateReleasePerformanceConfigurationINTEL)) << 3))];

        disp_pre_rec_ReleasePerformanceConfigurationINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordReleasePerformanceConfigurationINTEL)        != typeid(&ValidationObject::PreCallRecordReleasePerformanceConfigurationINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordReleasePerformanceConfigurationINTEL) != typeid(&ValidationObject::PreCallRecordReleasePerformanceConfigurationINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordReleasePerformanceConfigurationINTEL)     != typeid(&ValidationObject::PreCallRecordReleasePerformanceConfigurationINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordReleasePerformanceConfigurationINTEL)          != typeid(&ValidationObject::PreCallRecordReleasePerformanceConfigurationINTEL)) << 3))];

        disp_post_rec_ReleasePerformanceConfigurationINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordReleasePerformanceConfigurationINTEL)        != typeid(&ValidationObject::PostCallRecordReleasePerformanceConfigurationINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordReleasePerformanceConfigurationINTEL) != typeid(&ValidationObject::PostCallRecordReleasePerformanceConfigurationINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordReleasePerformanceConfigurationINTEL)     != typeid(&ValidationObject::PostCallRecordReleasePerformanceConfigurationINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordReleasePerformanceConfigurationINTEL)          != typeid(&ValidationObject::PostCallRecordReleasePerformanceConfigurationINTEL)) << 3))];

        disp_pre_val_QueueSetPerformanceConfigurationINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateQueueSetPerformanceConfigurationINTEL)        != typeid(&ValidationObject::PreCallValidateQueueSetPerformanceConfigurationINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateQueueSetPerformanceConfigurationINTEL) != typeid(&ValidationObject::PreCallValidateQueueSetPerformanceConfigurationINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateQueueSetPerformanceConfigurationINTEL)     != typeid(&ValidationObject::PreCallValidateQueueSetPerformanceConfigurationINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateQueueSetPerformanceConfigurationINTEL)          != typeid(&ValidationObject::PreCallValidateQueueSetPerformanceConfigurationINTEL)) << 3))];

        disp_pre_rec_QueueSetPerformanceConfigurationINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordQueueSetPerformanceConfigurationINTEL)        != typeid(&ValidationObject::PreCallRecordQueueSetPerformanceConfigurationINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordQueueSetPerformanceConfigurationINTEL) != typeid(&ValidationObject::PreCallRecordQueueSetPerformanceConfigurationINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordQueueSetPerformanceConfigurationINTEL)     != typeid(&ValidationObject::PreCallRecordQueueSetPerformanceConfigurationINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordQueueSetPerformanceConfigurationINTEL)          != typeid(&ValidationObject::PreCallRecordQueueSetPerformanceConfigurationINTEL)) << 3))];

        disp_post_rec_QueueSetPerformanceConfigurationINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordQueueSetPerformanceConfigurationINTEL)        != typeid(&ValidationObject::PostCallRecordQueueSetPerformanceConfigurationINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordQueueSetPerformanceConfigurationINTEL) != typeid(&ValidationObject::PostCallRecordQueueSetPerformanceConfigurationINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordQueueSetPerformanceConfigurationINTEL)     != typeid(&ValidationObject::PostCallRecordQueueSetPerformanceConfigurationINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordQueueSetPerformanceConfigurationINTEL)          != typeid(&ValidationObject::PostCallRecordQueueSetPerformanceConfigurationINTEL)) << 3))];

        disp_pre_val_GetPerformanceParameterINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetPerformanceParameterINTEL)        != typeid(&ValidationObject::PreCallValidateGetPerformanceParameterINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetPerformanceParameterINTEL) != typeid(&ValidationObject::PreCallValidateGetPerformanceParameterINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetPerformanceParameterINTEL)     != typeid(&ValidationObject::PreCallValidateGetPerformanceParameterINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetPerformanceParameterINTEL)          != typeid(&ValidationObject::PreCallValidateGetPerformanceParameterINTEL)) << 3))];

        disp_pre_rec_GetPerformanceParameterINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetPerformanceParameterINTEL)        != typeid(&ValidationObject::PreCallRecordGetPerformanceParameterINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetPerformanceParameterINTEL) != typeid(&ValidationObject::PreCallRecordGetPerformanceParameterINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetPerformanceParameterINTEL)     != typeid(&ValidationObject::PreCallRecordGetPerformanceParameterINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetPerformanceParameterINTEL)          != typeid(&ValidationObject::PreCallRecordGetPerformanceParameterINTEL)) << 3))];

        disp_post_rec_GetPerformanceParameterINTEL = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetPerformanceParameterINTEL)        != typeid(&ValidationObject::PostCallRecordGetPerformanceParameterINTEL)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetPerformanceParameterINTEL) != typeid(&ValidationObject::PostCallRecordGetPerformanceParameterINTEL)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetPerformanceParameterINTEL)     != typeid(&ValidationObject::PostCallRecordGetPerformanceParameterINTEL)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetPerformanceParameterINTEL)          != typeid(&ValidationObject::PostCallRecordGetPerformanceParameterINTEL)) << 3))];

        disp_pre_val_SetLocalDimmingAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateSetLocalDimmingAMD)        != typeid(&ValidationObject::PreCallValidateSetLocalDimmingAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateSetLocalDimmingAMD) != typeid(&ValidationObject::PreCallValidateSetLocalDimmingAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateSetLocalDimmingAMD)     != typeid(&ValidationObject::PreCallValidateSetLocalDimmingAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateSetLocalDimmingAMD)          != typeid(&ValidationObject::PreCallValidateSetLocalDimmingAMD)) << 3))];

        disp_pre_rec_SetLocalDimmingAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordSetLocalDimmingAMD)        != typeid(&ValidationObject::PreCallRecordSetLocalDimmingAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordSetLocalDimmingAMD) != typeid(&ValidationObject::PreCallRecordSetLocalDimmingAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordSetLocalDimmingAMD)     != typeid(&ValidationObject::PreCallRecordSetLocalDimmingAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordSetLocalDimmingAMD)          != typeid(&ValidationObject::PreCallRecordSetLocalDimmingAMD)) << 3))];

        disp_post_rec_SetLocalDimmingAMD = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordSetLocalDimmingAMD)        != typeid(&ValidationObject::PostCallRecordSetLocalDimmingAMD)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordSetLocalDimmingAMD) != typeid(&ValidationObject::PostCallRecordSetLocalDimmingAMD)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordSetLocalDimmingAMD)     != typeid(&ValidationObject::PostCallRecordSetLocalDimmingAMD)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordSetLocalDimmingAMD)          != typeid(&ValidationObject::PostCallRecordSetLocalDimmingAMD)) << 3))];

#ifdef VK_USE_PLATFORM_FUCHSIA
#endif
#ifdef VK_USE_PLATFORM_METAL_EXT
#endif
        disp_pre_val_GetBufferDeviceAddressEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetBufferDeviceAddressEXT)        != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddressEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetBufferDeviceAddressEXT) != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddressEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetBufferDeviceAddressEXT)     != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddressEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetBufferDeviceAddressEXT)          != typeid(&ValidationObject::PreCallValidateGetBufferDeviceAddressEXT)) << 3))];

        disp_pre_rec_GetBufferDeviceAddressEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetBufferDeviceAddressEXT)        != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddressEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetBufferDeviceAddressEXT) != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddressEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetBufferDeviceAddressEXT)     != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddressEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetBufferDeviceAddressEXT)          != typeid(&ValidationObject::PreCallRecordGetBufferDeviceAddressEXT)) << 3))];

        disp_post_rec_GetBufferDeviceAddressEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetBufferDeviceAddressEXT)        != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddressEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetBufferDeviceAddressEXT) != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddressEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetBufferDeviceAddressEXT)     != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddressEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetBufferDeviceAddressEXT)          != typeid(&ValidationObject::PostCallRecordGetBufferDeviceAddressEXT)) << 3))];

#ifdef VK_USE_PLATFORM_WIN32_KHR
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
        disp_pre_val_AcquireFullScreenExclusiveModeEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateAcquireFullScreenExclusiveModeEXT)        != typeid(&ValidationObject::PreCallValidateAcquireFullScreenExclusiveModeEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateAcquireFullScreenExclusiveModeEXT) != typeid(&ValidationObject::PreCallValidateAcquireFullScreenExclusiveModeEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateAcquireFullScreenExclusiveModeEXT)     != typeid(&ValidationObject::PreCallValidateAcquireFullScreenExclusiveModeEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateAcquireFullScreenExclusiveModeEXT)          != typeid(&ValidationObject::PreCallValidateAcquireFullScreenExclusiveModeEXT)) << 3))];

        disp_pre_rec_AcquireFullScreenExclusiveModeEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordAcquireFullScreenExclusiveModeEXT)        != typeid(&ValidationObject::PreCallRecordAcquireFullScreenExclusiveModeEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordAcquireFullScreenExclusiveModeEXT) != typeid(&ValidationObject::PreCallRecordAcquireFullScreenExclusiveModeEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordAcquireFullScreenExclusiveModeEXT)     != typeid(&ValidationObject::PreCallRecordAcquireFullScreenExclusiveModeEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordAcquireFullScreenExclusiveModeEXT)          != typeid(&ValidationObject::PreCallRecordAcquireFullScreenExclusiveModeEXT)) << 3))];

        disp_post_rec_AcquireFullScreenExclusiveModeEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordAcquireFullScreenExclusiveModeEXT)        != typeid(&ValidationObject::PostCallRecordAcquireFullScreenExclusiveModeEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordAcquireFullScreenExclusiveModeEXT) != typeid(&ValidationObject::PostCallRecordAcquireFullScreenExclusiveModeEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordAcquireFullScreenExclusiveModeEXT)     != typeid(&ValidationObject::PostCallRecordAcquireFullScreenExclusiveModeEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordAcquireFullScreenExclusiveModeEXT)          != typeid(&ValidationObject::PostCallRecordAcquireFullScreenExclusiveModeEXT)) << 3))];

#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
        disp_pre_val_ReleaseFullScreenExclusiveModeEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateReleaseFullScreenExclusiveModeEXT)        != typeid(&ValidationObject::PreCallValidateReleaseFullScreenExclusiveModeEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateReleaseFullScreenExclusiveModeEXT) != typeid(&ValidationObject::PreCallValidateReleaseFullScreenExclusiveModeEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateReleaseFullScreenExclusiveModeEXT)     != typeid(&ValidationObject::PreCallValidateReleaseFullScreenExclusiveModeEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateReleaseFullScreenExclusiveModeEXT)          != typeid(&ValidationObject::PreCallValidateReleaseFullScreenExclusiveModeEXT)) << 3))];

        disp_pre_rec_ReleaseFullScreenExclusiveModeEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordReleaseFullScreenExclusiveModeEXT)        != typeid(&ValidationObject::PreCallRecordReleaseFullScreenExclusiveModeEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordReleaseFullScreenExclusiveModeEXT) != typeid(&ValidationObject::PreCallRecordReleaseFullScreenExclusiveModeEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordReleaseFullScreenExclusiveModeEXT)     != typeid(&ValidationObject::PreCallRecordReleaseFullScreenExclusiveModeEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordReleaseFullScreenExclusiveModeEXT)          != typeid(&ValidationObject::PreCallRecordReleaseFullScreenExclusiveModeEXT)) << 3))];

        disp_post_rec_ReleaseFullScreenExclusiveModeEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordReleaseFullScreenExclusiveModeEXT)        != typeid(&ValidationObject::PostCallRecordReleaseFullScreenExclusiveModeEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordReleaseFullScreenExclusiveModeEXT) != typeid(&ValidationObject::PostCallRecordReleaseFullScreenExclusiveModeEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordReleaseFullScreenExclusiveModeEXT)     != typeid(&ValidationObject::PostCallRecordReleaseFullScreenExclusiveModeEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordReleaseFullScreenExclusiveModeEXT)          != typeid(&ValidationObject::PostCallRecordReleaseFullScreenExclusiveModeEXT)) << 3))];

#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
        disp_pre_val_GetDeviceGroupSurfacePresentModes2EXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceGroupSurfacePresentModes2EXT)        != typeid(&ValidationObject::PreCallValidateGetDeviceGroupSurfacePresentModes2EXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceGroupSurfacePresentModes2EXT) != typeid(&ValidationObject::PreCallValidateGetDeviceGroupSurfacePresentModes2EXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceGroupSurfacePresentModes2EXT)     != typeid(&ValidationObject::PreCallValidateGetDeviceGroupSurfacePresentModes2EXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceGroupSurfacePresentModes2EXT)          != typeid(&ValidationObject::PreCallValidateGetDeviceGroupSurfacePresentModes2EXT)) << 3))];

        disp_pre_rec_GetDeviceGroupSurfacePresentModes2EXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceGroupSurfacePresentModes2EXT)        != typeid(&ValidationObject::PreCallRecordGetDeviceGroupSurfacePresentModes2EXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceGroupSurfacePresentModes2EXT) != typeid(&ValidationObject::PreCallRecordGetDeviceGroupSurfacePresentModes2EXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceGroupSurfacePresentModes2EXT)     != typeid(&ValidationObject::PreCallRecordGetDeviceGroupSurfacePresentModes2EXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceGroupSurfacePresentModes2EXT)          != typeid(&ValidationObject::PreCallRecordGetDeviceGroupSurfacePresentModes2EXT)) << 3))];

        disp_post_rec_GetDeviceGroupSurfacePresentModes2EXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceGroupSurfacePresentModes2EXT)        != typeid(&ValidationObject::PostCallRecordGetDeviceGroupSurfacePresentModes2EXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceGroupSurfacePresentModes2EXT) != typeid(&ValidationObject::PostCallRecordGetDeviceGroupSurfacePresentModes2EXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceGroupSurfacePresentModes2EXT)     != typeid(&ValidationObject::PostCallRecordGetDeviceGroupSurfacePresentModes2EXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceGroupSurfacePresentModes2EXT)          != typeid(&ValidationObject::PostCallRecordGetDeviceGroupSurfacePresentModes2EXT)) << 3))];

#endif
        disp_pre_val_CmdSetLineStippleEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetLineStippleEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetLineStippleEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetLineStippleEXT) != typeid(&ValidationObject::PreCallValidateCmdSetLineStippleEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetLineStippleEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetLineStippleEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetLineStippleEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetLineStippleEXT)) << 3))];

        disp_pre_rec_CmdSetLineStippleEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetLineStippleEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetLineStippleEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetLineStippleEXT) != typeid(&ValidationObject::PreCallRecordCmdSetLineStippleEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetLineStippleEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetLineStippleEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetLineStippleEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetLineStippleEXT)) << 3))];

        disp_post_rec_CmdSetLineStippleEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetLineStippleEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetLineStippleEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetLineStippleEXT) != typeid(&ValidationObject::PostCallRecordCmdSetLineStippleEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetLineStippleEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetLineStippleEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetLineStippleEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetLineStippleEXT)) << 3))];

        disp_pre_val_ResetQueryPoolEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateResetQueryPoolEXT)        != typeid(&ValidationObject::PreCallValidateResetQueryPoolEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateResetQueryPoolEXT) != typeid(&ValidationObject::PreCallValidateResetQueryPoolEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateResetQueryPoolEXT)     != typeid(&ValidationObject::PreCallValidateResetQueryPoolEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateResetQueryPoolEXT)          != typeid(&ValidationObject::PreCallValidateResetQueryPoolEXT)) << 3))];

        disp_pre_rec_ResetQueryPoolEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordResetQueryPoolEXT)        != typeid(&ValidationObject::PreCallRecordResetQueryPoolEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordResetQueryPoolEXT) != typeid(&ValidationObject::PreCallRecordResetQueryPoolEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordResetQueryPoolEXT)     != typeid(&ValidationObject::PreCallRecordResetQueryPoolEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordResetQueryPoolEXT)          != typeid(&ValidationObject::PreCallRecordResetQueryPoolEXT)) << 3))];

        disp_post_rec_ResetQueryPoolEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordResetQueryPoolEXT)        != typeid(&ValidationObject::PostCallRecordResetQueryPoolEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordResetQueryPoolEXT) != typeid(&ValidationObject::PostCallRecordResetQueryPoolEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordResetQueryPoolEXT)     != typeid(&ValidationObject::PostCallRecordResetQueryPoolEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordResetQueryPoolEXT)          != typeid(&ValidationObject::PostCallRecordResetQueryPoolEXT)) << 3))];

        disp_pre_val_CmdSetCullModeEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetCullModeEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetCullModeEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetCullModeEXT) != typeid(&ValidationObject::PreCallValidateCmdSetCullModeEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetCullModeEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetCullModeEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetCullModeEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetCullModeEXT)) << 3))];

        disp_pre_rec_CmdSetCullModeEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetCullModeEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetCullModeEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetCullModeEXT) != typeid(&ValidationObject::PreCallRecordCmdSetCullModeEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetCullModeEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetCullModeEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetCullModeEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetCullModeEXT)) << 3))];

        disp_post_rec_CmdSetCullModeEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetCullModeEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetCullModeEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetCullModeEXT) != typeid(&ValidationObject::PostCallRecordCmdSetCullModeEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetCullModeEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetCullModeEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetCullModeEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetCullModeEXT)) << 3))];

        disp_pre_val_CmdSetFrontFaceEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetFrontFaceEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetFrontFaceEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetFrontFaceEXT) != typeid(&ValidationObject::PreCallValidateCmdSetFrontFaceEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetFrontFaceEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetFrontFaceEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetFrontFaceEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetFrontFaceEXT)) << 3))];

        disp_pre_rec_CmdSetFrontFaceEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetFrontFaceEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetFrontFaceEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetFrontFaceEXT) != typeid(&ValidationObject::PreCallRecordCmdSetFrontFaceEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetFrontFaceEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetFrontFaceEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetFrontFaceEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetFrontFaceEXT)) << 3))];

        disp_post_rec_CmdSetFrontFaceEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetFrontFaceEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetFrontFaceEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetFrontFaceEXT) != typeid(&ValidationObject::PostCallRecordCmdSetFrontFaceEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetFrontFaceEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetFrontFaceEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetFrontFaceEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetFrontFaceEXT)) << 3))];

        disp_pre_val_CmdSetPrimitiveTopologyEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetPrimitiveTopologyEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetPrimitiveTopologyEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetPrimitiveTopologyEXT) != typeid(&ValidationObject::PreCallValidateCmdSetPrimitiveTopologyEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetPrimitiveTopologyEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetPrimitiveTopologyEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetPrimitiveTopologyEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetPrimitiveTopologyEXT)) << 3))];

        disp_pre_rec_CmdSetPrimitiveTopologyEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetPrimitiveTopologyEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetPrimitiveTopologyEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetPrimitiveTopologyEXT) != typeid(&ValidationObject::PreCallRecordCmdSetPrimitiveTopologyEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetPrimitiveTopologyEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetPrimitiveTopologyEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetPrimitiveTopologyEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetPrimitiveTopologyEXT)) << 3))];

        disp_post_rec_CmdSetPrimitiveTopologyEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetPrimitiveTopologyEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetPrimitiveTopologyEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetPrimitiveTopologyEXT) != typeid(&ValidationObject::PostCallRecordCmdSetPrimitiveTopologyEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetPrimitiveTopologyEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetPrimitiveTopologyEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetPrimitiveTopologyEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetPrimitiveTopologyEXT)) << 3))];

        disp_pre_val_CmdSetViewportWithCountEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetViewportWithCountEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetViewportWithCountEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetViewportWithCountEXT) != typeid(&ValidationObject::PreCallValidateCmdSetViewportWithCountEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetViewportWithCountEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetViewportWithCountEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetViewportWithCountEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetViewportWithCountEXT)) << 3))];

        disp_pre_rec_CmdSetViewportWithCountEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetViewportWithCountEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetViewportWithCountEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetViewportWithCountEXT) != typeid(&ValidationObject::PreCallRecordCmdSetViewportWithCountEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetViewportWithCountEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetViewportWithCountEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetViewportWithCountEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetViewportWithCountEXT)) << 3))];

        disp_post_rec_CmdSetViewportWithCountEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetViewportWithCountEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetViewportWithCountEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetViewportWithCountEXT) != typeid(&ValidationObject::PostCallRecordCmdSetViewportWithCountEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetViewportWithCountEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetViewportWithCountEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetViewportWithCountEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetViewportWithCountEXT)) << 3))];

        disp_pre_val_CmdSetScissorWithCountEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetScissorWithCountEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetScissorWithCountEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetScissorWithCountEXT) != typeid(&ValidationObject::PreCallValidateCmdSetScissorWithCountEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetScissorWithCountEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetScissorWithCountEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetScissorWithCountEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetScissorWithCountEXT)) << 3))];

        disp_pre_rec_CmdSetScissorWithCountEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetScissorWithCountEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetScissorWithCountEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetScissorWithCountEXT) != typeid(&ValidationObject::PreCallRecordCmdSetScissorWithCountEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetScissorWithCountEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetScissorWithCountEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetScissorWithCountEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetScissorWithCountEXT)) << 3))];

        disp_post_rec_CmdSetScissorWithCountEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetScissorWithCountEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetScissorWithCountEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetScissorWithCountEXT) != typeid(&ValidationObject::PostCallRecordCmdSetScissorWithCountEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetScissorWithCountEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetScissorWithCountEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetScissorWithCountEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetScissorWithCountEXT)) << 3))];

        disp_pre_val_CmdBindVertexBuffers2EXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBindVertexBuffers2EXT)        != typeid(&ValidationObject::PreCallValidateCmdBindVertexBuffers2EXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBindVertexBuffers2EXT) != typeid(&ValidationObject::PreCallValidateCmdBindVertexBuffers2EXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBindVertexBuffers2EXT)     != typeid(&ValidationObject::PreCallValidateCmdBindVertexBuffers2EXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBindVertexBuffers2EXT)          != typeid(&ValidationObject::PreCallValidateCmdBindVertexBuffers2EXT)) << 3))];

        disp_pre_rec_CmdBindVertexBuffers2EXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBindVertexBuffers2EXT)        != typeid(&ValidationObject::PreCallRecordCmdBindVertexBuffers2EXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBindVertexBuffers2EXT) != typeid(&ValidationObject::PreCallRecordCmdBindVertexBuffers2EXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBindVertexBuffers2EXT)     != typeid(&ValidationObject::PreCallRecordCmdBindVertexBuffers2EXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBindVertexBuffers2EXT)          != typeid(&ValidationObject::PreCallRecordCmdBindVertexBuffers2EXT)) << 3))];

        disp_post_rec_CmdBindVertexBuffers2EXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBindVertexBuffers2EXT)        != typeid(&ValidationObject::PostCallRecordCmdBindVertexBuffers2EXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBindVertexBuffers2EXT) != typeid(&ValidationObject::PostCallRecordCmdBindVertexBuffers2EXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBindVertexBuffers2EXT)     != typeid(&ValidationObject::PostCallRecordCmdBindVertexBuffers2EXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBindVertexBuffers2EXT)          != typeid(&ValidationObject::PostCallRecordCmdBindVertexBuffers2EXT)) << 3))];

        disp_pre_val_CmdSetDepthTestEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetDepthTestEnableEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetDepthTestEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetDepthTestEnableEXT) != typeid(&ValidationObject::PreCallValidateCmdSetDepthTestEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetDepthTestEnableEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetDepthTestEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetDepthTestEnableEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetDepthTestEnableEXT)) << 3))];

        disp_pre_rec_CmdSetDepthTestEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetDepthTestEnableEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetDepthTestEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetDepthTestEnableEXT) != typeid(&ValidationObject::PreCallRecordCmdSetDepthTestEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetDepthTestEnableEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetDepthTestEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetDepthTestEnableEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetDepthTestEnableEXT)) << 3))];

        disp_post_rec_CmdSetDepthTestEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetDepthTestEnableEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetDepthTestEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetDepthTestEnableEXT) != typeid(&ValidationObject::PostCallRecordCmdSetDepthTestEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetDepthTestEnableEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetDepthTestEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetDepthTestEnableEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetDepthTestEnableEXT)) << 3))];

        disp_pre_val_CmdSetDepthWriteEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetDepthWriteEnableEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetDepthWriteEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetDepthWriteEnableEXT) != typeid(&ValidationObject::PreCallValidateCmdSetDepthWriteEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetDepthWriteEnableEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetDepthWriteEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetDepthWriteEnableEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetDepthWriteEnableEXT)) << 3))];

        disp_pre_rec_CmdSetDepthWriteEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetDepthWriteEnableEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetDepthWriteEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetDepthWriteEnableEXT) != typeid(&ValidationObject::PreCallRecordCmdSetDepthWriteEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetDepthWriteEnableEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetDepthWriteEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetDepthWriteEnableEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetDepthWriteEnableEXT)) << 3))];

        disp_post_rec_CmdSetDepthWriteEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetDepthWriteEnableEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetDepthWriteEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetDepthWriteEnableEXT) != typeid(&ValidationObject::PostCallRecordCmdSetDepthWriteEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetDepthWriteEnableEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetDepthWriteEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetDepthWriteEnableEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetDepthWriteEnableEXT)) << 3))];

        disp_pre_val_CmdSetDepthCompareOpEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetDepthCompareOpEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetDepthCompareOpEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetDepthCompareOpEXT) != typeid(&ValidationObject::PreCallValidateCmdSetDepthCompareOpEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetDepthCompareOpEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetDepthCompareOpEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetDepthCompareOpEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetDepthCompareOpEXT)) << 3))];

        disp_pre_rec_CmdSetDepthCompareOpEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetDepthCompareOpEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetDepthCompareOpEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetDepthCompareOpEXT) != typeid(&ValidationObject::PreCallRecordCmdSetDepthCompareOpEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetDepthCompareOpEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetDepthCompareOpEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetDepthCompareOpEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetDepthCompareOpEXT)) << 3))];

        disp_post_rec_CmdSetDepthCompareOpEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetDepthCompareOpEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetDepthCompareOpEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetDepthCompareOpEXT) != typeid(&ValidationObject::PostCallRecordCmdSetDepthCompareOpEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetDepthCompareOpEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetDepthCompareOpEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetDepthCompareOpEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetDepthCompareOpEXT)) << 3))];

        disp_pre_val_CmdSetDepthBoundsTestEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetDepthBoundsTestEnableEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetDepthBoundsTestEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetDepthBoundsTestEnableEXT) != typeid(&ValidationObject::PreCallValidateCmdSetDepthBoundsTestEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetDepthBoundsTestEnableEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetDepthBoundsTestEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetDepthBoundsTestEnableEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetDepthBoundsTestEnableEXT)) << 3))];

        disp_pre_rec_CmdSetDepthBoundsTestEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetDepthBoundsTestEnableEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetDepthBoundsTestEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetDepthBoundsTestEnableEXT) != typeid(&ValidationObject::PreCallRecordCmdSetDepthBoundsTestEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetDepthBoundsTestEnableEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetDepthBoundsTestEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetDepthBoundsTestEnableEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetDepthBoundsTestEnableEXT)) << 3))];

        disp_post_rec_CmdSetDepthBoundsTestEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetDepthBoundsTestEnableEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetDepthBoundsTestEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetDepthBoundsTestEnableEXT) != typeid(&ValidationObject::PostCallRecordCmdSetDepthBoundsTestEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetDepthBoundsTestEnableEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetDepthBoundsTestEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetDepthBoundsTestEnableEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetDepthBoundsTestEnableEXT)) << 3))];

        disp_pre_val_CmdSetStencilTestEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetStencilTestEnableEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetStencilTestEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetStencilTestEnableEXT) != typeid(&ValidationObject::PreCallValidateCmdSetStencilTestEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetStencilTestEnableEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetStencilTestEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetStencilTestEnableEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetStencilTestEnableEXT)) << 3))];

        disp_pre_rec_CmdSetStencilTestEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetStencilTestEnableEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetStencilTestEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetStencilTestEnableEXT) != typeid(&ValidationObject::PreCallRecordCmdSetStencilTestEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetStencilTestEnableEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetStencilTestEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetStencilTestEnableEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetStencilTestEnableEXT)) << 3))];

        disp_post_rec_CmdSetStencilTestEnableEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetStencilTestEnableEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetStencilTestEnableEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetStencilTestEnableEXT) != typeid(&ValidationObject::PostCallRecordCmdSetStencilTestEnableEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetStencilTestEnableEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetStencilTestEnableEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetStencilTestEnableEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetStencilTestEnableEXT)) << 3))];

        disp_pre_val_CmdSetStencilOpEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetStencilOpEXT)        != typeid(&ValidationObject::PreCallValidateCmdSetStencilOpEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetStencilOpEXT) != typeid(&ValidationObject::PreCallValidateCmdSetStencilOpEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetStencilOpEXT)     != typeid(&ValidationObject::PreCallValidateCmdSetStencilOpEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetStencilOpEXT)          != typeid(&ValidationObject::PreCallValidateCmdSetStencilOpEXT)) << 3))];

        disp_pre_rec_CmdSetStencilOpEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetStencilOpEXT)        != typeid(&ValidationObject::PreCallRecordCmdSetStencilOpEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetStencilOpEXT) != typeid(&ValidationObject::PreCallRecordCmdSetStencilOpEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetStencilOpEXT)     != typeid(&ValidationObject::PreCallRecordCmdSetStencilOpEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetStencilOpEXT)          != typeid(&ValidationObject::PreCallRecordCmdSetStencilOpEXT)) << 3))];

        disp_post_rec_CmdSetStencilOpEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetStencilOpEXT)        != typeid(&ValidationObject::PostCallRecordCmdSetStencilOpEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetStencilOpEXT) != typeid(&ValidationObject::PostCallRecordCmdSetStencilOpEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetStencilOpEXT)     != typeid(&ValidationObject::PostCallRecordCmdSetStencilOpEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetStencilOpEXT)          != typeid(&ValidationObject::PostCallRecordCmdSetStencilOpEXT)) << 3))];

        disp_pre_val_GetGeneratedCommandsMemoryRequirementsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetGeneratedCommandsMemoryRequirementsNV)        != typeid(&ValidationObject::PreCallValidateGetGeneratedCommandsMemoryRequirementsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetGeneratedCommandsMemoryRequirementsNV) != typeid(&ValidationObject::PreCallValidateGetGeneratedCommandsMemoryRequirementsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetGeneratedCommandsMemoryRequirementsNV)     != typeid(&ValidationObject::PreCallValidateGetGeneratedCommandsMemoryRequirementsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetGeneratedCommandsMemoryRequirementsNV)          != typeid(&ValidationObject::PreCallValidateGetGeneratedCommandsMemoryRequirementsNV)) << 3))];

        disp_pre_rec_GetGeneratedCommandsMemoryRequirementsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetGeneratedCommandsMemoryRequirementsNV)        != typeid(&ValidationObject::PreCallRecordGetGeneratedCommandsMemoryRequirementsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetGeneratedCommandsMemoryRequirementsNV) != typeid(&ValidationObject::PreCallRecordGetGeneratedCommandsMemoryRequirementsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetGeneratedCommandsMemoryRequirementsNV)     != typeid(&ValidationObject::PreCallRecordGetGeneratedCommandsMemoryRequirementsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetGeneratedCommandsMemoryRequirementsNV)          != typeid(&ValidationObject::PreCallRecordGetGeneratedCommandsMemoryRequirementsNV)) << 3))];

        disp_post_rec_GetGeneratedCommandsMemoryRequirementsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetGeneratedCommandsMemoryRequirementsNV)        != typeid(&ValidationObject::PostCallRecordGetGeneratedCommandsMemoryRequirementsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetGeneratedCommandsMemoryRequirementsNV) != typeid(&ValidationObject::PostCallRecordGetGeneratedCommandsMemoryRequirementsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetGeneratedCommandsMemoryRequirementsNV)     != typeid(&ValidationObject::PostCallRecordGetGeneratedCommandsMemoryRequirementsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetGeneratedCommandsMemoryRequirementsNV)          != typeid(&ValidationObject::PostCallRecordGetGeneratedCommandsMemoryRequirementsNV)) << 3))];

        disp_pre_val_CmdPreprocessGeneratedCommandsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdPreprocessGeneratedCommandsNV)        != typeid(&ValidationObject::PreCallValidateCmdPreprocessGeneratedCommandsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdPreprocessGeneratedCommandsNV) != typeid(&ValidationObject::PreCallValidateCmdPreprocessGeneratedCommandsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdPreprocessGeneratedCommandsNV)     != typeid(&ValidationObject::PreCallValidateCmdPreprocessGeneratedCommandsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdPreprocessGeneratedCommandsNV)          != typeid(&ValidationObject::PreCallValidateCmdPreprocessGeneratedCommandsNV)) << 3))];

        disp_pre_rec_CmdPreprocessGeneratedCommandsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdPreprocessGeneratedCommandsNV)        != typeid(&ValidationObject::PreCallRecordCmdPreprocessGeneratedCommandsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdPreprocessGeneratedCommandsNV) != typeid(&ValidationObject::PreCallRecordCmdPreprocessGeneratedCommandsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdPreprocessGeneratedCommandsNV)     != typeid(&ValidationObject::PreCallRecordCmdPreprocessGeneratedCommandsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdPreprocessGeneratedCommandsNV)          != typeid(&ValidationObject::PreCallRecordCmdPreprocessGeneratedCommandsNV)) << 3))];

        disp_post_rec_CmdPreprocessGeneratedCommandsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdPreprocessGeneratedCommandsNV)        != typeid(&ValidationObject::PostCallRecordCmdPreprocessGeneratedCommandsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdPreprocessGeneratedCommandsNV) != typeid(&ValidationObject::PostCallRecordCmdPreprocessGeneratedCommandsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdPreprocessGeneratedCommandsNV)     != typeid(&ValidationObject::PostCallRecordCmdPreprocessGeneratedCommandsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdPreprocessGeneratedCommandsNV)          != typeid(&ValidationObject::PostCallRecordCmdPreprocessGeneratedCommandsNV)) << 3))];

        disp_pre_val_CmdExecuteGeneratedCommandsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdExecuteGeneratedCommandsNV)        != typeid(&ValidationObject::PreCallValidateCmdExecuteGeneratedCommandsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdExecuteGeneratedCommandsNV) != typeid(&ValidationObject::PreCallValidateCmdExecuteGeneratedCommandsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdExecuteGeneratedCommandsNV)     != typeid(&ValidationObject::PreCallValidateCmdExecuteGeneratedCommandsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdExecuteGeneratedCommandsNV)          != typeid(&ValidationObject::PreCallValidateCmdExecuteGeneratedCommandsNV)) << 3))];

        disp_pre_rec_CmdExecuteGeneratedCommandsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdExecuteGeneratedCommandsNV)        != typeid(&ValidationObject::PreCallRecordCmdExecuteGeneratedCommandsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdExecuteGeneratedCommandsNV) != typeid(&ValidationObject::PreCallRecordCmdExecuteGeneratedCommandsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdExecuteGeneratedCommandsNV)     != typeid(&ValidationObject::PreCallRecordCmdExecuteGeneratedCommandsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdExecuteGeneratedCommandsNV)          != typeid(&ValidationObject::PreCallRecordCmdExecuteGeneratedCommandsNV)) << 3))];

        disp_post_rec_CmdExecuteGeneratedCommandsNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdExecuteGeneratedCommandsNV)        != typeid(&ValidationObject::PostCallRecordCmdExecuteGeneratedCommandsNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdExecuteGeneratedCommandsNV) != typeid(&ValidationObject::PostCallRecordCmdExecuteGeneratedCommandsNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdExecuteGeneratedCommandsNV)     != typeid(&ValidationObject::PostCallRecordCmdExecuteGeneratedCommandsNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdExecuteGeneratedCommandsNV)          != typeid(&ValidationObject::PostCallRecordCmdExecuteGeneratedCommandsNV)) << 3))];

        disp_pre_val_CmdBindPipelineShaderGroupNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBindPipelineShaderGroupNV)        != typeid(&ValidationObject::PreCallValidateCmdBindPipelineShaderGroupNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBindPipelineShaderGroupNV) != typeid(&ValidationObject::PreCallValidateCmdBindPipelineShaderGroupNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBindPipelineShaderGroupNV)     != typeid(&ValidationObject::PreCallValidateCmdBindPipelineShaderGroupNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBindPipelineShaderGroupNV)          != typeid(&ValidationObject::PreCallValidateCmdBindPipelineShaderGroupNV)) << 3))];

        disp_pre_rec_CmdBindPipelineShaderGroupNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBindPipelineShaderGroupNV)        != typeid(&ValidationObject::PreCallRecordCmdBindPipelineShaderGroupNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBindPipelineShaderGroupNV) != typeid(&ValidationObject::PreCallRecordCmdBindPipelineShaderGroupNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBindPipelineShaderGroupNV)     != typeid(&ValidationObject::PreCallRecordCmdBindPipelineShaderGroupNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBindPipelineShaderGroupNV)          != typeid(&ValidationObject::PreCallRecordCmdBindPipelineShaderGroupNV)) << 3))];

        disp_post_rec_CmdBindPipelineShaderGroupNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBindPipelineShaderGroupNV)        != typeid(&ValidationObject::PostCallRecordCmdBindPipelineShaderGroupNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBindPipelineShaderGroupNV) != typeid(&ValidationObject::PostCallRecordCmdBindPipelineShaderGroupNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBindPipelineShaderGroupNV)     != typeid(&ValidationObject::PostCallRecordCmdBindPipelineShaderGroupNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBindPipelineShaderGroupNV)          != typeid(&ValidationObject::PostCallRecordCmdBindPipelineShaderGroupNV)) << 3))];

        disp_pre_val_CreateIndirectCommandsLayoutNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateIndirectCommandsLayoutNV)        != typeid(&ValidationObject::PreCallValidateCreateIndirectCommandsLayoutNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateIndirectCommandsLayoutNV) != typeid(&ValidationObject::PreCallValidateCreateIndirectCommandsLayoutNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateIndirectCommandsLayoutNV)     != typeid(&ValidationObject::PreCallValidateCreateIndirectCommandsLayoutNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateIndirectCommandsLayoutNV)          != typeid(&ValidationObject::PreCallValidateCreateIndirectCommandsLayoutNV)) << 3))];

        disp_pre_rec_CreateIndirectCommandsLayoutNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateIndirectCommandsLayoutNV)        != typeid(&ValidationObject::PreCallRecordCreateIndirectCommandsLayoutNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateIndirectCommandsLayoutNV) != typeid(&ValidationObject::PreCallRecordCreateIndirectCommandsLayoutNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateIndirectCommandsLayoutNV)     != typeid(&ValidationObject::PreCallRecordCreateIndirectCommandsLayoutNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateIndirectCommandsLayoutNV)          != typeid(&ValidationObject::PreCallRecordCreateIndirectCommandsLayoutNV)) << 3))];

        disp_post_rec_CreateIndirectCommandsLayoutNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateIndirectCommandsLayoutNV)        != typeid(&ValidationObject::PostCallRecordCreateIndirectCommandsLayoutNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateIndirectCommandsLayoutNV) != typeid(&ValidationObject::PostCallRecordCreateIndirectCommandsLayoutNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateIndirectCommandsLayoutNV)     != typeid(&ValidationObject::PostCallRecordCreateIndirectCommandsLayoutNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateIndirectCommandsLayoutNV)          != typeid(&ValidationObject::PostCallRecordCreateIndirectCommandsLayoutNV)) << 3))];

        disp_pre_val_DestroyIndirectCommandsLayoutNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyIndirectCommandsLayoutNV)        != typeid(&ValidationObject::PreCallValidateDestroyIndirectCommandsLayoutNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyIndirectCommandsLayoutNV) != typeid(&ValidationObject::PreCallValidateDestroyIndirectCommandsLayoutNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyIndirectCommandsLayoutNV)     != typeid(&ValidationObject::PreCallValidateDestroyIndirectCommandsLayoutNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyIndirectCommandsLayoutNV)          != typeid(&ValidationObject::PreCallValidateDestroyIndirectCommandsLayoutNV)) << 3))];

        disp_pre_rec_DestroyIndirectCommandsLayoutNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyIndirectCommandsLayoutNV)        != typeid(&ValidationObject::PreCallRecordDestroyIndirectCommandsLayoutNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyIndirectCommandsLayoutNV) != typeid(&ValidationObject::PreCallRecordDestroyIndirectCommandsLayoutNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyIndirectCommandsLayoutNV)     != typeid(&ValidationObject::PreCallRecordDestroyIndirectCommandsLayoutNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyIndirectCommandsLayoutNV)          != typeid(&ValidationObject::PreCallRecordDestroyIndirectCommandsLayoutNV)) << 3))];

        disp_post_rec_DestroyIndirectCommandsLayoutNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyIndirectCommandsLayoutNV)        != typeid(&ValidationObject::PostCallRecordDestroyIndirectCommandsLayoutNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyIndirectCommandsLayoutNV) != typeid(&ValidationObject::PostCallRecordDestroyIndirectCommandsLayoutNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyIndirectCommandsLayoutNV)     != typeid(&ValidationObject::PostCallRecordDestroyIndirectCommandsLayoutNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyIndirectCommandsLayoutNV)          != typeid(&ValidationObject::PostCallRecordDestroyIndirectCommandsLayoutNV)) << 3))];

        disp_pre_val_CreatePrivateDataSlotEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreatePrivateDataSlotEXT)        != typeid(&ValidationObject::PreCallValidateCreatePrivateDataSlotEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreatePrivateDataSlotEXT) != typeid(&ValidationObject::PreCallValidateCreatePrivateDataSlotEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreatePrivateDataSlotEXT)     != typeid(&ValidationObject::PreCallValidateCreatePrivateDataSlotEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreatePrivateDataSlotEXT)          != typeid(&ValidationObject::PreCallValidateCreatePrivateDataSlotEXT)) << 3))];

        disp_pre_rec_CreatePrivateDataSlotEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreatePrivateDataSlotEXT)        != typeid(&ValidationObject::PreCallRecordCreatePrivateDataSlotEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreatePrivateDataSlotEXT) != typeid(&ValidationObject::PreCallRecordCreatePrivateDataSlotEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreatePrivateDataSlotEXT)     != typeid(&ValidationObject::PreCallRecordCreatePrivateDataSlotEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreatePrivateDataSlotEXT)          != typeid(&ValidationObject::PreCallRecordCreatePrivateDataSlotEXT)) << 3))];

        disp_post_rec_CreatePrivateDataSlotEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreatePrivateDataSlotEXT)        != typeid(&ValidationObject::PostCallRecordCreatePrivateDataSlotEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreatePrivateDataSlotEXT) != typeid(&ValidationObject::PostCallRecordCreatePrivateDataSlotEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreatePrivateDataSlotEXT)     != typeid(&ValidationObject::PostCallRecordCreatePrivateDataSlotEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreatePrivateDataSlotEXT)          != typeid(&ValidationObject::PostCallRecordCreatePrivateDataSlotEXT)) << 3))];

        disp_pre_val_DestroyPrivateDataSlotEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyPrivateDataSlotEXT)        != typeid(&ValidationObject::PreCallValidateDestroyPrivateDataSlotEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyPrivateDataSlotEXT) != typeid(&ValidationObject::PreCallValidateDestroyPrivateDataSlotEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyPrivateDataSlotEXT)     != typeid(&ValidationObject::PreCallValidateDestroyPrivateDataSlotEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyPrivateDataSlotEXT)          != typeid(&ValidationObject::PreCallValidateDestroyPrivateDataSlotEXT)) << 3))];

        disp_pre_rec_DestroyPrivateDataSlotEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyPrivateDataSlotEXT)        != typeid(&ValidationObject::PreCallRecordDestroyPrivateDataSlotEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyPrivateDataSlotEXT) != typeid(&ValidationObject::PreCallRecordDestroyPrivateDataSlotEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyPrivateDataSlotEXT)     != typeid(&ValidationObject::PreCallRecordDestroyPrivateDataSlotEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyPrivateDataSlotEXT)          != typeid(&ValidationObject::PreCallRecordDestroyPrivateDataSlotEXT)) << 3))];

        disp_post_rec_DestroyPrivateDataSlotEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyPrivateDataSlotEXT)        != typeid(&ValidationObject::PostCallRecordDestroyPrivateDataSlotEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyPrivateDataSlotEXT) != typeid(&ValidationObject::PostCallRecordDestroyPrivateDataSlotEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyPrivateDataSlotEXT)     != typeid(&ValidationObject::PostCallRecordDestroyPrivateDataSlotEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyPrivateDataSlotEXT)          != typeid(&ValidationObject::PostCallRecordDestroyPrivateDataSlotEXT)) << 3))];

        disp_pre_val_SetPrivateDataEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateSetPrivateDataEXT)        != typeid(&ValidationObject::PreCallValidateSetPrivateDataEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateSetPrivateDataEXT) != typeid(&ValidationObject::PreCallValidateSetPrivateDataEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateSetPrivateDataEXT)     != typeid(&ValidationObject::PreCallValidateSetPrivateDataEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateSetPrivateDataEXT)          != typeid(&ValidationObject::PreCallValidateSetPrivateDataEXT)) << 3))];

        disp_pre_rec_SetPrivateDataEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordSetPrivateDataEXT)        != typeid(&ValidationObject::PreCallRecordSetPrivateDataEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordSetPrivateDataEXT) != typeid(&ValidationObject::PreCallRecordSetPrivateDataEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordSetPrivateDataEXT)     != typeid(&ValidationObject::PreCallRecordSetPrivateDataEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordSetPrivateDataEXT)          != typeid(&ValidationObject::PreCallRecordSetPrivateDataEXT)) << 3))];

        disp_post_rec_SetPrivateDataEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordSetPrivateDataEXT)        != typeid(&ValidationObject::PostCallRecordSetPrivateDataEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordSetPrivateDataEXT) != typeid(&ValidationObject::PostCallRecordSetPrivateDataEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordSetPrivateDataEXT)     != typeid(&ValidationObject::PostCallRecordSetPrivateDataEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordSetPrivateDataEXT)          != typeid(&ValidationObject::PostCallRecordSetPrivateDataEXT)) << 3))];

        disp_pre_val_GetPrivateDataEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetPrivateDataEXT)        != typeid(&ValidationObject::PreCallValidateGetPrivateDataEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetPrivateDataEXT) != typeid(&ValidationObject::PreCallValidateGetPrivateDataEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetPrivateDataEXT)     != typeid(&ValidationObject::PreCallValidateGetPrivateDataEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetPrivateDataEXT)          != typeid(&ValidationObject::PreCallValidateGetPrivateDataEXT)) << 3))];

        disp_pre_rec_GetPrivateDataEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetPrivateDataEXT)        != typeid(&ValidationObject::PreCallRecordGetPrivateDataEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetPrivateDataEXT) != typeid(&ValidationObject::PreCallRecordGetPrivateDataEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetPrivateDataEXT)     != typeid(&ValidationObject::PreCallRecordGetPrivateDataEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetPrivateDataEXT)          != typeid(&ValidationObject::PreCallRecordGetPrivateDataEXT)) << 3))];

        disp_post_rec_GetPrivateDataEXT = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetPrivateDataEXT)        != typeid(&ValidationObject::PostCallRecordGetPrivateDataEXT)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetPrivateDataEXT) != typeid(&ValidationObject::PostCallRecordGetPrivateDataEXT)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetPrivateDataEXT)     != typeid(&ValidationObject::PostCallRecordGetPrivateDataEXT)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetPrivateDataEXT)          != typeid(&ValidationObject::PostCallRecordGetPrivateDataEXT)) << 3))];

        disp_pre_val_CmdSetFragmentShadingRateEnumNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetFragmentShadingRateEnumNV)        != typeid(&ValidationObject::PreCallValidateCmdSetFragmentShadingRateEnumNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetFragmentShadingRateEnumNV) != typeid(&ValidationObject::PreCallValidateCmdSetFragmentShadingRateEnumNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetFragmentShadingRateEnumNV)     != typeid(&ValidationObject::PreCallValidateCmdSetFragmentShadingRateEnumNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetFragmentShadingRateEnumNV)          != typeid(&ValidationObject::PreCallValidateCmdSetFragmentShadingRateEnumNV)) << 3))];

        disp_pre_rec_CmdSetFragmentShadingRateEnumNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetFragmentShadingRateEnumNV)        != typeid(&ValidationObject::PreCallRecordCmdSetFragmentShadingRateEnumNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetFragmentShadingRateEnumNV) != typeid(&ValidationObject::PreCallRecordCmdSetFragmentShadingRateEnumNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetFragmentShadingRateEnumNV)     != typeid(&ValidationObject::PreCallRecordCmdSetFragmentShadingRateEnumNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetFragmentShadingRateEnumNV)          != typeid(&ValidationObject::PreCallRecordCmdSetFragmentShadingRateEnumNV)) << 3))];

        disp_post_rec_CmdSetFragmentShadingRateEnumNV = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetFragmentShadingRateEnumNV)        != typeid(&ValidationObject::PostCallRecordCmdSetFragmentShadingRateEnumNV)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetFragmentShadingRateEnumNV) != typeid(&ValidationObject::PostCallRecordCmdSetFragmentShadingRateEnumNV)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetFragmentShadingRateEnumNV)     != typeid(&ValidationObject::PostCallRecordCmdSetFragmentShadingRateEnumNV)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetFragmentShadingRateEnumNV)          != typeid(&ValidationObject::PostCallRecordCmdSetFragmentShadingRateEnumNV)) << 3))];

#ifdef VK_USE_PLATFORM_WIN32_KHR
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
#endif
#ifdef VK_USE_PLATFORM_DIRECTFB_EXT
#endif
#ifdef VK_USE_PLATFORM_DIRECTFB_EXT
#endif
        disp_pre_val_CreateAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCreateAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallValidateCreateAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCreateAccelerationStructureKHR) != typeid(&ValidationObject::PreCallValidateCreateAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCreateAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallValidateCreateAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCreateAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallValidateCreateAccelerationStructureKHR)) << 3))];

        disp_pre_rec_CreateAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCreateAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallRecordCreateAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCreateAccelerationStructureKHR) != typeid(&ValidationObject::PreCallRecordCreateAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCreateAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallRecordCreateAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCreateAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallRecordCreateAccelerationStructureKHR)) << 3))];

        disp_post_rec_CreateAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCreateAccelerationStructureKHR)        != typeid(&ValidationObject::PostCallRecordCreateAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCreateAccelerationStructureKHR) != typeid(&ValidationObject::PostCallRecordCreateAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCreateAccelerationStructureKHR)     != typeid(&ValidationObject::PostCallRecordCreateAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCreateAccelerationStructureKHR)          != typeid(&ValidationObject::PostCallRecordCreateAccelerationStructureKHR)) << 3))];

        disp_pre_val_DestroyAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateDestroyAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallValidateDestroyAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateDestroyAccelerationStructureKHR) != typeid(&ValidationObject::PreCallValidateDestroyAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateDestroyAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallValidateDestroyAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateDestroyAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallValidateDestroyAccelerationStructureKHR)) << 3))];

        disp_pre_rec_DestroyAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordDestroyAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallRecordDestroyAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordDestroyAccelerationStructureKHR) != typeid(&ValidationObject::PreCallRecordDestroyAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordDestroyAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallRecordDestroyAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordDestroyAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallRecordDestroyAccelerationStructureKHR)) << 3))];

        disp_post_rec_DestroyAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordDestroyAccelerationStructureKHR)        != typeid(&ValidationObject::PostCallRecordDestroyAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordDestroyAccelerationStructureKHR) != typeid(&ValidationObject::PostCallRecordDestroyAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordDestroyAccelerationStructureKHR)     != typeid(&ValidationObject::PostCallRecordDestroyAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordDestroyAccelerationStructureKHR)          != typeid(&ValidationObject::PostCallRecordDestroyAccelerationStructureKHR)) << 3))];

        disp_pre_val_CmdBuildAccelerationStructuresKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBuildAccelerationStructuresKHR)        != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructuresKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBuildAccelerationStructuresKHR) != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructuresKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBuildAccelerationStructuresKHR)     != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructuresKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBuildAccelerationStructuresKHR)          != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructuresKHR)) << 3))];

        disp_pre_rec_CmdBuildAccelerationStructuresKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBuildAccelerationStructuresKHR)        != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructuresKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBuildAccelerationStructuresKHR) != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructuresKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBuildAccelerationStructuresKHR)     != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructuresKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBuildAccelerationStructuresKHR)          != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructuresKHR)) << 3))];

        disp_post_rec_CmdBuildAccelerationStructuresKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBuildAccelerationStructuresKHR)        != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructuresKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBuildAccelerationStructuresKHR) != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructuresKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBuildAccelerationStructuresKHR)     != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructuresKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBuildAccelerationStructuresKHR)          != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructuresKHR)) << 3))];

        disp_pre_val_CmdBuildAccelerationStructuresIndirectKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdBuildAccelerationStructuresIndirectKHR)        != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructuresIndirectKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdBuildAccelerationStructuresIndirectKHR) != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructuresIndirectKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdBuildAccelerationStructuresIndirectKHR)     != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructuresIndirectKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdBuildAccelerationStructuresIndirectKHR)          != typeid(&ValidationObject::PreCallValidateCmdBuildAccelerationStructuresIndirectKHR)) << 3))];

        disp_pre_rec_CmdBuildAccelerationStructuresIndirectKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdBuildAccelerationStructuresIndirectKHR)        != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructuresIndirectKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdBuildAccelerationStructuresIndirectKHR) != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructuresIndirectKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdBuildAccelerationStructuresIndirectKHR)     != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructuresIndirectKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdBuildAccelerationStructuresIndirectKHR)          != typeid(&ValidationObject::PreCallRecordCmdBuildAccelerationStructuresIndirectKHR)) << 3))];

        disp_post_rec_CmdBuildAccelerationStructuresIndirectKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdBuildAccelerationStructuresIndirectKHR)        != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructuresIndirectKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdBuildAccelerationStructuresIndirectKHR) != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructuresIndirectKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdBuildAccelerationStructuresIndirectKHR)     != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructuresIndirectKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdBuildAccelerationStructuresIndirectKHR)          != typeid(&ValidationObject::PostCallRecordCmdBuildAccelerationStructuresIndirectKHR)) << 3))];

        disp_pre_val_BuildAccelerationStructuresKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateBuildAccelerationStructuresKHR)        != typeid(&ValidationObject::PreCallValidateBuildAccelerationStructuresKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateBuildAccelerationStructuresKHR) != typeid(&ValidationObject::PreCallValidateBuildAccelerationStructuresKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateBuildAccelerationStructuresKHR)     != typeid(&ValidationObject::PreCallValidateBuildAccelerationStructuresKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateBuildAccelerationStructuresKHR)          != typeid(&ValidationObject::PreCallValidateBuildAccelerationStructuresKHR)) << 3))];

        disp_pre_rec_BuildAccelerationStructuresKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordBuildAccelerationStructuresKHR)        != typeid(&ValidationObject::PreCallRecordBuildAccelerationStructuresKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordBuildAccelerationStructuresKHR) != typeid(&ValidationObject::PreCallRecordBuildAccelerationStructuresKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordBuildAccelerationStructuresKHR)     != typeid(&ValidationObject::PreCallRecordBuildAccelerationStructuresKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordBuildAccelerationStructuresKHR)          != typeid(&ValidationObject::PreCallRecordBuildAccelerationStructuresKHR)) << 3))];

        disp_post_rec_BuildAccelerationStructuresKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordBuildAccelerationStructuresKHR)        != typeid(&ValidationObject::PostCallRecordBuildAccelerationStructuresKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordBuildAccelerationStructuresKHR) != typeid(&ValidationObject::PostCallRecordBuildAccelerationStructuresKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordBuildAccelerationStructuresKHR)     != typeid(&ValidationObject::PostCallRecordBuildAccelerationStructuresKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordBuildAccelerationStructuresKHR)          != typeid(&ValidationObject::PostCallRecordBuildAccelerationStructuresKHR)) << 3))];

        disp_pre_val_CopyAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCopyAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallValidateCopyAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCopyAccelerationStructureKHR) != typeid(&ValidationObject::PreCallValidateCopyAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCopyAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallValidateCopyAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCopyAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallValidateCopyAccelerationStructureKHR)) << 3))];

        disp_pre_rec_CopyAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCopyAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallRecordCopyAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCopyAccelerationStructureKHR) != typeid(&ValidationObject::PreCallRecordCopyAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCopyAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallRecordCopyAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCopyAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallRecordCopyAccelerationStructureKHR)) << 3))];

        disp_post_rec_CopyAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCopyAccelerationStructureKHR)        != typeid(&ValidationObject::PostCallRecordCopyAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCopyAccelerationStructureKHR) != typeid(&ValidationObject::PostCallRecordCopyAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCopyAccelerationStructureKHR)     != typeid(&ValidationObject::PostCallRecordCopyAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCopyAccelerationStructureKHR)          != typeid(&ValidationObject::PostCallRecordCopyAccelerationStructureKHR)) << 3))];

        disp_pre_val_CopyAccelerationStructureToMemoryKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCopyAccelerationStructureToMemoryKHR)        != typeid(&ValidationObject::PreCallValidateCopyAccelerationStructureToMemoryKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCopyAccelerationStructureToMemoryKHR) != typeid(&ValidationObject::PreCallValidateCopyAccelerationStructureToMemoryKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCopyAccelerationStructureToMemoryKHR)     != typeid(&ValidationObject::PreCallValidateCopyAccelerationStructureToMemoryKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCopyAccelerationStructureToMemoryKHR)          != typeid(&ValidationObject::PreCallValidateCopyAccelerationStructureToMemoryKHR)) << 3))];

        disp_pre_rec_CopyAccelerationStructureToMemoryKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCopyAccelerationStructureToMemoryKHR)        != typeid(&ValidationObject::PreCallRecordCopyAccelerationStructureToMemoryKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCopyAccelerationStructureToMemoryKHR) != typeid(&ValidationObject::PreCallRecordCopyAccelerationStructureToMemoryKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCopyAccelerationStructureToMemoryKHR)     != typeid(&ValidationObject::PreCallRecordCopyAccelerationStructureToMemoryKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCopyAccelerationStructureToMemoryKHR)          != typeid(&ValidationObject::PreCallRecordCopyAccelerationStructureToMemoryKHR)) << 3))];

        disp_post_rec_CopyAccelerationStructureToMemoryKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCopyAccelerationStructureToMemoryKHR)        != typeid(&ValidationObject::PostCallRecordCopyAccelerationStructureToMemoryKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCopyAccelerationStructureToMemoryKHR) != typeid(&ValidationObject::PostCallRecordCopyAccelerationStructureToMemoryKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCopyAccelerationStructureToMemoryKHR)     != typeid(&ValidationObject::PostCallRecordCopyAccelerationStructureToMemoryKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCopyAccelerationStructureToMemoryKHR)          != typeid(&ValidationObject::PostCallRecordCopyAccelerationStructureToMemoryKHR)) << 3))];

        disp_pre_val_CopyMemoryToAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCopyMemoryToAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallValidateCopyMemoryToAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCopyMemoryToAccelerationStructureKHR) != typeid(&ValidationObject::PreCallValidateCopyMemoryToAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCopyMemoryToAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallValidateCopyMemoryToAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCopyMemoryToAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallValidateCopyMemoryToAccelerationStructureKHR)) << 3))];

        disp_pre_rec_CopyMemoryToAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCopyMemoryToAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallRecordCopyMemoryToAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCopyMemoryToAccelerationStructureKHR) != typeid(&ValidationObject::PreCallRecordCopyMemoryToAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCopyMemoryToAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallRecordCopyMemoryToAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCopyMemoryToAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallRecordCopyMemoryToAccelerationStructureKHR)) << 3))];

        disp_post_rec_CopyMemoryToAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCopyMemoryToAccelerationStructureKHR)        != typeid(&ValidationObject::PostCallRecordCopyMemoryToAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCopyMemoryToAccelerationStructureKHR) != typeid(&ValidationObject::PostCallRecordCopyMemoryToAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCopyMemoryToAccelerationStructureKHR)     != typeid(&ValidationObject::PostCallRecordCopyMemoryToAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCopyMemoryToAccelerationStructureKHR)          != typeid(&ValidationObject::PostCallRecordCopyMemoryToAccelerationStructureKHR)) << 3))];

        disp_pre_val_WriteAccelerationStructuresPropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateWriteAccelerationStructuresPropertiesKHR)        != typeid(&ValidationObject::PreCallValidateWriteAccelerationStructuresPropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateWriteAccelerationStructuresPropertiesKHR) != typeid(&ValidationObject::PreCallValidateWriteAccelerationStructuresPropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateWriteAccelerationStructuresPropertiesKHR)     != typeid(&ValidationObject::PreCallValidateWriteAccelerationStructuresPropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateWriteAccelerationStructuresPropertiesKHR)          != typeid(&ValidationObject::PreCallValidateWriteAccelerationStructuresPropertiesKHR)) << 3))];

        disp_pre_rec_WriteAccelerationStructuresPropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordWriteAccelerationStructuresPropertiesKHR)        != typeid(&ValidationObject::PreCallRecordWriteAccelerationStructuresPropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordWriteAccelerationStructuresPropertiesKHR) != typeid(&ValidationObject::PreCallRecordWriteAccelerationStructuresPropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordWriteAccelerationStructuresPropertiesKHR)     != typeid(&ValidationObject::PreCallRecordWriteAccelerationStructuresPropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordWriteAccelerationStructuresPropertiesKHR)          != typeid(&ValidationObject::PreCallRecordWriteAccelerationStructuresPropertiesKHR)) << 3))];

        disp_post_rec_WriteAccelerationStructuresPropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordWriteAccelerationStructuresPropertiesKHR)        != typeid(&ValidationObject::PostCallRecordWriteAccelerationStructuresPropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordWriteAccelerationStructuresPropertiesKHR) != typeid(&ValidationObject::PostCallRecordWriteAccelerationStructuresPropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordWriteAccelerationStructuresPropertiesKHR)     != typeid(&ValidationObject::PostCallRecordWriteAccelerationStructuresPropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordWriteAccelerationStructuresPropertiesKHR)          != typeid(&ValidationObject::PostCallRecordWriteAccelerationStructuresPropertiesKHR)) << 3))];

        disp_pre_val_CmdCopyAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyAccelerationStructureKHR) != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureKHR)) << 3))];

        disp_pre_rec_CmdCopyAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyAccelerationStructureKHR) != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureKHR)) << 3))];

        disp_post_rec_CmdCopyAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyAccelerationStructureKHR)        != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyAccelerationStructureKHR) != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyAccelerationStructureKHR)     != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyAccelerationStructureKHR)          != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureKHR)) << 3))];

        disp_pre_val_CmdCopyAccelerationStructureToMemoryKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyAccelerationStructureToMemoryKHR)        != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureToMemoryKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyAccelerationStructureToMemoryKHR) != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureToMemoryKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyAccelerationStructureToMemoryKHR)     != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureToMemoryKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyAccelerationStructureToMemoryKHR)          != typeid(&ValidationObject::PreCallValidateCmdCopyAccelerationStructureToMemoryKHR)) << 3))];

        disp_pre_rec_CmdCopyAccelerationStructureToMemoryKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyAccelerationStructureToMemoryKHR)        != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureToMemoryKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyAccelerationStructureToMemoryKHR) != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureToMemoryKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyAccelerationStructureToMemoryKHR)     != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureToMemoryKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyAccelerationStructureToMemoryKHR)          != typeid(&ValidationObject::PreCallRecordCmdCopyAccelerationStructureToMemoryKHR)) << 3))];

        disp_post_rec_CmdCopyAccelerationStructureToMemoryKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyAccelerationStructureToMemoryKHR)        != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureToMemoryKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyAccelerationStructureToMemoryKHR) != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureToMemoryKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyAccelerationStructureToMemoryKHR)     != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureToMemoryKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyAccelerationStructureToMemoryKHR)          != typeid(&ValidationObject::PostCallRecordCmdCopyAccelerationStructureToMemoryKHR)) << 3))];

        disp_pre_val_CmdCopyMemoryToAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdCopyMemoryToAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallValidateCmdCopyMemoryToAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdCopyMemoryToAccelerationStructureKHR) != typeid(&ValidationObject::PreCallValidateCmdCopyMemoryToAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdCopyMemoryToAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallValidateCmdCopyMemoryToAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdCopyMemoryToAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallValidateCmdCopyMemoryToAccelerationStructureKHR)) << 3))];

        disp_pre_rec_CmdCopyMemoryToAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdCopyMemoryToAccelerationStructureKHR)        != typeid(&ValidationObject::PreCallRecordCmdCopyMemoryToAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdCopyMemoryToAccelerationStructureKHR) != typeid(&ValidationObject::PreCallRecordCmdCopyMemoryToAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdCopyMemoryToAccelerationStructureKHR)     != typeid(&ValidationObject::PreCallRecordCmdCopyMemoryToAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdCopyMemoryToAccelerationStructureKHR)          != typeid(&ValidationObject::PreCallRecordCmdCopyMemoryToAccelerationStructureKHR)) << 3))];

        disp_post_rec_CmdCopyMemoryToAccelerationStructureKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdCopyMemoryToAccelerationStructureKHR)        != typeid(&ValidationObject::PostCallRecordCmdCopyMemoryToAccelerationStructureKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdCopyMemoryToAccelerationStructureKHR) != typeid(&ValidationObject::PostCallRecordCmdCopyMemoryToAccelerationStructureKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdCopyMemoryToAccelerationStructureKHR)     != typeid(&ValidationObject::PostCallRecordCmdCopyMemoryToAccelerationStructureKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdCopyMemoryToAccelerationStructureKHR)          != typeid(&ValidationObject::PostCallRecordCmdCopyMemoryToAccelerationStructureKHR)) << 3))];

        disp_pre_val_GetAccelerationStructureDeviceAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetAccelerationStructureDeviceAddressKHR)        != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureDeviceAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetAccelerationStructureDeviceAddressKHR) != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureDeviceAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetAccelerationStructureDeviceAddressKHR)     != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureDeviceAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetAccelerationStructureDeviceAddressKHR)          != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureDeviceAddressKHR)) << 3))];

        disp_pre_rec_GetAccelerationStructureDeviceAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetAccelerationStructureDeviceAddressKHR)        != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureDeviceAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetAccelerationStructureDeviceAddressKHR) != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureDeviceAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetAccelerationStructureDeviceAddressKHR)     != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureDeviceAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetAccelerationStructureDeviceAddressKHR)          != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureDeviceAddressKHR)) << 3))];

        disp_post_rec_GetAccelerationStructureDeviceAddressKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetAccelerationStructureDeviceAddressKHR)        != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureDeviceAddressKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetAccelerationStructureDeviceAddressKHR) != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureDeviceAddressKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetAccelerationStructureDeviceAddressKHR)     != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureDeviceAddressKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetAccelerationStructureDeviceAddressKHR)          != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureDeviceAddressKHR)) << 3))];

        disp_pre_val_CmdWriteAccelerationStructuresPropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdWriteAccelerationStructuresPropertiesKHR)        != typeid(&ValidationObject::PreCallValidateCmdWriteAccelerationStructuresPropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdWriteAccelerationStructuresPropertiesKHR) != typeid(&ValidationObject::PreCallValidateCmdWriteAccelerationStructuresPropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdWriteAccelerationStructuresPropertiesKHR)     != typeid(&ValidationObject::PreCallValidateCmdWriteAccelerationStructuresPropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdWriteAccelerationStructuresPropertiesKHR)          != typeid(&ValidationObject::PreCallValidateCmdWriteAccelerationStructuresPropertiesKHR)) << 3))];

        disp_pre_rec_CmdWriteAccelerationStructuresPropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdWriteAccelerationStructuresPropertiesKHR)        != typeid(&ValidationObject::PreCallRecordCmdWriteAccelerationStructuresPropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdWriteAccelerationStructuresPropertiesKHR) != typeid(&ValidationObject::PreCallRecordCmdWriteAccelerationStructuresPropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdWriteAccelerationStructuresPropertiesKHR)     != typeid(&ValidationObject::PreCallRecordCmdWriteAccelerationStructuresPropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdWriteAccelerationStructuresPropertiesKHR)          != typeid(&ValidationObject::PreCallRecordCmdWriteAccelerationStructuresPropertiesKHR)) << 3))];

        disp_post_rec_CmdWriteAccelerationStructuresPropertiesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdWriteAccelerationStructuresPropertiesKHR)        != typeid(&ValidationObject::PostCallRecordCmdWriteAccelerationStructuresPropertiesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdWriteAccelerationStructuresPropertiesKHR) != typeid(&ValidationObject::PostCallRecordCmdWriteAccelerationStructuresPropertiesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdWriteAccelerationStructuresPropertiesKHR)     != typeid(&ValidationObject::PostCallRecordCmdWriteAccelerationStructuresPropertiesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdWriteAccelerationStructuresPropertiesKHR)          != typeid(&ValidationObject::PostCallRecordCmdWriteAccelerationStructuresPropertiesKHR)) << 3))];

        disp_pre_val_GetDeviceAccelerationStructureCompatibilityKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetDeviceAccelerationStructureCompatibilityKHR)        != typeid(&ValidationObject::PreCallValidateGetDeviceAccelerationStructureCompatibilityKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetDeviceAccelerationStructureCompatibilityKHR) != typeid(&ValidationObject::PreCallValidateGetDeviceAccelerationStructureCompatibilityKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetDeviceAccelerationStructureCompatibilityKHR)     != typeid(&ValidationObject::PreCallValidateGetDeviceAccelerationStructureCompatibilityKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetDeviceAccelerationStructureCompatibilityKHR)          != typeid(&ValidationObject::PreCallValidateGetDeviceAccelerationStructureCompatibilityKHR)) << 3))];

        disp_pre_rec_GetDeviceAccelerationStructureCompatibilityKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetDeviceAccelerationStructureCompatibilityKHR)        != typeid(&ValidationObject::PreCallRecordGetDeviceAccelerationStructureCompatibilityKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetDeviceAccelerationStructureCompatibilityKHR) != typeid(&ValidationObject::PreCallRecordGetDeviceAccelerationStructureCompatibilityKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetDeviceAccelerationStructureCompatibilityKHR)     != typeid(&ValidationObject::PreCallRecordGetDeviceAccelerationStructureCompatibilityKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetDeviceAccelerationStructureCompatibilityKHR)          != typeid(&ValidationObject::PreCallRecordGetDeviceAccelerationStructureCompatibilityKHR)) << 3))];

        disp_post_rec_GetDeviceAccelerationStructureCompatibilityKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetDeviceAccelerationStructureCompatibilityKHR)        != typeid(&ValidationObject::PostCallRecordGetDeviceAccelerationStructureCompatibilityKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetDeviceAccelerationStructureCompatibilityKHR) != typeid(&ValidationObject::PostCallRecordGetDeviceAccelerationStructureCompatibilityKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetDeviceAccelerationStructureCompatibilityKHR)     != typeid(&ValidationObject::PostCallRecordGetDeviceAccelerationStructureCompatibilityKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetDeviceAccelerationStructureCompatibilityKHR)          != typeid(&ValidationObject::PostCallRecordGetDeviceAccelerationStructureCompatibilityKHR)) << 3))];

        disp_pre_val_GetAccelerationStructureBuildSizesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetAccelerationStructureBuildSizesKHR)        != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureBuildSizesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetAccelerationStructureBuildSizesKHR) != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureBuildSizesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetAccelerationStructureBuildSizesKHR)     != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureBuildSizesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetAccelerationStructureBuildSizesKHR)          != typeid(&ValidationObject::PreCallValidateGetAccelerationStructureBuildSizesKHR)) << 3))];

        disp_pre_rec_GetAccelerationStructureBuildSizesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetAccelerationStructureBuildSizesKHR)        != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureBuildSizesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetAccelerationStructureBuildSizesKHR) != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureBuildSizesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetAccelerationStructureBuildSizesKHR)     != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureBuildSizesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetAccelerationStructureBuildSizesKHR)          != typeid(&ValidationObject::PreCallRecordGetAccelerationStructureBuildSizesKHR)) << 3))];

        disp_post_rec_GetAccelerationStructureBuildSizesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetAccelerationStructureBuildSizesKHR)        != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureBuildSizesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetAccelerationStructureBuildSizesKHR) != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureBuildSizesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetAccelerationStructureBuildSizesKHR)     != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureBuildSizesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetAccelerationStructureBuildSizesKHR)          != typeid(&ValidationObject::PostCallRecordGetAccelerationStructureBuildSizesKHR)) << 3))];

        disp_pre_val_CmdTraceRaysKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdTraceRaysKHR)        != typeid(&ValidationObject::PreCallValidateCmdTraceRaysKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdTraceRaysKHR) != typeid(&ValidationObject::PreCallValidateCmdTraceRaysKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdTraceRaysKHR)     != typeid(&ValidationObject::PreCallValidateCmdTraceRaysKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdTraceRaysKHR)          != typeid(&ValidationObject::PreCallValidateCmdTraceRaysKHR)) << 3))];

        disp_pre_rec_CmdTraceRaysKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdTraceRaysKHR)        != typeid(&ValidationObject::PreCallRecordCmdTraceRaysKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdTraceRaysKHR) != typeid(&ValidationObject::PreCallRecordCmdTraceRaysKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdTraceRaysKHR)     != typeid(&ValidationObject::PreCallRecordCmdTraceRaysKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdTraceRaysKHR)          != typeid(&ValidationObject::PreCallRecordCmdTraceRaysKHR)) << 3))];

        disp_post_rec_CmdTraceRaysKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdTraceRaysKHR)        != typeid(&ValidationObject::PostCallRecordCmdTraceRaysKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdTraceRaysKHR) != typeid(&ValidationObject::PostCallRecordCmdTraceRaysKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdTraceRaysKHR)     != typeid(&ValidationObject::PostCallRecordCmdTraceRaysKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdTraceRaysKHR)          != typeid(&ValidationObject::PostCallRecordCmdTraceRaysKHR)) << 3))];

        disp_pre_val_GetRayTracingCaptureReplayShaderGroupHandlesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetRayTracingCaptureReplayShaderGroupHandlesKHR)        != typeid(&ValidationObject::PreCallValidateGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetRayTracingCaptureReplayShaderGroupHandlesKHR) != typeid(&ValidationObject::PreCallValidateGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetRayTracingCaptureReplayShaderGroupHandlesKHR)     != typeid(&ValidationObject::PreCallValidateGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetRayTracingCaptureReplayShaderGroupHandlesKHR)          != typeid(&ValidationObject::PreCallValidateGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 3))];

        disp_pre_rec_GetRayTracingCaptureReplayShaderGroupHandlesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)        != typeid(&ValidationObject::PreCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR) != typeid(&ValidationObject::PreCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)     != typeid(&ValidationObject::PreCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)          != typeid(&ValidationObject::PreCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 3))];

        disp_post_rec_GetRayTracingCaptureReplayShaderGroupHandlesKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)        != typeid(&ValidationObject::PostCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR) != typeid(&ValidationObject::PostCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)     != typeid(&ValidationObject::PostCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)          != typeid(&ValidationObject::PostCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR)) << 3))];

        disp_pre_val_CmdTraceRaysIndirectKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdTraceRaysIndirectKHR)        != typeid(&ValidationObject::PreCallValidateCmdTraceRaysIndirectKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdTraceRaysIndirectKHR) != typeid(&ValidationObject::PreCallValidateCmdTraceRaysIndirectKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdTraceRaysIndirectKHR)     != typeid(&ValidationObject::PreCallValidateCmdTraceRaysIndirectKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdTraceRaysIndirectKHR)          != typeid(&ValidationObject::PreCallValidateCmdTraceRaysIndirectKHR)) << 3))];

        disp_pre_rec_CmdTraceRaysIndirectKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdTraceRaysIndirectKHR)        != typeid(&ValidationObject::PreCallRecordCmdTraceRaysIndirectKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdTraceRaysIndirectKHR) != typeid(&ValidationObject::PreCallRecordCmdTraceRaysIndirectKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdTraceRaysIndirectKHR)     != typeid(&ValidationObject::PreCallRecordCmdTraceRaysIndirectKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdTraceRaysIndirectKHR)          != typeid(&ValidationObject::PreCallRecordCmdTraceRaysIndirectKHR)) << 3))];

        disp_post_rec_CmdTraceRaysIndirectKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdTraceRaysIndirectKHR)        != typeid(&ValidationObject::PostCallRecordCmdTraceRaysIndirectKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdTraceRaysIndirectKHR) != typeid(&ValidationObject::PostCallRecordCmdTraceRaysIndirectKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdTraceRaysIndirectKHR)     != typeid(&ValidationObject::PostCallRecordCmdTraceRaysIndirectKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdTraceRaysIndirectKHR)          != typeid(&ValidationObject::PostCallRecordCmdTraceRaysIndirectKHR)) << 3))];

        disp_pre_val_GetRayTracingShaderGroupStackSizeKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateGetRayTracingShaderGroupStackSizeKHR)        != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupStackSizeKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateGetRayTracingShaderGroupStackSizeKHR) != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupStackSizeKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateGetRayTracingShaderGroupStackSizeKHR)     != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupStackSizeKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateGetRayTracingShaderGroupStackSizeKHR)          != typeid(&ValidationObject::PreCallValidateGetRayTracingShaderGroupStackSizeKHR)) << 3))];

        disp_pre_rec_GetRayTracingShaderGroupStackSizeKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordGetRayTracingShaderGroupStackSizeKHR)        != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupStackSizeKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordGetRayTracingShaderGroupStackSizeKHR) != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupStackSizeKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordGetRayTracingShaderGroupStackSizeKHR)     != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupStackSizeKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordGetRayTracingShaderGroupStackSizeKHR)          != typeid(&ValidationObject::PreCallRecordGetRayTracingShaderGroupStackSizeKHR)) << 3))];

        disp_post_rec_GetRayTracingShaderGroupStackSizeKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordGetRayTracingShaderGroupStackSizeKHR)        != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupStackSizeKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordGetRayTracingShaderGroupStackSizeKHR) != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupStackSizeKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordGetRayTracingShaderGroupStackSizeKHR)     != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupStackSizeKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordGetRayTracingShaderGroupStackSizeKHR)          != typeid(&ValidationObject::PostCallRecordGetRayTracingShaderGroupStackSizeKHR)) << 3))];

        disp_pre_val_CmdSetRayTracingPipelineStackSizeKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallValidateCmdSetRayTracingPipelineStackSizeKHR)        != typeid(&ValidationObject::PreCallValidateCmdSetRayTracingPipelineStackSizeKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallValidateCmdSetRayTracingPipelineStackSizeKHR) != typeid(&ValidationObject::PreCallValidateCmdSetRayTracingPipelineStackSizeKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallValidateCmdSetRayTracingPipelineStackSizeKHR)     != typeid(&ValidationObject::PreCallValidateCmdSetRayTracingPipelineStackSizeKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallValidateCmdSetRayTracingPipelineStackSizeKHR)          != typeid(&ValidationObject::PreCallValidateCmdSetRayTracingPipelineStackSizeKHR)) << 3))];

        disp_pre_rec_CmdSetRayTracingPipelineStackSizeKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PreCallRecordCmdSetRayTracingPipelineStackSizeKHR)        != typeid(&ValidationObject::PreCallRecordCmdSetRayTracingPipelineStackSizeKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PreCallRecordCmdSetRayTracingPipelineStackSizeKHR) != typeid(&ValidationObject::PreCallRecordCmdSetRayTracingPipelineStackSizeKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PreCallRecordCmdSetRayTracingPipelineStackSizeKHR)     != typeid(&ValidationObject::PreCallRecordCmdSetRayTracingPipelineStackSizeKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PreCallRecordCmdSetRayTracingPipelineStackSizeKHR)          != typeid(&ValidationObject::PreCallRecordCmdSetRayTracingPipelineStackSizeKHR)) << 3))];

        disp_post_rec_CmdSetRayTracingPipelineStackSizeKHR = disp_vecs[
        (((uint32_t)(typeid(&ThreadSafety::PostCallRecordCmdSetRayTracingPipelineStackSizeKHR)        != typeid(&ValidationObject::PostCallRecordCmdSetRayTracingPipelineStackSizeKHR)) << 0) |
         ((uint32_t)(typeid(&StatelessValidation::PostCallRecordCmdSetRayTracingPipelineStackSizeKHR) != typeid(&ValidationObject::PostCallRecordCmdSetRayTracingPipelineStackSizeKHR)) << 1) |
         ((uint32_t)(typeid(&ObjectLifetimes::PostCallRecordCmdSetRayTracingPipelineStackSizeKHR)     != typeid(&ValidationObject::PostCallRecordCmdSetRayTracingPipelineStackSizeKHR)) << 2) |
         ((uint32_t)(typeid(&CoreChecks::PostCallRecordCmdSetRayTracingPipelineStackSizeKHR)          != typeid(&ValidationObject::PostCallRecordCmdSetRayTracingPipelineStackSizeKHR)) << 3))];

        };


namespace vulkan_layer_chassis {

using std::unordered_map;

static const VkLayerProperties global_layer = {
    OBJECT_LAYER_NAME, VK_LAYER_API_VERSION, 1, "LunarG validation Layer",
};

static const VkExtensionProperties instance_extensions[] = {{VK_EXT_DEBUG_REPORT_EXTENSION_NAME, VK_EXT_DEBUG_REPORT_SPEC_VERSION},
                                                            {VK_EXT_DEBUG_UTILS_EXTENSION_NAME, VK_EXT_DEBUG_UTILS_SPEC_VERSION}};
static const VkExtensionProperties device_extensions[] = {
    {VK_EXT_VALIDATION_CACHE_EXTENSION_NAME, VK_EXT_VALIDATION_CACHE_SPEC_VERSION},
    {VK_EXT_DEBUG_MARKER_EXTENSION_NAME, VK_EXT_DEBUG_MARKER_SPEC_VERSION},
    {VK_EXT_TOOLING_INFO_EXTENSION_NAME, VK_EXT_TOOLING_INFO_SPEC_VERSION}
};

typedef enum ApiFunctionType {
    kFuncTypeInst = 0,
    kFuncTypePdev = 1,
    kFuncTypeDev = 2
} ApiFunctionType;

typedef struct {
    ApiFunctionType function_type;
    void* funcptr;
} function_data;

extern const std::unordered_map<std::string, function_data> name_to_funcptr_map;

// Manually written functions

// Check enabled instance extensions against supported instance extension whitelist
static void InstanceExtensionWhitelist(ValidationObject *layer_data, const VkInstanceCreateInfo *pCreateInfo, VkInstance instance) {
    for (uint32_t i = 0; i < pCreateInfo->enabledExtensionCount; i++) {
        // Check for recognized instance extensions
        if (!white_list(pCreateInfo->ppEnabledExtensionNames[i], kInstanceExtensionNames)) {
            layer_data->LogWarning(layer_data->instance, kVUIDUndefined,
                    "Instance Extension %s is not supported by this layer.  Using this extension may adversely affect validation "
                    "results and/or produce undefined behavior.",
                    pCreateInfo->ppEnabledExtensionNames[i]);
        }
    }
}

// Check enabled device extensions against supported device extension whitelist
static void DeviceExtensionWhitelist(ValidationObject *layer_data, const VkDeviceCreateInfo *pCreateInfo, VkDevice device) {
    for (uint32_t i = 0; i < pCreateInfo->enabledExtensionCount; i++) {
        // Check for recognized device extensions
        if (!white_list(pCreateInfo->ppEnabledExtensionNames[i], kDeviceExtensionNames)) {
            layer_data->LogWarning(layer_data->device, kVUIDUndefined,
                    "Device Extension %s is not supported by this layer.  Using this extension may adversely affect validation "
                    "results and/or produce undefined behavior.",
                    pCreateInfo->ppEnabledExtensionNames[i]);
        }
    }
}

void OutputLayerStatusInfo(ValidationObject *context) {
    std::string list_of_enables;
    std::string list_of_disables;
    for (uint32_t i = 0; i < kMaxEnableFlags; i++) {
        if (context->enabled[i]) {
            if (list_of_enables.size()) list_of_enables.append(", ");
            list_of_enables.append(EnableFlagNameHelper[i]);
        }
    }
    if (list_of_enables.size() == 0) {
        list_of_enables.append("None");
    }
    for (uint32_t i = 0; i < kMaxDisableFlags; i++) {
        if (context->disabled[i]) {
            if (list_of_disables.size()) list_of_disables.append(", ");
            list_of_disables.append(DisableFlagNameHelper[i]);
        }
    }
    if (list_of_disables.size() == 0) {
        list_of_disables.append("None");
    }

    auto settings_info = GetLayerSettingsFileInfo();
    std::string settings_status;
    if (!settings_info->file_found) {
        settings_status = "None. Default location is ";
        settings_status.append(settings_info->location);
        settings_status.append(".");
    } else {
        settings_status = "Found at ";
        settings_status.append(settings_info->location);
        settings_status.append(" specified by ");
        switch (settings_info->source) {
            case kEnvVar:
                settings_status.append("environment variable (VK_LAYER_SETTINGS_PATH).");
                break;
            case kVkConfig:
                settings_status.append("VkConfig application override.");
                break;
            case kLocal:    // Intentionally fall through
            default:
                settings_status.append("default location (current working directory).");
                break;
        }
    }

    // Output layer status information message
    context->LogInfo(context->instance, kVUID_Core_CreatInstance_Status,
        "Khronos Validation Layer Active:\n    Settings File: %s\n    Current Enables: %s.\n    Current Disables: %s.\n",
        settings_status.c_str(), list_of_enables.c_str(), list_of_disables.c_str());

    // Create warning message if user is running debug layers.
#ifndef NDEBUG
    context->LogPerformanceWarning(context->instance, kVUID_Core_CreateInstance_Debug_Warning,
        "VALIDATION LAYERS WARNING: Using debug builds of the validation layers *will* adversely affect performance.");
#endif
}

// Non-code-generated chassis API functions

VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL GetDeviceProcAddr(VkDevice device, const char *funcName) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    if (!ApiParentExtensionEnabled(funcName, &layer_data->device_extensions)) {
        return nullptr;
    }
    const auto &item = name_to_funcptr_map.find(funcName);
    if (item != name_to_funcptr_map.end()) {
        if (item->second.function_type != kFuncTypeDev) {
            return nullptr;
        } else {
            return reinterpret_cast<PFN_vkVoidFunction>(item->second.funcptr);
        }
    }
    auto &table = layer_data->device_dispatch_table;
    if (!table.GetDeviceProcAddr) return nullptr;
    return table.GetDeviceProcAddr(device, funcName);
}

VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL GetInstanceProcAddr(VkInstance instance, const char *funcName) {
    const auto &item = name_to_funcptr_map.find(funcName);
    if (item != name_to_funcptr_map.end()) {
        return reinterpret_cast<PFN_vkVoidFunction>(item->second.funcptr);
    }
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    auto &table = layer_data->instance_dispatch_table;
    if (!table.GetInstanceProcAddr) return nullptr;
    return table.GetInstanceProcAddr(instance, funcName);
}

VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL GetPhysicalDeviceProcAddr(VkInstance instance, const char *funcName) {
    const auto &item = name_to_funcptr_map.find(funcName);
    if (item != name_to_funcptr_map.end()) {
        if (item->second.function_type != kFuncTypePdev) {
            return nullptr;
        } else {
            return reinterpret_cast<PFN_vkVoidFunction>(item->second.funcptr);
        }
    }
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    auto &table = layer_data->instance_dispatch_table;
    if (!table.GetPhysicalDeviceProcAddr) return nullptr;
    return table.GetPhysicalDeviceProcAddr(instance, funcName);
}

VKAPI_ATTR VkResult VKAPI_CALL EnumerateInstanceLayerProperties(uint32_t *pCount, VkLayerProperties *pProperties) {
    return util_GetLayerProperties(1, &global_layer, pCount, pProperties);
}

VKAPI_ATTR VkResult VKAPI_CALL EnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t *pCount,
                                                              VkLayerProperties *pProperties) {
    return util_GetLayerProperties(1, &global_layer, pCount, pProperties);
}

VKAPI_ATTR VkResult VKAPI_CALL EnumerateInstanceExtensionProperties(const char *pLayerName, uint32_t *pCount,
                                                                    VkExtensionProperties *pProperties) {
    if (pLayerName && !strcmp(pLayerName, global_layer.layerName))
        return util_GetExtensionProperties(ARRAY_SIZE(instance_extensions), instance_extensions, pCount, pProperties);

    return VK_ERROR_LAYER_NOT_PRESENT;
}

VKAPI_ATTR VkResult VKAPI_CALL EnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char *pLayerName,
                                                                  uint32_t *pCount, VkExtensionProperties *pProperties) {
    if (pLayerName && !strcmp(pLayerName, global_layer.layerName)) return util_GetExtensionProperties(ARRAY_SIZE(device_extensions), device_extensions, pCount, pProperties);
    assert(physicalDevice);
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    return layer_data->instance_dispatch_table.EnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pCount, pProperties);
}

VKAPI_ATTR VkResult VKAPI_CALL CreateInstance(const VkInstanceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator,
                                              VkInstance *pInstance) {
    VkLayerInstanceCreateInfo* chain_info = get_chain_info(pCreateInfo, VK_LAYER_LINK_INFO);

    assert(chain_info->u.pLayerInfo);
    PFN_vkGetInstanceProcAddr fpGetInstanceProcAddr = chain_info->u.pLayerInfo->pfnNextGetInstanceProcAddr;
    PFN_vkCreateInstance fpCreateInstance = (PFN_vkCreateInstance)fpGetInstanceProcAddr(NULL, "vkCreateInstance");
    if (fpCreateInstance == NULL) return VK_ERROR_INITIALIZATION_FAILED;
    chain_info->u.pLayerInfo = chain_info->u.pLayerInfo->pNext;
    uint32_t specified_version = (pCreateInfo->pApplicationInfo ? pCreateInfo->pApplicationInfo->apiVersion : VK_API_VERSION_1_0);
    uint32_t api_version;
    if (specified_version < VK_API_VERSION_1_1)
        api_version = VK_API_VERSION_1_0;
    else if (specified_version < VK_API_VERSION_1_2)
        api_version = VK_API_VERSION_1_1;
    else
        api_version = VK_API_VERSION_1_2;
    auto report_data = new debug_report_data{};
    report_data->instance_pnext_chain = SafePnextCopy(pCreateInfo->pNext);
    ActivateInstanceDebugCallbacks(report_data);

    // Set up enable and disable features flags
    CHECK_ENABLED local_enables {};
    CHECK_DISABLED local_disables {};
    ConfigAndEnvSettings config_and_env_settings_data {OBJECT_LAYER_DESCRIPTION, pCreateInfo->pNext, local_enables, local_disables,
        report_data->filter_message_ids, &report_data->duplicate_message_limit};
    ProcessConfigAndEnvSettings(&config_and_env_settings_data);
    layer_debug_messenger_actions(report_data, pAllocator, OBJECT_LAYER_DESCRIPTION);

    // Create temporary dispatch vector for pre-calls until instance is created
    std::vector<ValidationObject*> local_object_dispatch;

    // Add VOs to dispatch vector. Order here will be the validation dispatch order!
    auto thread_checker_obj = new ThreadSafety(nullptr);
    thread_checker_obj->RegisterValidationObject(!local_disables[thread_safety], api_version, report_data, local_object_dispatch);

    auto parameter_validation_obj = new StatelessValidation;
    parameter_validation_obj->RegisterValidationObject(!local_disables[stateless_checks], api_version, report_data, local_object_dispatch);

    auto object_tracker_obj = new ObjectLifetimes;
    object_tracker_obj->RegisterValidationObject(!local_disables[object_tracking], api_version, report_data, local_object_dispatch);

    auto core_checks_obj = use_optick_instrumentation ? new CoreChecksOptickInstrumented : new CoreChecks;
    core_checks_obj->RegisterValidationObject(!local_disables[core_checks], api_version, report_data, local_object_dispatch);

    auto best_practices_obj = new BestPractices;
    best_practices_obj->RegisterValidationObject(local_enables[best_practices], api_version, report_data, local_object_dispatch);

    auto gpu_assisted_obj = new GpuAssisted;
    gpu_assisted_obj->RegisterValidationObject(local_enables[gpu_validation], api_version, report_data, local_object_dispatch);

    auto debug_printf_obj = new DebugPrintf;
    debug_printf_obj->RegisterValidationObject(local_enables[debug_printf], api_version, report_data, local_object_dispatch);

    auto sync_validation_obj = new SyncValidator;
    sync_validation_obj->RegisterValidationObject(local_enables[sync_validation], api_version, report_data, local_object_dispatch);

    // If handle wrapping is disabled via the ValidationFeatures extension, override build flag
    if (local_disables[handle_wrapping]) {
        wrap_handles = false;
    }

    // Init dispatch array and call registration functions
    bool skip = false;
    for (auto intercept : local_object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateInstance(pCreateInfo, pAllocator, pInstance);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : local_object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateInstance(pCreateInfo, pAllocator, pInstance);
    }

    VkResult result = fpCreateInstance(pCreateInfo, pAllocator, pInstance);
    if (result != VK_SUCCESS) return result;

    auto framework = GetLayerDataPtr(get_dispatch_key(*pInstance), layer_data_map);

    framework->object_dispatch = local_object_dispatch;
    framework->container_type = LayerObjectTypeInstance;
    framework->disabled = local_disables;
    framework->enabled = local_enables;

    framework->instance = *pInstance;
    layer_init_instance_dispatch_table(*pInstance, &framework->instance_dispatch_table, fpGetInstanceProcAddr);
    framework->report_data = report_data;
    framework->api_version = api_version;
    framework->instance_extensions.InitFromInstanceCreateInfo(specified_version, pCreateInfo);

    OutputLayerStatusInfo(framework);

    thread_checker_obj->FinalizeInstanceValidationObject(framework);
    object_tracker_obj->FinalizeInstanceValidationObject(framework);
    parameter_validation_obj->FinalizeInstanceValidationObject(framework);
    core_checks_obj->FinalizeInstanceValidationObject(framework);
    core_checks_obj->instance = *pInstance;
    core_checks_obj->instance_state = core_checks_obj;
    best_practices_obj->FinalizeInstanceValidationObject(framework);
    gpu_assisted_obj->FinalizeInstanceValidationObject(framework);
    debug_printf_obj->FinalizeInstanceValidationObject(framework);
    sync_validation_obj->FinalizeInstanceValidationObject(framework);

    for (auto intercept : framework->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateInstance(pCreateInfo, pAllocator, pInstance, result);
    }

    // Delete unused validation objects to avoid memory leak.
    std::vector<ValidationObject*> local_objs = {
        thread_checker_obj, object_tracker_obj, parameter_validation_obj,
        core_checks_obj, best_practices_obj, gpu_assisted_obj, debug_printf_obj,
        sync_validation_obj,
    };
    for (auto obj : local_objs) {
        if (std::find(local_object_dispatch.begin(), local_object_dispatch.end(), obj) == local_object_dispatch.end()) {
            delete obj;
        }
    }

    InstanceExtensionWhitelist(framework, pCreateInfo, *pInstance);
    DeactivateInstanceDebugCallbacks(report_data);
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyInstance(VkInstance instance, const VkAllocationCallbacks *pAllocator) {
    dispatch_key key = get_dispatch_key(instance);
    auto layer_data = GetLayerDataPtr(key, layer_data_map);
    ActivateInstanceDebugCallbacks(layer_data->report_data);

    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyInstance(instance, pAllocator);
        //if (skip) return; // WORKAROUD: does not currently work properly
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyInstance(instance, pAllocator);
    }

    layer_data->instance_dispatch_table.DestroyInstance(instance, pAllocator);

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyInstance(instance, pAllocator);
    }

    DeactivateInstanceDebugCallbacks(layer_data->report_data);
    FreePnextChain(layer_data->report_data->instance_pnext_chain);

    layer_debug_utils_destroy_instance(layer_data->report_data);

    for (auto item = layer_data->object_dispatch.begin(); item != layer_data->object_dispatch.end(); item++) {
        delete *item;
    }
    FreeLayerDataPtr(key, layer_data_map);
}

VKAPI_ATTR VkResult VKAPI_CALL CreateDevice(VkPhysicalDevice gpu, const VkDeviceCreateInfo *pCreateInfo,
                                            const VkAllocationCallbacks *pAllocator, VkDevice *pDevice) {
    VkLayerDeviceCreateInfo *chain_info = get_chain_info(pCreateInfo, VK_LAYER_LINK_INFO);

    auto instance_interceptor = GetLayerDataPtr(get_dispatch_key(gpu), layer_data_map);

    PFN_vkGetInstanceProcAddr fpGetInstanceProcAddr = chain_info->u.pLayerInfo->pfnNextGetInstanceProcAddr;
    PFN_vkGetDeviceProcAddr fpGetDeviceProcAddr = chain_info->u.pLayerInfo->pfnNextGetDeviceProcAddr;
    PFN_vkCreateDevice fpCreateDevice = (PFN_vkCreateDevice)fpGetInstanceProcAddr(instance_interceptor->instance, "vkCreateDevice");
    if (fpCreateDevice == NULL) {
        return VK_ERROR_INITIALIZATION_FAILED;
    }
    chain_info->u.pLayerInfo = chain_info->u.pLayerInfo->pNext;

    // Get physical device limits for device
    VkPhysicalDeviceProperties device_properties = {};
    instance_interceptor->instance_dispatch_table.GetPhysicalDeviceProperties(gpu, &device_properties);

    // Setup the validation tables based on the application API version from the instance and the capabilities of the device driver
    uint32_t effective_api_version = std::min(device_properties.apiVersion, instance_interceptor->api_version);

    DeviceExtensions device_extensions = {};
    device_extensions.InitFromDeviceCreateInfo(&instance_interceptor->instance_extensions, effective_api_version, pCreateInfo);
    for (auto item : instance_interceptor->object_dispatch) {
        item->device_extensions = device_extensions;
    }

    safe_VkDeviceCreateInfo modified_create_info(pCreateInfo);

    bool skip = false;
    for (auto intercept : instance_interceptor->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDevice(gpu, pCreateInfo, pAllocator, pDevice);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : instance_interceptor->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDevice(gpu, pCreateInfo, pAllocator, pDevice, &modified_create_info);
    }

    VkResult result = fpCreateDevice(gpu, reinterpret_cast<VkDeviceCreateInfo *>(&modified_create_info), pAllocator, pDevice);
    if (result != VK_SUCCESS) {
        return result;
    }

    auto device_interceptor = GetLayerDataPtr(get_dispatch_key(*pDevice), layer_data_map);
    device_interceptor->container_type = LayerObjectTypeDevice;

    // Save local info in device object
    device_interceptor->phys_dev_properties.properties = device_properties;
    device_interceptor->api_version = device_interceptor->device_extensions.InitFromDeviceCreateInfo(
        &instance_interceptor->instance_extensions, effective_api_version, pCreateInfo);
    device_interceptor->device_extensions = device_extensions;

    layer_init_device_dispatch_table(*pDevice, &device_interceptor->device_dispatch_table, fpGetDeviceProcAddr);

    device_interceptor->device = *pDevice;
    device_interceptor->physical_device = gpu;
    device_interceptor->instance = instance_interceptor->instance;
    device_interceptor->report_data = instance_interceptor->report_data;

    // Note that this DEFINES THE ORDER IN WHICH THE LAYER VALIDATION OBJECTS ARE CALLED
    auto disables = instance_interceptor->disabled;
    auto enables = instance_interceptor->enabled;

    auto thread_safety_obj = new ThreadSafety(reinterpret_cast<ThreadSafety *>(instance_interceptor->GetValidationObject(instance_interceptor->object_dispatch, LayerObjectTypeThreading)));
    thread_safety_obj->InitDeviceValidationObject(!disables[thread_safety], instance_interceptor, device_interceptor);

    auto stateless_validation_obj = new StatelessValidation;
    stateless_validation_obj->InitDeviceValidationObject(!disables[stateless_checks], instance_interceptor, device_interceptor);

    auto object_tracker_obj = new ObjectLifetimes;
    object_tracker_obj->InitDeviceValidationObject(!disables[object_tracking], instance_interceptor, device_interceptor);

    auto core_checks_obj = use_optick_instrumentation ? new CoreChecksOptickInstrumented : new CoreChecks;
    core_checks_obj->InitDeviceValidationObject(!disables[core_checks], instance_interceptor, device_interceptor);

    auto best_practices_obj = new BestPractices;
    best_practices_obj->InitDeviceValidationObject(enables[best_practices], instance_interceptor, device_interceptor);

    auto gpu_assisted_obj = new GpuAssisted;
    gpu_assisted_obj->InitDeviceValidationObject(enables[gpu_validation], instance_interceptor, device_interceptor);

    auto debug_printf_obj = new DebugPrintf;
    debug_printf_obj->InitDeviceValidationObject(enables[debug_printf], instance_interceptor, device_interceptor);

    auto sync_validation_obj = new SyncValidator;
    sync_validation_obj->InitDeviceValidationObject(enables[sync_validation], instance_interceptor, device_interceptor);

    // Delete unused validation objects to avoid memory leak.
    std::vector<ValidationObject *> local_objs = {
        thread_safety_obj, stateless_validation_obj, object_tracker_obj,
        core_checks_obj, best_practices_obj, gpu_assisted_obj, debug_printf_obj,
        sync_validation_obj,
    };
    for (auto obj : local_objs) {
        if (std::find(device_interceptor->object_dispatch.begin(), device_interceptor->object_dispatch.end(), obj) ==
            device_interceptor->object_dispatch.end()) {
            delete obj;
        }
    }

    for (auto intercept : instance_interceptor->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDevice(gpu, pCreateInfo, pAllocator, pDevice, result);
    }

    device_interceptor->InitObjectDispatchVectors();

    DeviceExtensionWhitelist(device_interceptor, pCreateInfo, *pDevice);

    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator) {
    dispatch_key key = get_dispatch_key(device);
    auto layer_data = GetLayerDataPtr(key, layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyDevice(device, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyDevice(device, pAllocator);
    }

    layer_data->device_dispatch_table.DestroyDevice(device, pAllocator);

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyDevice(device, pAllocator);
    }

    for (auto item = layer_data->object_dispatch.begin(); item != layer_data->object_dispatch.end(); item++) {
        delete *item;
    }
    FreeLayerDataPtr(key, layer_data_map);
}


// Special-case APIs for which core_validation needs custom parameter lists and/or modifies parameters

VKAPI_ATTR VkResult VKAPI_CALL CreateGraphicsPipelines(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    const VkGraphicsPipelineCreateInfo*         pCreateInfos,
    const VkAllocationCallbacks*                pAllocator,
    VkPipeline*                                 pPipelines) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;

    create_graphics_pipeline_api_state cgpl_state[LayerObjectTypeMaxEnum]{};

    for (auto intercept : layer_data->object_dispatch) {
        cgpl_state[intercept->container_type].pCreateInfos = pCreateInfos;
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines, &(cgpl_state[intercept->container_type]));
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines, &(cgpl_state[intercept->container_type]));
    }

    auto usepCreateInfos = (!cgpl_state[LayerObjectTypeGpuAssisted].pCreateInfos) ? pCreateInfos : cgpl_state[LayerObjectTypeGpuAssisted].pCreateInfos;
    if (cgpl_state[LayerObjectTypeDebugPrintf].pCreateInfos) usepCreateInfos = cgpl_state[LayerObjectTypeDebugPrintf].pCreateInfos;

    VkResult result = DispatchCreateGraphicsPipelines(device, pipelineCache, createInfoCount, usepCreateInfos, pAllocator, pPipelines);

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines, result, &(cgpl_state[intercept->container_type]));
    }
    return result;
}

// This API saves some core_validation pipeline state state on the stack for performance purposes
VKAPI_ATTR VkResult VKAPI_CALL CreateComputePipelines(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    const VkComputePipelineCreateInfo*          pCreateInfos,
    const VkAllocationCallbacks*                pAllocator,
    VkPipeline*                                 pPipelines) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;

    create_compute_pipeline_api_state ccpl_state[LayerObjectTypeMaxEnum]{};

    for (auto intercept : layer_data->object_dispatch) {
        ccpl_state[intercept->container_type].pCreateInfos = pCreateInfos;
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines, &(ccpl_state[intercept->container_type]));
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines, &(ccpl_state[intercept->container_type]));
    }

    auto usepCreateInfos = (!ccpl_state[LayerObjectTypeGpuAssisted].pCreateInfos) ? pCreateInfos : ccpl_state[LayerObjectTypeGpuAssisted].pCreateInfos;
    if (ccpl_state[LayerObjectTypeDebugPrintf].pCreateInfos) usepCreateInfos = ccpl_state[LayerObjectTypeDebugPrintf].pCreateInfos;

    VkResult result = DispatchCreateComputePipelines(device, pipelineCache, createInfoCount, usepCreateInfos, pAllocator, pPipelines);

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines, result, &(ccpl_state[intercept->container_type]));
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CreateRayTracingPipelinesNV(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    const VkRayTracingPipelineCreateInfoNV*     pCreateInfos,
    const VkAllocationCallbacks*                pAllocator,
    VkPipeline*                                 pPipelines) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;

    create_ray_tracing_pipeline_api_state crtpl_state[LayerObjectTypeMaxEnum]{};

    for (auto intercept : layer_data->object_dispatch) {
        crtpl_state[intercept->container_type].pCreateInfos = pCreateInfos;
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos,
                                                                      pAllocator, pPipelines, &(crtpl_state[intercept->container_type]));
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator,
                                                            pPipelines, &(crtpl_state[intercept->container_type]));
    }

    VkResult result = DispatchCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator,
                                                             pPipelines, result, &(crtpl_state[intercept->container_type]));
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CreateRayTracingPipelinesKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      deferredOperation,
    VkPipelineCache                             pipelineCache,
    uint32_t                                    createInfoCount,
    const VkRayTracingPipelineCreateInfoKHR*    pCreateInfos,
    const VkAllocationCallbacks*                pAllocator,
    VkPipeline*                                 pPipelines) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;

    create_ray_tracing_pipeline_khr_api_state crtpl_state[LayerObjectTypeMaxEnum]{};

    for (auto intercept : layer_data->object_dispatch) {
        crtpl_state[intercept->container_type].pCreateInfos = pCreateInfos;
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos,
                                                                      pAllocator, pPipelines, &(crtpl_state[intercept->container_type]));
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator,
                                                            pPipelines, &(crtpl_state[intercept->container_type]));
    }

    VkResult result = DispatchCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator,
                                                             pPipelines, result, &(crtpl_state[intercept->container_type]));
    }
    return result;
}

// This API needs the ability to modify a down-chain parameter
VKAPI_ATTR VkResult VKAPI_CALL CreatePipelineLayout(
    VkDevice                                    device,
    const VkPipelineLayoutCreateInfo*           pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkPipelineLayout*                           pPipelineLayout) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;

    create_pipeline_layout_api_state cpl_state{};
    cpl_state.modified_create_info = *pCreateInfo;

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout, &cpl_state);
    }
    VkResult result = DispatchCreatePipelineLayout(device, &cpl_state.modified_create_info, pAllocator, pPipelineLayout);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout, result);
    }
    return result;
}

// This API needs some local stack data for performance reasons and also may modify a parameter
VKAPI_ATTR VkResult VKAPI_CALL CreateShaderModule(
    VkDevice                                    device,
    const VkShaderModuleCreateInfo*             pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkShaderModule*                             pShaderModule) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;

    create_shader_module_api_state csm_state{};
    csm_state.instrumented_create_info = *pCreateInfo;

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule, &csm_state);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule, &csm_state);
    }
    VkResult result = DispatchCreateShaderModule(device, &csm_state.instrumented_create_info, pAllocator, pShaderModule);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule, result, &csm_state);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL AllocateDescriptorSets(
    VkDevice                                    device,
    const VkDescriptorSetAllocateInfo*          pAllocateInfo,
    VkDescriptorSet*                            pDescriptorSets) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;

    cvdescriptorset::AllocateDescriptorSetsData ads_state[LayerObjectTypeMaxEnum];

    for (auto intercept : layer_data->object_dispatch) {
        ads_state[intercept->container_type].Init(pAllocateInfo->descriptorSetCount);
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateAllocateDescriptorSets(device,
            pAllocateInfo, pDescriptorSets, &(ads_state[intercept->container_type]));
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
    }
    VkResult result = DispatchAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets,
            result, &(ads_state[intercept->container_type]));
    }
    return result;
}

// This API needs the ability to modify a down-chain parameter
VKAPI_ATTR VkResult VKAPI_CALL CreateBuffer(
    VkDevice                                    device,
    const VkBufferCreateInfo*                   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkBuffer*                                   pBuffer) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;

    create_buffer_api_state cb_state{};
    cb_state.modified_create_info = *pCreateInfo;

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateBuffer(device, pCreateInfo, pAllocator, pBuffer, &cb_state);
    }
    VkResult result = DispatchCreateBuffer(device, &cb_state.modified_create_info, pAllocator, pBuffer);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateBuffer(device, pCreateInfo, pAllocator, pBuffer, result);
    }
    return result;
}


// Handle tooling queries manually as this is a request for layer information

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceToolPropertiesEXT(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pToolCount,
    VkPhysicalDeviceToolPropertiesEXT*          pToolProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;

    static const VkPhysicalDeviceToolPropertiesEXT khronos_layer_tool_props = {
        VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT,
        nullptr,
        "Khronos Validation Layer",
        STRINGIFY(VK_HEADER_VERSION),
        VK_TOOL_PURPOSE_VALIDATION_BIT_EXT | VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT | VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT | VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT,
        "Khronos Validation Layer",
        OBJECT_LAYER_NAME
    };

    auto original_pToolProperties = pToolProperties;


    if (pToolProperties != nullptr) {
        *pToolProperties = khronos_layer_tool_props;
        pToolProperties = ((*pToolCount > 1) ? &pToolProperties[1] : nullptr);
        (*pToolCount)--;
    }

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);
    }

    VkResult result = DispatchGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);

    if (original_pToolProperties != nullptr) {
        pToolProperties = original_pToolProperties;
    }
    (*pToolCount)++;

    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties, result);
    }
    return result;
}


// ValidationCache APIs do not dispatch

VKAPI_ATTR VkResult VKAPI_CALL CreateValidationCacheEXT(
    VkDevice                                    device,
    const VkValidationCacheCreateInfoEXT*       pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkValidationCacheEXT*                       pValidationCache) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    VkResult result = VK_SUCCESS;

    ValidationObject *validation_data = layer_data->GetValidationObject(layer_data->object_dispatch, LayerObjectTypeCoreValidation);
    if (validation_data) {
        auto lock = validation_data->write_lock();
        result = validation_data->CoreLayerCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyValidationCacheEXT(
    VkDevice                                    device,
    VkValidationCacheEXT                        validationCache,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);

    ValidationObject *validation_data = layer_data->GetValidationObject(layer_data->object_dispatch, LayerObjectTypeCoreValidation);
    if (validation_data) {
        auto lock = validation_data->write_lock();
        validation_data->CoreLayerDestroyValidationCacheEXT(device, validationCache, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL MergeValidationCachesEXT(
    VkDevice                                    device,
    VkValidationCacheEXT                        dstCache,
    uint32_t                                    srcCacheCount,
    const VkValidationCacheEXT*                 pSrcCaches) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    VkResult result = VK_SUCCESS;

    ValidationObject *validation_data = layer_data->GetValidationObject(layer_data->object_dispatch, LayerObjectTypeCoreValidation);
    if (validation_data) {
        auto lock = validation_data->write_lock();
        result = validation_data->CoreLayerMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetValidationCacheDataEXT(
    VkDevice                                    device,
    VkValidationCacheEXT                        validationCache,
    size_t*                                     pDataSize,
    void*                                       pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    VkResult result = VK_SUCCESS;

    ValidationObject *validation_data = layer_data->GetValidationObject(layer_data->object_dispatch, LayerObjectTypeCoreValidation);
    if (validation_data) {
        auto lock = validation_data->write_lock();
        result = validation_data->CoreLayerGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
    }
    return result;

}


VKAPI_ATTR VkResult VKAPI_CALL EnumeratePhysicalDevices(
    VkInstance                                  instance,
    uint32_t*                                   pPhysicalDeviceCount,
    VkPhysicalDevice*                           pPhysicalDevices) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
    }
    VkResult result = DispatchEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFeatures(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceFeatures*                   pFeatures) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
    }
    DispatchGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFormatProperties(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkFormatProperties*                         pFormatProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
    }
    DispatchGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceImageFormatProperties(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkImageTiling                               tiling,
    VkImageUsageFlags                           usage,
    VkImageCreateFlags                          flags,
    VkImageFormatProperties*                    pImageFormatProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
    }
    VkResult result = DispatchGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceProperties(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceProperties*                 pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceProperties(physicalDevice, pProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceProperties(physicalDevice, pProperties);
    }
    DispatchGetPhysicalDeviceProperties(physicalDevice, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceProperties(physicalDevice, pProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyProperties(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pQueueFamilyPropertyCount,
    VkQueueFamilyProperties*                    pQueueFamilyProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    }
    DispatchGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMemoryProperties(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceMemoryProperties*           pMemoryProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
    }
    DispatchGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetDeviceQueue(
    VkDevice                                    device,
    uint32_t                                    queueFamilyIndex,
    uint32_t                                    queueIndex,
    VkQueue*                                    pQueue) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceQueue) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceQueue) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
    }
    DispatchGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceQueue) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL QueueSubmit(
    VkQueue                                     queue,
    uint32_t                                    submitCount,
    const VkSubmitInfo*                         pSubmits,
    VkFence                                     fence) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(queue), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_QueueSubmit) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateQueueSubmit(queue, submitCount, pSubmits, fence);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_QueueSubmit) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordQueueSubmit(queue, submitCount, pSubmits, fence);
    }
    VkResult result = DispatchQueueSubmit(queue, submitCount, pSubmits, fence);
    for (auto intercept : layer_data->disp_post_rec_QueueSubmit) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordQueueSubmit(queue, submitCount, pSubmits, fence, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL QueueWaitIdle(
    VkQueue                                     queue) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(queue), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_QueueWaitIdle) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateQueueWaitIdle(queue);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_QueueWaitIdle) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordQueueWaitIdle(queue);
    }
    VkResult result = DispatchQueueWaitIdle(queue);
    for (auto intercept : layer_data->disp_post_rec_QueueWaitIdle) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordQueueWaitIdle(queue, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL DeviceWaitIdle(
    VkDevice                                    device) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DeviceWaitIdle) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDeviceWaitIdle(device);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_DeviceWaitIdle) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDeviceWaitIdle(device);
    }
    VkResult result = DispatchDeviceWaitIdle(device);
    for (auto intercept : layer_data->disp_post_rec_DeviceWaitIdle) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDeviceWaitIdle(device, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL AllocateMemory(
    VkDevice                                    device,
    const VkMemoryAllocateInfo*                 pAllocateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDeviceMemory*                             pMemory) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_AllocateMemory) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_AllocateMemory) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
    }
    VkResult result = DispatchAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
    for (auto intercept : layer_data->disp_post_rec_AllocateMemory) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordAllocateMemory(device, pAllocateInfo, pAllocator, pMemory, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL FreeMemory(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_FreeMemory) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateFreeMemory(device, memory, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_FreeMemory) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordFreeMemory(device, memory, pAllocator);
    }
    DispatchFreeMemory(device, memory, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_FreeMemory) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordFreeMemory(device, memory, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL MapMemory(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    VkDeviceSize                                offset,
    VkDeviceSize                                size,
    VkMemoryMapFlags                            flags,
    void**                                      ppData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_MapMemory) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateMapMemory(device, memory, offset, size, flags, ppData);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_MapMemory) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordMapMemory(device, memory, offset, size, flags, ppData);
    }
    VkResult result = DispatchMapMemory(device, memory, offset, size, flags, ppData);
    for (auto intercept : layer_data->disp_post_rec_MapMemory) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordMapMemory(device, memory, offset, size, flags, ppData, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL UnmapMemory(
    VkDevice                                    device,
    VkDeviceMemory                              memory) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_UnmapMemory) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateUnmapMemory(device, memory);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_UnmapMemory) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordUnmapMemory(device, memory);
    }
    DispatchUnmapMemory(device, memory);
    for (auto intercept : layer_data->disp_post_rec_UnmapMemory) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordUnmapMemory(device, memory);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL FlushMappedMemoryRanges(
    VkDevice                                    device,
    uint32_t                                    memoryRangeCount,
    const VkMappedMemoryRange*                  pMemoryRanges) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_FlushMappedMemoryRanges) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_FlushMappedMemoryRanges) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
    }
    VkResult result = DispatchFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
    for (auto intercept : layer_data->disp_post_rec_FlushMappedMemoryRanges) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL InvalidateMappedMemoryRanges(
    VkDevice                                    device,
    uint32_t                                    memoryRangeCount,
    const VkMappedMemoryRange*                  pMemoryRanges) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_InvalidateMappedMemoryRanges) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_InvalidateMappedMemoryRanges) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
    }
    VkResult result = DispatchInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
    for (auto intercept : layer_data->disp_post_rec_InvalidateMappedMemoryRanges) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL GetDeviceMemoryCommitment(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    VkDeviceSize*                               pCommittedMemoryInBytes) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceMemoryCommitment) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceMemoryCommitment) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
    }
    DispatchGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceMemoryCommitment) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL BindBufferMemory(
    VkDevice                                    device,
    VkBuffer                                    buffer,
    VkDeviceMemory                              memory,
    VkDeviceSize                                memoryOffset) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_BindBufferMemory) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateBindBufferMemory(device, buffer, memory, memoryOffset);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_BindBufferMemory) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordBindBufferMemory(device, buffer, memory, memoryOffset);
    }
    VkResult result = DispatchBindBufferMemory(device, buffer, memory, memoryOffset);
    for (auto intercept : layer_data->disp_post_rec_BindBufferMemory) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordBindBufferMemory(device, buffer, memory, memoryOffset, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL BindImageMemory(
    VkDevice                                    device,
    VkImage                                     image,
    VkDeviceMemory                              memory,
    VkDeviceSize                                memoryOffset) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_BindImageMemory) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateBindImageMemory(device, image, memory, memoryOffset);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_BindImageMemory) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordBindImageMemory(device, image, memory, memoryOffset);
    }
    VkResult result = DispatchBindImageMemory(device, image, memory, memoryOffset);
    for (auto intercept : layer_data->disp_post_rec_BindImageMemory) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordBindImageMemory(device, image, memory, memoryOffset, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL GetBufferMemoryRequirements(
    VkDevice                                    device,
    VkBuffer                                    buffer,
    VkMemoryRequirements*                       pMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetBufferMemoryRequirements) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetBufferMemoryRequirements) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
    }
    DispatchGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetBufferMemoryRequirements) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
    }
}

VKAPI_ATTR void VKAPI_CALL GetImageMemoryRequirements(
    VkDevice                                    device,
    VkImage                                     image,
    VkMemoryRequirements*                       pMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetImageMemoryRequirements) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetImageMemoryRequirements(device, image, pMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetImageMemoryRequirements) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetImageMemoryRequirements(device, image, pMemoryRequirements);
    }
    DispatchGetImageMemoryRequirements(device, image, pMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetImageMemoryRequirements) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetImageMemoryRequirements(device, image, pMemoryRequirements);
    }
}

VKAPI_ATTR void VKAPI_CALL GetImageSparseMemoryRequirements(
    VkDevice                                    device,
    VkImage                                     image,
    uint32_t*                                   pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements*            pSparseMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetImageSparseMemoryRequirements) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetImageSparseMemoryRequirements) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }
    DispatchGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetImageSparseMemoryRequirements) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSparseImageFormatProperties(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkSampleCountFlagBits                       samples,
    VkImageUsageFlags                           usage,
    VkImageTiling                               tiling,
    uint32_t*                                   pPropertyCount,
    VkSparseImageFormatProperties*              pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
    }
    DispatchGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL QueueBindSparse(
    VkQueue                                     queue,
    uint32_t                                    bindInfoCount,
    const VkBindSparseInfo*                     pBindInfo,
    VkFence                                     fence) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(queue), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_QueueBindSparse) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_QueueBindSparse) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
    }
    VkResult result = DispatchQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
    for (auto intercept : layer_data->disp_post_rec_QueueBindSparse) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordQueueBindSparse(queue, bindInfoCount, pBindInfo, fence, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CreateFence(
    VkDevice                                    device,
    const VkFenceCreateInfo*                    pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkFence*                                    pFence) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateFence) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateFence(device, pCreateInfo, pAllocator, pFence);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateFence) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateFence(device, pCreateInfo, pAllocator, pFence);
    }
    VkResult result = DispatchCreateFence(device, pCreateInfo, pAllocator, pFence);
    for (auto intercept : layer_data->disp_post_rec_CreateFence) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateFence(device, pCreateInfo, pAllocator, pFence, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyFence(
    VkDevice                                    device,
    VkFence                                     fence,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyFence) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyFence(device, fence, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyFence) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyFence(device, fence, pAllocator);
    }
    DispatchDestroyFence(device, fence, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyFence) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyFence(device, fence, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL ResetFences(
    VkDevice                                    device,
    uint32_t                                    fenceCount,
    const VkFence*                              pFences) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ResetFences) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateResetFences(device, fenceCount, pFences);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ResetFences) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordResetFences(device, fenceCount, pFences);
    }
    VkResult result = DispatchResetFences(device, fenceCount, pFences);
    for (auto intercept : layer_data->disp_post_rec_ResetFences) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordResetFences(device, fenceCount, pFences, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetFenceStatus(
    VkDevice                                    device,
    VkFence                                     fence) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetFenceStatus) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetFenceStatus(device, fence);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetFenceStatus) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetFenceStatus(device, fence);
    }
    VkResult result = DispatchGetFenceStatus(device, fence);
    for (auto intercept : layer_data->disp_post_rec_GetFenceStatus) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetFenceStatus(device, fence, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL WaitForFences(
    VkDevice                                    device,
    uint32_t                                    fenceCount,
    const VkFence*                              pFences,
    VkBool32                                    waitAll,
    uint64_t                                    timeout) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_WaitForFences) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateWaitForFences(device, fenceCount, pFences, waitAll, timeout);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_WaitForFences) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordWaitForFences(device, fenceCount, pFences, waitAll, timeout);
    }
    VkResult result = DispatchWaitForFences(device, fenceCount, pFences, waitAll, timeout);
    for (auto intercept : layer_data->disp_post_rec_WaitForFences) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordWaitForFences(device, fenceCount, pFences, waitAll, timeout, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CreateSemaphore(
    VkDevice                                    device,
    const VkSemaphoreCreateInfo*                pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSemaphore*                                pSemaphore) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateSemaphore) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateSemaphore) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
    }
    VkResult result = DispatchCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
    for (auto intercept : layer_data->disp_post_rec_CreateSemaphore) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroySemaphore(
    VkDevice                                    device,
    VkSemaphore                                 semaphore,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroySemaphore) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroySemaphore(device, semaphore, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroySemaphore) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroySemaphore(device, semaphore, pAllocator);
    }
    DispatchDestroySemaphore(device, semaphore, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroySemaphore) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroySemaphore(device, semaphore, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateEvent(
    VkDevice                                    device,
    const VkEventCreateInfo*                    pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkEvent*                                    pEvent) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateEvent) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateEvent(device, pCreateInfo, pAllocator, pEvent);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateEvent) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateEvent(device, pCreateInfo, pAllocator, pEvent);
    }
    VkResult result = DispatchCreateEvent(device, pCreateInfo, pAllocator, pEvent);
    for (auto intercept : layer_data->disp_post_rec_CreateEvent) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateEvent(device, pCreateInfo, pAllocator, pEvent, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyEvent(
    VkDevice                                    device,
    VkEvent                                     event,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyEvent) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyEvent(device, event, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyEvent) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyEvent(device, event, pAllocator);
    }
    DispatchDestroyEvent(device, event, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyEvent) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyEvent(device, event, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetEventStatus(
    VkDevice                                    device,
    VkEvent                                     event) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetEventStatus) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetEventStatus(device, event);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetEventStatus) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetEventStatus(device, event);
    }
    VkResult result = DispatchGetEventStatus(device, event);
    for (auto intercept : layer_data->disp_post_rec_GetEventStatus) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetEventStatus(device, event, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL SetEvent(
    VkDevice                                    device,
    VkEvent                                     event) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_SetEvent) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateSetEvent(device, event);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_SetEvent) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordSetEvent(device, event);
    }
    VkResult result = DispatchSetEvent(device, event);
    for (auto intercept : layer_data->disp_post_rec_SetEvent) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordSetEvent(device, event, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL ResetEvent(
    VkDevice                                    device,
    VkEvent                                     event) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ResetEvent) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateResetEvent(device, event);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ResetEvent) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordResetEvent(device, event);
    }
    VkResult result = DispatchResetEvent(device, event);
    for (auto intercept : layer_data->disp_post_rec_ResetEvent) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordResetEvent(device, event, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CreateQueryPool(
    VkDevice                                    device,
    const VkQueryPoolCreateInfo*                pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkQueryPool*                                pQueryPool) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateQueryPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateQueryPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
    }
    VkResult result = DispatchCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
    for (auto intercept : layer_data->disp_post_rec_CreateQueryPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyQueryPool(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyQueryPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyQueryPool(device, queryPool, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyQueryPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyQueryPool(device, queryPool, pAllocator);
    }
    DispatchDestroyQueryPool(device, queryPool, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyQueryPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyQueryPool(device, queryPool, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetQueryPoolResults(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount,
    size_t                                      dataSize,
    void*                                       pData,
    VkDeviceSize                                stride,
    VkQueryResultFlags                          flags) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetQueryPoolResults) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetQueryPoolResults) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
    }
    VkResult result = DispatchGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
    for (auto intercept : layer_data->disp_post_rec_GetQueryPoolResults) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyBuffer(
    VkDevice                                    device,
    VkBuffer                                    buffer,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyBuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyBuffer(device, buffer, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyBuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyBuffer(device, buffer, pAllocator);
    }
    DispatchDestroyBuffer(device, buffer, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyBuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyBuffer(device, buffer, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateBufferView(
    VkDevice                                    device,
    const VkBufferViewCreateInfo*               pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkBufferView*                               pView) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateBufferView) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateBufferView(device, pCreateInfo, pAllocator, pView);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateBufferView) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateBufferView(device, pCreateInfo, pAllocator, pView);
    }
    VkResult result = DispatchCreateBufferView(device, pCreateInfo, pAllocator, pView);
    for (auto intercept : layer_data->disp_post_rec_CreateBufferView) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateBufferView(device, pCreateInfo, pAllocator, pView, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyBufferView(
    VkDevice                                    device,
    VkBufferView                                bufferView,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyBufferView) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyBufferView(device, bufferView, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyBufferView) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyBufferView(device, bufferView, pAllocator);
    }
    DispatchDestroyBufferView(device, bufferView, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyBufferView) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyBufferView(device, bufferView, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateImage(
    VkDevice                                    device,
    const VkImageCreateInfo*                    pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkImage*                                    pImage) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateImage) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateImage(device, pCreateInfo, pAllocator, pImage);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateImage) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateImage(device, pCreateInfo, pAllocator, pImage);
    }
    VkResult result = DispatchCreateImage(device, pCreateInfo, pAllocator, pImage);
    for (auto intercept : layer_data->disp_post_rec_CreateImage) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateImage(device, pCreateInfo, pAllocator, pImage, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyImage(
    VkDevice                                    device,
    VkImage                                     image,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyImage) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyImage(device, image, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyImage) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyImage(device, image, pAllocator);
    }
    DispatchDestroyImage(device, image, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyImage) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyImage(device, image, pAllocator);
    }
}

VKAPI_ATTR void VKAPI_CALL GetImageSubresourceLayout(
    VkDevice                                    device,
    VkImage                                     image,
    const VkImageSubresource*                   pSubresource,
    VkSubresourceLayout*                        pLayout) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetImageSubresourceLayout) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetImageSubresourceLayout(device, image, pSubresource, pLayout);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetImageSubresourceLayout) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetImageSubresourceLayout(device, image, pSubresource, pLayout);
    }
    DispatchGetImageSubresourceLayout(device, image, pSubresource, pLayout);
    for (auto intercept : layer_data->disp_post_rec_GetImageSubresourceLayout) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetImageSubresourceLayout(device, image, pSubresource, pLayout);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateImageView(
    VkDevice                                    device,
    const VkImageViewCreateInfo*                pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkImageView*                                pView) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateImageView) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateImageView(device, pCreateInfo, pAllocator, pView);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateImageView) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateImageView(device, pCreateInfo, pAllocator, pView);
    }
    VkResult result = DispatchCreateImageView(device, pCreateInfo, pAllocator, pView);
    for (auto intercept : layer_data->disp_post_rec_CreateImageView) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateImageView(device, pCreateInfo, pAllocator, pView, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyImageView(
    VkDevice                                    device,
    VkImageView                                 imageView,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyImageView) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyImageView(device, imageView, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyImageView) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyImageView(device, imageView, pAllocator);
    }
    DispatchDestroyImageView(device, imageView, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyImageView) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyImageView(device, imageView, pAllocator);
    }
}

VKAPI_ATTR void VKAPI_CALL DestroyShaderModule(
    VkDevice                                    device,
    VkShaderModule                              shaderModule,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyShaderModule) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyShaderModule(device, shaderModule, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyShaderModule) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyShaderModule(device, shaderModule, pAllocator);
    }
    DispatchDestroyShaderModule(device, shaderModule, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyShaderModule) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyShaderModule(device, shaderModule, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreatePipelineCache(
    VkDevice                                    device,
    const VkPipelineCacheCreateInfo*            pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkPipelineCache*                            pPipelineCache) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreatePipelineCache) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreatePipelineCache) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
    }
    VkResult result = DispatchCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
    for (auto intercept : layer_data->disp_post_rec_CreatePipelineCache) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyPipelineCache(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyPipelineCache) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyPipelineCache(device, pipelineCache, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyPipelineCache) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyPipelineCache(device, pipelineCache, pAllocator);
    }
    DispatchDestroyPipelineCache(device, pipelineCache, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyPipelineCache) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyPipelineCache(device, pipelineCache, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetPipelineCacheData(
    VkDevice                                    device,
    VkPipelineCache                             pipelineCache,
    size_t*                                     pDataSize,
    void*                                       pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetPipelineCacheData) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetPipelineCacheData) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
    }
    VkResult result = DispatchGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
    for (auto intercept : layer_data->disp_post_rec_GetPipelineCacheData) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPipelineCacheData(device, pipelineCache, pDataSize, pData, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL MergePipelineCaches(
    VkDevice                                    device,
    VkPipelineCache                             dstCache,
    uint32_t                                    srcCacheCount,
    const VkPipelineCache*                      pSrcCaches) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_MergePipelineCaches) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_MergePipelineCaches) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
    }
    VkResult result = DispatchMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
    for (auto intercept : layer_data->disp_post_rec_MergePipelineCaches) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyPipeline(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyPipeline) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyPipeline(device, pipeline, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyPipeline) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyPipeline(device, pipeline, pAllocator);
    }
    DispatchDestroyPipeline(device, pipeline, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyPipeline) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyPipeline(device, pipeline, pAllocator);
    }
}

VKAPI_ATTR void VKAPI_CALL DestroyPipelineLayout(
    VkDevice                                    device,
    VkPipelineLayout                            pipelineLayout,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyPipelineLayout) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyPipelineLayout(device, pipelineLayout, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyPipelineLayout) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyPipelineLayout(device, pipelineLayout, pAllocator);
    }
    DispatchDestroyPipelineLayout(device, pipelineLayout, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyPipelineLayout) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyPipelineLayout(device, pipelineLayout, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateSampler(
    VkDevice                                    device,
    const VkSamplerCreateInfo*                  pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSampler*                                  pSampler) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateSampler) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateSampler(device, pCreateInfo, pAllocator, pSampler);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateSampler) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateSampler(device, pCreateInfo, pAllocator, pSampler);
    }
    VkResult result = DispatchCreateSampler(device, pCreateInfo, pAllocator, pSampler);
    for (auto intercept : layer_data->disp_post_rec_CreateSampler) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateSampler(device, pCreateInfo, pAllocator, pSampler, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroySampler(
    VkDevice                                    device,
    VkSampler                                   sampler,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroySampler) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroySampler(device, sampler, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroySampler) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroySampler(device, sampler, pAllocator);
    }
    DispatchDestroySampler(device, sampler, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroySampler) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroySampler(device, sampler, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateDescriptorSetLayout(
    VkDevice                                    device,
    const VkDescriptorSetLayoutCreateInfo*      pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDescriptorSetLayout*                      pSetLayout) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateDescriptorSetLayout) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateDescriptorSetLayout) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
    }
    VkResult result = DispatchCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
    for (auto intercept : layer_data->disp_post_rec_CreateDescriptorSetLayout) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyDescriptorSetLayout(
    VkDevice                                    device,
    VkDescriptorSetLayout                       descriptorSetLayout,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyDescriptorSetLayout) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyDescriptorSetLayout) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
    }
    DispatchDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyDescriptorSetLayout) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateDescriptorPool(
    VkDevice                                    device,
    const VkDescriptorPoolCreateInfo*           pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDescriptorPool*                           pDescriptorPool) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateDescriptorPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateDescriptorPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
    }
    VkResult result = DispatchCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
    for (auto intercept : layer_data->disp_post_rec_CreateDescriptorPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyDescriptorPool(
    VkDevice                                    device,
    VkDescriptorPool                            descriptorPool,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyDescriptorPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyDescriptorPool(device, descriptorPool, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyDescriptorPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyDescriptorPool(device, descriptorPool, pAllocator);
    }
    DispatchDestroyDescriptorPool(device, descriptorPool, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyDescriptorPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyDescriptorPool(device, descriptorPool, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL ResetDescriptorPool(
    VkDevice                                    device,
    VkDescriptorPool                            descriptorPool,
    VkDescriptorPoolResetFlags                  flags) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ResetDescriptorPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateResetDescriptorPool(device, descriptorPool, flags);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ResetDescriptorPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordResetDescriptorPool(device, descriptorPool, flags);
    }
    VkResult result = DispatchResetDescriptorPool(device, descriptorPool, flags);
    for (auto intercept : layer_data->disp_post_rec_ResetDescriptorPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordResetDescriptorPool(device, descriptorPool, flags, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL FreeDescriptorSets(
    VkDevice                                    device,
    VkDescriptorPool                            descriptorPool,
    uint32_t                                    descriptorSetCount,
    const VkDescriptorSet*                      pDescriptorSets) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_FreeDescriptorSets) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_FreeDescriptorSets) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
    }
    VkResult result = DispatchFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
    for (auto intercept : layer_data->disp_post_rec_FreeDescriptorSets) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL UpdateDescriptorSets(
    VkDevice                                    device,
    uint32_t                                    descriptorWriteCount,
    const VkWriteDescriptorSet*                 pDescriptorWrites,
    uint32_t                                    descriptorCopyCount,
    const VkCopyDescriptorSet*                  pDescriptorCopies) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_UpdateDescriptorSets) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_UpdateDescriptorSets) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
    }
    DispatchUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
    for (auto intercept : layer_data->disp_post_rec_UpdateDescriptorSets) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateFramebuffer(
    VkDevice                                    device,
    const VkFramebufferCreateInfo*              pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkFramebuffer*                              pFramebuffer) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateFramebuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateFramebuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
    }
    VkResult result = DispatchCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
    for (auto intercept : layer_data->disp_post_rec_CreateFramebuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyFramebuffer(
    VkDevice                                    device,
    VkFramebuffer                               framebuffer,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyFramebuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyFramebuffer(device, framebuffer, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyFramebuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyFramebuffer(device, framebuffer, pAllocator);
    }
    DispatchDestroyFramebuffer(device, framebuffer, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyFramebuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyFramebuffer(device, framebuffer, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateRenderPass(
    VkDevice                                    device,
    const VkRenderPassCreateInfo*               pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkRenderPass*                               pRenderPass) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateRenderPass) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateRenderPass) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
    }
    VkResult result = DispatchCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
    for (auto intercept : layer_data->disp_post_rec_CreateRenderPass) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyRenderPass(
    VkDevice                                    device,
    VkRenderPass                                renderPass,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyRenderPass) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyRenderPass(device, renderPass, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyRenderPass) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyRenderPass(device, renderPass, pAllocator);
    }
    DispatchDestroyRenderPass(device, renderPass, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyRenderPass) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyRenderPass(device, renderPass, pAllocator);
    }
}

VKAPI_ATTR void VKAPI_CALL GetRenderAreaGranularity(
    VkDevice                                    device,
    VkRenderPass                                renderPass,
    VkExtent2D*                                 pGranularity) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetRenderAreaGranularity) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetRenderAreaGranularity(device, renderPass, pGranularity);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetRenderAreaGranularity) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetRenderAreaGranularity(device, renderPass, pGranularity);
    }
    DispatchGetRenderAreaGranularity(device, renderPass, pGranularity);
    for (auto intercept : layer_data->disp_post_rec_GetRenderAreaGranularity) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetRenderAreaGranularity(device, renderPass, pGranularity);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateCommandPool(
    VkDevice                                    device,
    const VkCommandPoolCreateInfo*              pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkCommandPool*                              pCommandPool) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateCommandPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateCommandPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
    }
    VkResult result = DispatchCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
    for (auto intercept : layer_data->disp_post_rec_CreateCommandPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyCommandPool(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyCommandPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyCommandPool(device, commandPool, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyCommandPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyCommandPool(device, commandPool, pAllocator);
    }
    DispatchDestroyCommandPool(device, commandPool, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyCommandPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyCommandPool(device, commandPool, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL ResetCommandPool(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    VkCommandPoolResetFlags                     flags) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ResetCommandPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateResetCommandPool(device, commandPool, flags);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ResetCommandPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordResetCommandPool(device, commandPool, flags);
    }
    VkResult result = DispatchResetCommandPool(device, commandPool, flags);
    for (auto intercept : layer_data->disp_post_rec_ResetCommandPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordResetCommandPool(device, commandPool, flags, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL AllocateCommandBuffers(
    VkDevice                                    device,
    const VkCommandBufferAllocateInfo*          pAllocateInfo,
    VkCommandBuffer*                            pCommandBuffers) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_AllocateCommandBuffers) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_AllocateCommandBuffers) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
    }
    VkResult result = DispatchAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
    for (auto intercept : layer_data->disp_post_rec_AllocateCommandBuffers) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL FreeCommandBuffers(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    uint32_t                                    commandBufferCount,
    const VkCommandBuffer*                      pCommandBuffers) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_FreeCommandBuffers) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_FreeCommandBuffers) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
    }
    DispatchFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
    for (auto intercept : layer_data->disp_post_rec_FreeCommandBuffers) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL BeginCommandBuffer(
    VkCommandBuffer                             commandBuffer,
    const VkCommandBufferBeginInfo*             pBeginInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_BeginCommandBuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateBeginCommandBuffer(commandBuffer, pBeginInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_BeginCommandBuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordBeginCommandBuffer(commandBuffer, pBeginInfo);
    }
    VkResult result = DispatchBeginCommandBuffer(commandBuffer, pBeginInfo);
    for (auto intercept : layer_data->disp_post_rec_BeginCommandBuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordBeginCommandBuffer(commandBuffer, pBeginInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL EndCommandBuffer(
    VkCommandBuffer                             commandBuffer) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_EndCommandBuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateEndCommandBuffer(commandBuffer);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_EndCommandBuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordEndCommandBuffer(commandBuffer);
    }
    VkResult result = DispatchEndCommandBuffer(commandBuffer);
    for (auto intercept : layer_data->disp_post_rec_EndCommandBuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordEndCommandBuffer(commandBuffer, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL ResetCommandBuffer(
    VkCommandBuffer                             commandBuffer,
    VkCommandBufferResetFlags                   flags) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ResetCommandBuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateResetCommandBuffer(commandBuffer, flags);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ResetCommandBuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordResetCommandBuffer(commandBuffer, flags);
    }
    VkResult result = DispatchResetCommandBuffer(commandBuffer, flags);
    for (auto intercept : layer_data->disp_post_rec_ResetCommandBuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordResetCommandBuffer(commandBuffer, flags, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdBindPipeline(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipeline                                  pipeline) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBindPipeline) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBindPipeline) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
    }
    DispatchCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
    for (auto intercept : layer_data->disp_post_rec_CmdBindPipeline) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetViewport(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    const VkViewport*                           pViewports) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetViewport) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetViewport) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
    }
    DispatchCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
    for (auto intercept : layer_data->disp_post_rec_CmdSetViewport) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetScissor(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstScissor,
    uint32_t                                    scissorCount,
    const VkRect2D*                             pScissors) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetScissor) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetScissor) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
    }
    DispatchCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
    for (auto intercept : layer_data->disp_post_rec_CmdSetScissor) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetLineWidth(
    VkCommandBuffer                             commandBuffer,
    float                                       lineWidth) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetLineWidth) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetLineWidth(commandBuffer, lineWidth);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetLineWidth) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetLineWidth(commandBuffer, lineWidth);
    }
    DispatchCmdSetLineWidth(commandBuffer, lineWidth);
    for (auto intercept : layer_data->disp_post_rec_CmdSetLineWidth) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetLineWidth(commandBuffer, lineWidth);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetDepthBias(
    VkCommandBuffer                             commandBuffer,
    float                                       depthBiasConstantFactor,
    float                                       depthBiasClamp,
    float                                       depthBiasSlopeFactor) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetDepthBias) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetDepthBias) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
    }
    DispatchCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
    for (auto intercept : layer_data->disp_post_rec_CmdSetDepthBias) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetBlendConstants(
    VkCommandBuffer                             commandBuffer,
    const float                                 blendConstants[4]) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetBlendConstants) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetBlendConstants(commandBuffer, blendConstants);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetBlendConstants) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetBlendConstants(commandBuffer, blendConstants);
    }
    DispatchCmdSetBlendConstants(commandBuffer, blendConstants);
    for (auto intercept : layer_data->disp_post_rec_CmdSetBlendConstants) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetBlendConstants(commandBuffer, blendConstants);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetDepthBounds(
    VkCommandBuffer                             commandBuffer,
    float                                       minDepthBounds,
    float                                       maxDepthBounds) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetDepthBounds) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetDepthBounds) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
    }
    DispatchCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
    for (auto intercept : layer_data->disp_post_rec_CmdSetDepthBounds) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetStencilCompareMask(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    compareMask) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetStencilCompareMask) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetStencilCompareMask) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
    }
    DispatchCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
    for (auto intercept : layer_data->disp_post_rec_CmdSetStencilCompareMask) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetStencilWriteMask(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    writeMask) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetStencilWriteMask) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetStencilWriteMask) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
    }
    DispatchCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
    for (auto intercept : layer_data->disp_post_rec_CmdSetStencilWriteMask) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetStencilReference(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    uint32_t                                    reference) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetStencilReference) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetStencilReference(commandBuffer, faceMask, reference);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetStencilReference) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetStencilReference(commandBuffer, faceMask, reference);
    }
    DispatchCmdSetStencilReference(commandBuffer, faceMask, reference);
    for (auto intercept : layer_data->disp_post_rec_CmdSetStencilReference) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetStencilReference(commandBuffer, faceMask, reference);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBindDescriptorSets(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipelineLayout                            layout,
    uint32_t                                    firstSet,
    uint32_t                                    descriptorSetCount,
    const VkDescriptorSet*                      pDescriptorSets,
    uint32_t                                    dynamicOffsetCount,
    const uint32_t*                             pDynamicOffsets) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBindDescriptorSets) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBindDescriptorSets) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
    }
    DispatchCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
    for (auto intercept : layer_data->disp_post_rec_CmdBindDescriptorSets) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBindIndexBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkIndexType                                 indexType) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBindIndexBuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBindIndexBuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
    }
    DispatchCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
    for (auto intercept : layer_data->disp_post_rec_CmdBindIndexBuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBindVertexBuffers(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstBinding,
    uint32_t                                    bindingCount,
    const VkBuffer*                             pBuffers,
    const VkDeviceSize*                         pOffsets) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBindVertexBuffers) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBindVertexBuffers) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
    }
    DispatchCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
    for (auto intercept : layer_data->disp_post_rec_CmdBindVertexBuffers) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDraw(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    vertexCount,
    uint32_t                                    instanceCount,
    uint32_t                                    firstVertex,
    uint32_t                                    firstInstance) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDraw) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDraw) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
    }
    DispatchCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
    for (auto intercept : layer_data->disp_post_rec_CmdDraw) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDrawIndexed(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    indexCount,
    uint32_t                                    instanceCount,
    uint32_t                                    firstIndex,
    int32_t                                     vertexOffset,
    uint32_t                                    firstInstance) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawIndexed) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawIndexed) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
    }
    DispatchCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawIndexed) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDrawIndirect(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawIndirect) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawIndirect) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
    }
    DispatchCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawIndirect) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDrawIndexedIndirect(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawIndexedIndirect) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawIndexedIndirect) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
    }
    DispatchCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawIndexedIndirect) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDispatch(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
    }
    DispatchCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
    for (auto intercept : layer_data->disp_post_rec_CmdDispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDispatchIndirect(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDispatchIndirect) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDispatchIndirect(commandBuffer, buffer, offset);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDispatchIndirect) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDispatchIndirect(commandBuffer, buffer, offset);
    }
    DispatchCmdDispatchIndirect(commandBuffer, buffer, offset);
    for (auto intercept : layer_data->disp_post_rec_CmdDispatchIndirect) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDispatchIndirect(commandBuffer, buffer, offset);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    srcBuffer,
    VkBuffer                                    dstBuffer,
    uint32_t                                    regionCount,
    const VkBufferCopy*                         pRegions) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyBuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyBuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
    }
    DispatchCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyBuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const VkImageCopy*                          pRegions) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyImage) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyImage) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
    }
    DispatchCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyImage) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBlitImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const VkImageBlit*                          pRegions,
    VkFilter                                    filter) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBlitImage) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBlitImage) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
    }
    DispatchCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
    for (auto intercept : layer_data->disp_post_rec_CmdBlitImage) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyBufferToImage(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    srcBuffer,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const VkBufferImageCopy*                    pRegions) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyBufferToImage) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyBufferToImage) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
    }
    DispatchCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyBufferToImage) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyImageToBuffer(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkBuffer                                    dstBuffer,
    uint32_t                                    regionCount,
    const VkBufferImageCopy*                    pRegions) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyImageToBuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyImageToBuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
    }
    DispatchCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyImageToBuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdUpdateBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                dataSize,
    const void*                                 pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdUpdateBuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdUpdateBuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
    }
    DispatchCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
    for (auto intercept : layer_data->disp_post_rec_CmdUpdateBuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdFillBuffer(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                size,
    uint32_t                                    data) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdFillBuffer) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdFillBuffer) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
    }
    DispatchCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
    for (auto intercept : layer_data->disp_post_rec_CmdFillBuffer) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdClearColorImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     image,
    VkImageLayout                               imageLayout,
    const VkClearColorValue*                    pColor,
    uint32_t                                    rangeCount,
    const VkImageSubresourceRange*              pRanges) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdClearColorImage) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdClearColorImage) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
    }
    DispatchCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
    for (auto intercept : layer_data->disp_post_rec_CmdClearColorImage) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdClearDepthStencilImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     image,
    VkImageLayout                               imageLayout,
    const VkClearDepthStencilValue*             pDepthStencil,
    uint32_t                                    rangeCount,
    const VkImageSubresourceRange*              pRanges) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdClearDepthStencilImage) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdClearDepthStencilImage) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
    }
    DispatchCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
    for (auto intercept : layer_data->disp_post_rec_CmdClearDepthStencilImage) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdClearAttachments(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    attachmentCount,
    const VkClearAttachment*                    pAttachments,
    uint32_t                                    rectCount,
    const VkClearRect*                          pRects) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdClearAttachments) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdClearAttachments) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
    }
    DispatchCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
    for (auto intercept : layer_data->disp_post_rec_CmdClearAttachments) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdResolveImage(
    VkCommandBuffer                             commandBuffer,
    VkImage                                     srcImage,
    VkImageLayout                               srcImageLayout,
    VkImage                                     dstImage,
    VkImageLayout                               dstImageLayout,
    uint32_t                                    regionCount,
    const VkImageResolve*                       pRegions) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdResolveImage) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdResolveImage) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
    }
    DispatchCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
    for (auto intercept : layer_data->disp_post_rec_CmdResolveImage) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetEvent(
    VkCommandBuffer                             commandBuffer,
    VkEvent                                     event,
    VkPipelineStageFlags                        stageMask) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetEvent) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetEvent(commandBuffer, event, stageMask);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetEvent) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetEvent(commandBuffer, event, stageMask);
    }
    DispatchCmdSetEvent(commandBuffer, event, stageMask);
    for (auto intercept : layer_data->disp_post_rec_CmdSetEvent) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetEvent(commandBuffer, event, stageMask);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdResetEvent(
    VkCommandBuffer                             commandBuffer,
    VkEvent                                     event,
    VkPipelineStageFlags                        stageMask) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdResetEvent) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdResetEvent(commandBuffer, event, stageMask);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdResetEvent) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdResetEvent(commandBuffer, event, stageMask);
    }
    DispatchCmdResetEvent(commandBuffer, event, stageMask);
    for (auto intercept : layer_data->disp_post_rec_CmdResetEvent) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdResetEvent(commandBuffer, event, stageMask);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdWaitEvents(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    eventCount,
    const VkEvent*                              pEvents,
    VkPipelineStageFlags                        srcStageMask,
    VkPipelineStageFlags                        dstStageMask,
    uint32_t                                    memoryBarrierCount,
    const VkMemoryBarrier*                      pMemoryBarriers,
    uint32_t                                    bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier*                pBufferMemoryBarriers,
    uint32_t                                    imageMemoryBarrierCount,
    const VkImageMemoryBarrier*                 pImageMemoryBarriers) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdWaitEvents) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdWaitEvents) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
    }
    DispatchCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
    for (auto intercept : layer_data->disp_post_rec_CmdWaitEvents) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdPipelineBarrier(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlags                        srcStageMask,
    VkPipelineStageFlags                        dstStageMask,
    VkDependencyFlags                           dependencyFlags,
    uint32_t                                    memoryBarrierCount,
    const VkMemoryBarrier*                      pMemoryBarriers,
    uint32_t                                    bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier*                pBufferMemoryBarriers,
    uint32_t                                    imageMemoryBarrierCount,
    const VkImageMemoryBarrier*                 pImageMemoryBarriers) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdPipelineBarrier) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdPipelineBarrier) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
    }
    DispatchCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
    for (auto intercept : layer_data->disp_post_rec_CmdPipelineBarrier) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBeginQuery(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query,
    VkQueryControlFlags                         flags) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBeginQuery) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBeginQuery(commandBuffer, queryPool, query, flags);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBeginQuery) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBeginQuery(commandBuffer, queryPool, query, flags);
    }
    DispatchCmdBeginQuery(commandBuffer, queryPool, query, flags);
    for (auto intercept : layer_data->disp_post_rec_CmdBeginQuery) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBeginQuery(commandBuffer, queryPool, query, flags);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdEndQuery(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdEndQuery) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdEndQuery(commandBuffer, queryPool, query);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdEndQuery) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdEndQuery(commandBuffer, queryPool, query);
    }
    DispatchCmdEndQuery(commandBuffer, queryPool, query);
    for (auto intercept : layer_data->disp_post_rec_CmdEndQuery) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdEndQuery(commandBuffer, queryPool, query);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdResetQueryPool(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdResetQueryPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdResetQueryPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
    }
    DispatchCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
    for (auto intercept : layer_data->disp_post_rec_CmdResetQueryPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdWriteTimestamp(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlagBits                     pipelineStage,
    VkQueryPool                                 queryPool,
    uint32_t                                    query) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdWriteTimestamp) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdWriteTimestamp) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
    }
    DispatchCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
    for (auto intercept : layer_data->disp_post_rec_CmdWriteTimestamp) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyQueryPoolResults(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    VkDeviceSize                                stride,
    VkQueryResultFlags                          flags) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyQueryPoolResults) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyQueryPoolResults) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
    }
    DispatchCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyQueryPoolResults) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdPushConstants(
    VkCommandBuffer                             commandBuffer,
    VkPipelineLayout                            layout,
    VkShaderStageFlags                          stageFlags,
    uint32_t                                    offset,
    uint32_t                                    size,
    const void*                                 pValues) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdPushConstants) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdPushConstants) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
    }
    DispatchCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
    for (auto intercept : layer_data->disp_post_rec_CmdPushConstants) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBeginRenderPass(
    VkCommandBuffer                             commandBuffer,
    const VkRenderPassBeginInfo*                pRenderPassBegin,
    VkSubpassContents                           contents) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBeginRenderPass) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBeginRenderPass) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
    }
    DispatchCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
    for (auto intercept : layer_data->disp_post_rec_CmdBeginRenderPass) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdNextSubpass(
    VkCommandBuffer                             commandBuffer,
    VkSubpassContents                           contents) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdNextSubpass) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdNextSubpass(commandBuffer, contents);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdNextSubpass) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdNextSubpass(commandBuffer, contents);
    }
    DispatchCmdNextSubpass(commandBuffer, contents);
    for (auto intercept : layer_data->disp_post_rec_CmdNextSubpass) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdNextSubpass(commandBuffer, contents);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdEndRenderPass(
    VkCommandBuffer                             commandBuffer) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdEndRenderPass) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdEndRenderPass(commandBuffer);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdEndRenderPass) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdEndRenderPass(commandBuffer);
    }
    DispatchCmdEndRenderPass(commandBuffer);
    for (auto intercept : layer_data->disp_post_rec_CmdEndRenderPass) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdEndRenderPass(commandBuffer);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdExecuteCommands(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    commandBufferCount,
    const VkCommandBuffer*                      pCommandBuffers) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdExecuteCommands) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdExecuteCommands) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
    }
    DispatchCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
    for (auto intercept : layer_data->disp_post_rec_CmdExecuteCommands) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
    }
}


VKAPI_ATTR VkResult VKAPI_CALL BindBufferMemory2(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    const VkBindBufferMemoryInfo*               pBindInfos) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_BindBufferMemory2) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateBindBufferMemory2(device, bindInfoCount, pBindInfos);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_BindBufferMemory2) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordBindBufferMemory2(device, bindInfoCount, pBindInfos);
    }
    VkResult result = DispatchBindBufferMemory2(device, bindInfoCount, pBindInfos);
    for (auto intercept : layer_data->disp_post_rec_BindBufferMemory2) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordBindBufferMemory2(device, bindInfoCount, pBindInfos, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL BindImageMemory2(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    const VkBindImageMemoryInfo*                pBindInfos) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_BindImageMemory2) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateBindImageMemory2(device, bindInfoCount, pBindInfos);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_BindImageMemory2) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordBindImageMemory2(device, bindInfoCount, pBindInfos);
    }
    VkResult result = DispatchBindImageMemory2(device, bindInfoCount, pBindInfos);
    for (auto intercept : layer_data->disp_post_rec_BindImageMemory2) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordBindImageMemory2(device, bindInfoCount, pBindInfos, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL GetDeviceGroupPeerMemoryFeatures(
    VkDevice                                    device,
    uint32_t                                    heapIndex,
    uint32_t                                    localDeviceIndex,
    uint32_t                                    remoteDeviceIndex,
    VkPeerMemoryFeatureFlags*                   pPeerMemoryFeatures) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceGroupPeerMemoryFeatures) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceGroupPeerMemoryFeatures) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
    }
    DispatchGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceGroupPeerMemoryFeatures) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetDeviceMask(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    deviceMask) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetDeviceMask) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetDeviceMask(commandBuffer, deviceMask);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetDeviceMask) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetDeviceMask(commandBuffer, deviceMask);
    }
    DispatchCmdSetDeviceMask(commandBuffer, deviceMask);
    for (auto intercept : layer_data->disp_post_rec_CmdSetDeviceMask) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetDeviceMask(commandBuffer, deviceMask);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDispatchBase(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    baseGroupX,
    uint32_t                                    baseGroupY,
    uint32_t                                    baseGroupZ,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDispatchBase) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDispatchBase) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    }
    DispatchCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    for (auto intercept : layer_data->disp_post_rec_CmdDispatchBase) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL EnumeratePhysicalDeviceGroups(
    VkInstance                                  instance,
    uint32_t*                                   pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties*            pPhysicalDeviceGroupProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
    }
    VkResult result = DispatchEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL GetImageMemoryRequirements2(
    VkDevice                                    device,
    const VkImageMemoryRequirementsInfo2*       pInfo,
    VkMemoryRequirements2*                      pMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetImageMemoryRequirements2) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetImageMemoryRequirements2) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
    }
    DispatchGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetImageMemoryRequirements2) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
    }
}

VKAPI_ATTR void VKAPI_CALL GetBufferMemoryRequirements2(
    VkDevice                                    device,
    const VkBufferMemoryRequirementsInfo2*      pInfo,
    VkMemoryRequirements2*                      pMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetBufferMemoryRequirements2) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetBufferMemoryRequirements2) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
    }
    DispatchGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetBufferMemoryRequirements2) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
    }
}

VKAPI_ATTR void VKAPI_CALL GetImageSparseMemoryRequirements2(
    VkDevice                                    device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t*                                   pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2*           pSparseMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetImageSparseMemoryRequirements2) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetImageSparseMemoryRequirements2) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }
    DispatchGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetImageSparseMemoryRequirements2) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFeatures2(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceFeatures2*                  pFeatures) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
    }
    DispatchGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceProperties2(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceProperties2*                pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceProperties2(physicalDevice, pProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceProperties2(physicalDevice, pProperties);
    }
    DispatchGetPhysicalDeviceProperties2(physicalDevice, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceProperties2(physicalDevice, pProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFormatProperties2(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkFormatProperties2*                        pFormatProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
    }
    DispatchGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceImageFormatProperties2(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2*     pImageFormatInfo,
    VkImageFormatProperties2*                   pImageFormatProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
    }
    VkResult result = DispatchGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyProperties2(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2*                   pQueueFamilyProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    }
    DispatchGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMemoryProperties2(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceMemoryProperties2*          pMemoryProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
    }
    DispatchGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSparseImageFormatProperties2(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t*                                   pPropertyCount,
    VkSparseImageFormatProperties2*             pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
    }
    DispatchGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL TrimCommandPool(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    VkCommandPoolTrimFlags                      flags) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_TrimCommandPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateTrimCommandPool(device, commandPool, flags);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_TrimCommandPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordTrimCommandPool(device, commandPool, flags);
    }
    DispatchTrimCommandPool(device, commandPool, flags);
    for (auto intercept : layer_data->disp_post_rec_TrimCommandPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordTrimCommandPool(device, commandPool, flags);
    }
}

VKAPI_ATTR void VKAPI_CALL GetDeviceQueue2(
    VkDevice                                    device,
    const VkDeviceQueueInfo2*                   pQueueInfo,
    VkQueue*                                    pQueue) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceQueue2) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceQueue2(device, pQueueInfo, pQueue);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceQueue2) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceQueue2(device, pQueueInfo, pQueue);
    }
    DispatchGetDeviceQueue2(device, pQueueInfo, pQueue);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceQueue2) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceQueue2(device, pQueueInfo, pQueue);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateSamplerYcbcrConversion(
    VkDevice                                    device,
    const VkSamplerYcbcrConversionCreateInfo*   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSamplerYcbcrConversion*                   pYcbcrConversion) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateSamplerYcbcrConversion) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateSamplerYcbcrConversion) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
    }
    VkResult result = DispatchCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
    for (auto intercept : layer_data->disp_post_rec_CreateSamplerYcbcrConversion) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroySamplerYcbcrConversion(
    VkDevice                                    device,
    VkSamplerYcbcrConversion                    ycbcrConversion,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroySamplerYcbcrConversion) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroySamplerYcbcrConversion) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
    }
    DispatchDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroySamplerYcbcrConversion) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateDescriptorUpdateTemplate(
    VkDevice                                    device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDescriptorUpdateTemplate*                 pDescriptorUpdateTemplate) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateDescriptorUpdateTemplate) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateDescriptorUpdateTemplate) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
    }
    VkResult result = DispatchCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
    for (auto intercept : layer_data->disp_post_rec_CreateDescriptorUpdateTemplate) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyDescriptorUpdateTemplate(
    VkDevice                                    device,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyDescriptorUpdateTemplate) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyDescriptorUpdateTemplate) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
    }
    DispatchDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyDescriptorUpdateTemplate) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
    }
}

VKAPI_ATTR void VKAPI_CALL UpdateDescriptorSetWithTemplate(
    VkDevice                                    device,
    VkDescriptorSet                             descriptorSet,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    const void*                                 pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_UpdateDescriptorSetWithTemplate) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_UpdateDescriptorSetWithTemplate) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
    }
    DispatchUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
    for (auto intercept : layer_data->disp_post_rec_UpdateDescriptorSetWithTemplate) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalBufferProperties(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo*   pExternalBufferInfo,
    VkExternalBufferProperties*                 pExternalBufferProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
    }
    DispatchGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalFenceProperties(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo*    pExternalFenceInfo,
    VkExternalFenceProperties*                  pExternalFenceProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
    }
    DispatchGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalSemaphoreProperties(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties*              pExternalSemaphoreProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
    }
    DispatchGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetDescriptorSetLayoutSupport(
    VkDevice                                    device,
    const VkDescriptorSetLayoutCreateInfo*      pCreateInfo,
    VkDescriptorSetLayoutSupport*               pSupport) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDescriptorSetLayoutSupport) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDescriptorSetLayoutSupport) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
    }
    DispatchGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
    for (auto intercept : layer_data->disp_post_rec_GetDescriptorSetLayoutSupport) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
    }
}


VKAPI_ATTR void VKAPI_CALL CmdDrawIndirectCount(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawIndirectCount) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawIndirectCount) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
    DispatchCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawIndirectCount) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDrawIndexedIndirectCount(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawIndexedIndirectCount) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawIndexedIndirectCount) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
    DispatchCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawIndexedIndirectCount) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateRenderPass2(
    VkDevice                                    device,
    const VkRenderPassCreateInfo2*              pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkRenderPass*                               pRenderPass) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateRenderPass2) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateRenderPass2) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
    }
    VkResult result = DispatchCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
    for (auto intercept : layer_data->disp_post_rec_CreateRenderPass2) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdBeginRenderPass2(
    VkCommandBuffer                             commandBuffer,
    const VkRenderPassBeginInfo*                pRenderPassBegin,
    const VkSubpassBeginInfo*                   pSubpassBeginInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBeginRenderPass2) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBeginRenderPass2) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
    }
    DispatchCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdBeginRenderPass2) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdNextSubpass2(
    VkCommandBuffer                             commandBuffer,
    const VkSubpassBeginInfo*                   pSubpassBeginInfo,
    const VkSubpassEndInfo*                     pSubpassEndInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdNextSubpass2) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdNextSubpass2) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
    }
    DispatchCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdNextSubpass2) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdEndRenderPass2(
    VkCommandBuffer                             commandBuffer,
    const VkSubpassEndInfo*                     pSubpassEndInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdEndRenderPass2) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdEndRenderPass2) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
    }
    DispatchCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdEndRenderPass2) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL ResetQueryPool(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ResetQueryPool) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateResetQueryPool(device, queryPool, firstQuery, queryCount);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_ResetQueryPool) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordResetQueryPool(device, queryPool, firstQuery, queryCount);
    }
    DispatchResetQueryPool(device, queryPool, firstQuery, queryCount);
    for (auto intercept : layer_data->disp_post_rec_ResetQueryPool) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordResetQueryPool(device, queryPool, firstQuery, queryCount);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetSemaphoreCounterValue(
    VkDevice                                    device,
    VkSemaphore                                 semaphore,
    uint64_t*                                   pValue) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetSemaphoreCounterValue) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetSemaphoreCounterValue(device, semaphore, pValue);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetSemaphoreCounterValue) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetSemaphoreCounterValue(device, semaphore, pValue);
    }
    VkResult result = DispatchGetSemaphoreCounterValue(device, semaphore, pValue);
    for (auto intercept : layer_data->disp_post_rec_GetSemaphoreCounterValue) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetSemaphoreCounterValue(device, semaphore, pValue, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL WaitSemaphores(
    VkDevice                                    device,
    const VkSemaphoreWaitInfo*                  pWaitInfo,
    uint64_t                                    timeout) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_WaitSemaphores) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateWaitSemaphores(device, pWaitInfo, timeout);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_WaitSemaphores) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordWaitSemaphores(device, pWaitInfo, timeout);
    }
    VkResult result = DispatchWaitSemaphores(device, pWaitInfo, timeout);
    for (auto intercept : layer_data->disp_post_rec_WaitSemaphores) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordWaitSemaphores(device, pWaitInfo, timeout, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL SignalSemaphore(
    VkDevice                                    device,
    const VkSemaphoreSignalInfo*                pSignalInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_SignalSemaphore) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateSignalSemaphore(device, pSignalInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_SignalSemaphore) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordSignalSemaphore(device, pSignalInfo);
    }
    VkResult result = DispatchSignalSemaphore(device, pSignalInfo);
    for (auto intercept : layer_data->disp_post_rec_SignalSemaphore) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordSignalSemaphore(device, pSignalInfo, result);
    }
    return result;
}

VKAPI_ATTR VkDeviceAddress VKAPI_CALL GetBufferDeviceAddress(
    VkDevice                                    device,
    const VkBufferDeviceAddressInfo*            pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetBufferDeviceAddress) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetBufferDeviceAddress(device, pInfo);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetBufferDeviceAddress) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetBufferDeviceAddress(device, pInfo);
    }
    VkDeviceAddress result = DispatchGetBufferDeviceAddress(device, pInfo);
    for (auto intercept : layer_data->disp_post_rec_GetBufferDeviceAddress) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetBufferDeviceAddress(device, pInfo, result);
    }
    return result;
}

VKAPI_ATTR uint64_t VKAPI_CALL GetBufferOpaqueCaptureAddress(
    VkDevice                                    device,
    const VkBufferDeviceAddressInfo*            pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetBufferOpaqueCaptureAddress) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetBufferOpaqueCaptureAddress(device, pInfo);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetBufferOpaqueCaptureAddress) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetBufferOpaqueCaptureAddress(device, pInfo);
    }
    uint64_t result = DispatchGetBufferOpaqueCaptureAddress(device, pInfo);
    for (auto intercept : layer_data->disp_post_rec_GetBufferOpaqueCaptureAddress) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetBufferOpaqueCaptureAddress(device, pInfo);
    }
    return result;
}

VKAPI_ATTR uint64_t VKAPI_CALL GetDeviceMemoryOpaqueCaptureAddress(
    VkDevice                                    device,
    const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceMemoryOpaqueCaptureAddress) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceMemoryOpaqueCaptureAddress) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
    }
    uint64_t result = DispatchGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceMemoryOpaqueCaptureAddress) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
    }
    return result;
}


VKAPI_ATTR void VKAPI_CALL DestroySurfaceKHR(
    VkInstance                                  instance,
    VkSurfaceKHR                                surface,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroySurfaceKHR(instance, surface, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroySurfaceKHR(instance, surface, pAllocator);
    }
    DispatchDestroySurfaceKHR(instance, surface, pAllocator);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroySurfaceKHR(instance, surface, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceSurfaceSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    VkSurfaceKHR                                surface,
    VkBool32*                                   pSupported) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
    }
    VkResult result = DispatchGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceSurfaceCapabilitiesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    VkSurfaceCapabilitiesKHR*                   pSurfaceCapabilities) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
    }
    VkResult result = DispatchGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceSurfaceFormatsKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    uint32_t*                                   pSurfaceFormatCount,
    VkSurfaceFormatKHR*                         pSurfaceFormats) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
    }
    VkResult result = DispatchGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceSurfacePresentModesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    uint32_t*                                   pPresentModeCount,
    VkPresentModeKHR*                           pPresentModes) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
    }
    VkResult result = DispatchGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes, result);
    }
    return result;
}


VKAPI_ATTR VkResult VKAPI_CALL CreateSwapchainKHR(
    VkDevice                                    device,
    const VkSwapchainCreateInfoKHR*             pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSwapchainKHR*                             pSwapchain) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateSwapchainKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateSwapchainKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
    }
    VkResult result = DispatchCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
    for (auto intercept : layer_data->disp_post_rec_CreateSwapchainKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroySwapchainKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroySwapchainKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroySwapchainKHR(device, swapchain, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroySwapchainKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroySwapchainKHR(device, swapchain, pAllocator);
    }
    DispatchDestroySwapchainKHR(device, swapchain, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroySwapchainKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroySwapchainKHR(device, swapchain, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetSwapchainImagesKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    uint32_t*                                   pSwapchainImageCount,
    VkImage*                                    pSwapchainImages) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetSwapchainImagesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetSwapchainImagesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
    }
    VkResult result = DispatchGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
    for (auto intercept : layer_data->disp_post_rec_GetSwapchainImagesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL AcquireNextImageKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    uint64_t                                    timeout,
    VkSemaphore                                 semaphore,
    VkFence                                     fence,
    uint32_t*                                   pImageIndex) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_AcquireNextImageKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_AcquireNextImageKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
    }
    VkResult result = DispatchAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
    for (auto intercept : layer_data->disp_post_rec_AcquireNextImageKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL QueuePresentKHR(
    VkQueue                                     queue,
    const VkPresentInfoKHR*                     pPresentInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(queue), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_QueuePresentKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateQueuePresentKHR(queue, pPresentInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_QueuePresentKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordQueuePresentKHR(queue, pPresentInfo);
    }
    VkResult result = DispatchQueuePresentKHR(queue, pPresentInfo);
    for (auto intercept : layer_data->disp_post_rec_QueuePresentKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordQueuePresentKHR(queue, pPresentInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetDeviceGroupPresentCapabilitiesKHR(
    VkDevice                                    device,
    VkDeviceGroupPresentCapabilitiesKHR*        pDeviceGroupPresentCapabilities) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceGroupPresentCapabilitiesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceGroupPresentCapabilitiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
    }
    VkResult result = DispatchGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceGroupPresentCapabilitiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetDeviceGroupSurfacePresentModesKHR(
    VkDevice                                    device,
    VkSurfaceKHR                                surface,
    VkDeviceGroupPresentModeFlagsKHR*           pModes) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceGroupSurfacePresentModesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceGroupSurfacePresentModesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
    }
    VkResult result = DispatchGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceGroupSurfacePresentModesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDevicePresentRectanglesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    uint32_t*                                   pRectCount,
    VkRect2D*                                   pRects) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
    }
    VkResult result = DispatchGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL AcquireNextImage2KHR(
    VkDevice                                    device,
    const VkAcquireNextImageInfoKHR*            pAcquireInfo,
    uint32_t*                                   pImageIndex) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_AcquireNextImage2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_AcquireNextImage2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
    }
    VkResult result = DispatchAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
    for (auto intercept : layer_data->disp_post_rec_AcquireNextImage2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex, result);
    }
    return result;
}


VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceDisplayPropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkDisplayPropertiesKHR*                     pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
    }
    VkResult result = DispatchGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceDisplayPlanePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkDisplayPlanePropertiesKHR*                pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
    }
    VkResult result = DispatchGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetDisplayPlaneSupportedDisplaysKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    planeIndex,
    uint32_t*                                   pDisplayCount,
    VkDisplayKHR*                               pDisplays) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
    }
    VkResult result = DispatchGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetDisplayModePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display,
    uint32_t*                                   pPropertyCount,
    VkDisplayModePropertiesKHR*                 pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
    }
    VkResult result = DispatchGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CreateDisplayModeKHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display,
    const VkDisplayModeCreateInfoKHR*           pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDisplayModeKHR*                           pMode) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
    }
    VkResult result = DispatchCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetDisplayPlaneCapabilitiesKHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayModeKHR                            mode,
    uint32_t                                    planeIndex,
    VkDisplayPlaneCapabilitiesKHR*              pCapabilities) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
    }
    VkResult result = DispatchGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CreateDisplayPlaneSurfaceKHR(
    VkInstance                                  instance,
    const VkDisplaySurfaceCreateInfoKHR*        pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}


VKAPI_ATTR VkResult VKAPI_CALL CreateSharedSwapchainsKHR(
    VkDevice                                    device,
    uint32_t                                    swapchainCount,
    const VkSwapchainCreateInfoKHR*             pCreateInfos,
    const VkAllocationCallbacks*                pAllocator,
    VkSwapchainKHR*                             pSwapchains) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateSharedSwapchainsKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateSharedSwapchainsKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
    }
    VkResult result = DispatchCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
    for (auto intercept : layer_data->disp_post_rec_CreateSharedSwapchainsKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains, result);
    }
    return result;
}

#ifdef VK_USE_PLATFORM_XLIB_KHR

VKAPI_ATTR VkResult VKAPI_CALL CreateXlibSurfaceKHR(
    VkInstance                                  instance,
    const VkXlibSurfaceCreateInfoKHR*           pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}

VKAPI_ATTR VkBool32 VKAPI_CALL GetPhysicalDeviceXlibPresentationSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    Display*                                    dpy,
    VisualID                                    visualID) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
        if (skip) return VK_FALSE;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
    }
    VkBool32 result = DispatchGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
    }
    return result;
}
#endif // VK_USE_PLATFORM_XLIB_KHR

#ifdef VK_USE_PLATFORM_XCB_KHR

VKAPI_ATTR VkResult VKAPI_CALL CreateXcbSurfaceKHR(
    VkInstance                                  instance,
    const VkXcbSurfaceCreateInfoKHR*            pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}

VKAPI_ATTR VkBool32 VKAPI_CALL GetPhysicalDeviceXcbPresentationSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    xcb_connection_t*                           connection,
    xcb_visualid_t                              visual_id) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
        if (skip) return VK_FALSE;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
    }
    VkBool32 result = DispatchGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
    }
    return result;
}
#endif // VK_USE_PLATFORM_XCB_KHR

#ifdef VK_USE_PLATFORM_WAYLAND_KHR

VKAPI_ATTR VkResult VKAPI_CALL CreateWaylandSurfaceKHR(
    VkInstance                                  instance,
    const VkWaylandSurfaceCreateInfoKHR*        pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}

VKAPI_ATTR VkBool32 VKAPI_CALL GetPhysicalDeviceWaylandPresentationSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    struct wl_display*                          display) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
        if (skip) return VK_FALSE;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
    }
    VkBool32 result = DispatchGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
    }
    return result;
}
#endif // VK_USE_PLATFORM_WAYLAND_KHR

#ifdef VK_USE_PLATFORM_ANDROID_KHR

VKAPI_ATTR VkResult VKAPI_CALL CreateAndroidSurfaceKHR(
    VkInstance                                  instance,
    const VkAndroidSurfaceCreateInfoKHR*        pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_ANDROID_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR

VKAPI_ATTR VkResult VKAPI_CALL CreateWin32SurfaceKHR(
    VkInstance                                  instance,
    const VkWin32SurfaceCreateInfoKHR*          pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}

VKAPI_ATTR VkBool32 VKAPI_CALL GetPhysicalDeviceWin32PresentationSupportKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
        if (skip) return VK_FALSE;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
    }
    VkBool32 result = DispatchGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
    }
    return result;
}
#endif // VK_USE_PLATFORM_WIN32_KHR




VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFeatures2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceFeatures2*                  pFeatures) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
    }
    DispatchGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceProperties2*                pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
    }
    DispatchGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFormatProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkFormatProperties2*                        pFormatProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
    }
    DispatchGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceImageFormatProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2*     pImageFormatInfo,
    VkImageFormatProperties2*                   pImageFormatProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
    }
    VkResult result = DispatchGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2*                   pQueueFamilyProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    }
    DispatchGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMemoryProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkPhysicalDeviceMemoryProperties2*          pMemoryProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
    }
    DispatchGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSparseImageFormatProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t*                                   pPropertyCount,
    VkSparseImageFormatProperties2*             pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
    }
    DispatchGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
    }
}


VKAPI_ATTR void VKAPI_CALL GetDeviceGroupPeerMemoryFeaturesKHR(
    VkDevice                                    device,
    uint32_t                                    heapIndex,
    uint32_t                                    localDeviceIndex,
    uint32_t                                    remoteDeviceIndex,
    VkPeerMemoryFeatureFlags*                   pPeerMemoryFeatures) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceGroupPeerMemoryFeaturesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceGroupPeerMemoryFeaturesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
    }
    DispatchGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceGroupPeerMemoryFeaturesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetDeviceMaskKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    deviceMask) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetDeviceMaskKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetDeviceMaskKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
    }
    DispatchCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
    for (auto intercept : layer_data->disp_post_rec_CmdSetDeviceMaskKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDispatchBaseKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    baseGroupX,
    uint32_t                                    baseGroupY,
    uint32_t                                    baseGroupZ,
    uint32_t                                    groupCountX,
    uint32_t                                    groupCountY,
    uint32_t                                    groupCountZ) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDispatchBaseKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDispatchBaseKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    }
    DispatchCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    for (auto intercept : layer_data->disp_post_rec_CmdDispatchBaseKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    }
}



VKAPI_ATTR void VKAPI_CALL TrimCommandPoolKHR(
    VkDevice                                    device,
    VkCommandPool                               commandPool,
    VkCommandPoolTrimFlags                      flags) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_TrimCommandPoolKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateTrimCommandPoolKHR(device, commandPool, flags);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_TrimCommandPoolKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordTrimCommandPoolKHR(device, commandPool, flags);
    }
    DispatchTrimCommandPoolKHR(device, commandPool, flags);
    for (auto intercept : layer_data->disp_post_rec_TrimCommandPoolKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordTrimCommandPoolKHR(device, commandPool, flags);
    }
}


VKAPI_ATTR VkResult VKAPI_CALL EnumeratePhysicalDeviceGroupsKHR(
    VkInstance                                  instance,
    uint32_t*                                   pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties*            pPhysicalDeviceGroupProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
    }
    VkResult result = DispatchEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties, result);
    }
    return result;
}


VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalBufferPropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo*   pExternalBufferInfo,
    VkExternalBufferProperties*                 pExternalBufferProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
    }
    DispatchGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
    }
}


#ifdef VK_USE_PLATFORM_WIN32_KHR

VKAPI_ATTR VkResult VKAPI_CALL GetMemoryWin32HandleKHR(
    VkDevice                                    device,
    const VkMemoryGetWin32HandleInfoKHR*        pGetWin32HandleInfo,
    HANDLE*                                     pHandle) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetMemoryWin32HandleKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetMemoryWin32HandleKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
    }
    VkResult result = DispatchGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
    for (auto intercept : layer_data->disp_post_rec_GetMemoryWin32HandleKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetMemoryWin32HandlePropertiesKHR(
    VkDevice                                    device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    HANDLE                                      handle,
    VkMemoryWin32HandlePropertiesKHR*           pMemoryWin32HandleProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetMemoryWin32HandlePropertiesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetMemoryWin32HandlePropertiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
    }
    VkResult result = DispatchGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
    for (auto intercept : layer_data->disp_post_rec_GetMemoryWin32HandlePropertiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_WIN32_KHR


VKAPI_ATTR VkResult VKAPI_CALL GetMemoryFdKHR(
    VkDevice                                    device,
    const VkMemoryGetFdInfoKHR*                 pGetFdInfo,
    int*                                        pFd) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetMemoryFdKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetMemoryFdKHR(device, pGetFdInfo, pFd);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetMemoryFdKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetMemoryFdKHR(device, pGetFdInfo, pFd);
    }
    VkResult result = DispatchGetMemoryFdKHR(device, pGetFdInfo, pFd);
    for (auto intercept : layer_data->disp_post_rec_GetMemoryFdKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetMemoryFdKHR(device, pGetFdInfo, pFd, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetMemoryFdPropertiesKHR(
    VkDevice                                    device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    int                                         fd,
    VkMemoryFdPropertiesKHR*                    pMemoryFdProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetMemoryFdPropertiesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetMemoryFdPropertiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
    }
    VkResult result = DispatchGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
    for (auto intercept : layer_data->disp_post_rec_GetMemoryFdPropertiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties, result);
    }
    return result;
}

#ifdef VK_USE_PLATFORM_WIN32_KHR
#endif // VK_USE_PLATFORM_WIN32_KHR


VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalSemaphorePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties*              pExternalSemaphoreProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
    }
    DispatchGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
    }
}


#ifdef VK_USE_PLATFORM_WIN32_KHR

VKAPI_ATTR VkResult VKAPI_CALL ImportSemaphoreWin32HandleKHR(
    VkDevice                                    device,
    const VkImportSemaphoreWin32HandleInfoKHR*  pImportSemaphoreWin32HandleInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ImportSemaphoreWin32HandleKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ImportSemaphoreWin32HandleKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
    }
    VkResult result = DispatchImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
    for (auto intercept : layer_data->disp_post_rec_ImportSemaphoreWin32HandleKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetSemaphoreWin32HandleKHR(
    VkDevice                                    device,
    const VkSemaphoreGetWin32HandleInfoKHR*     pGetWin32HandleInfo,
    HANDLE*                                     pHandle) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetSemaphoreWin32HandleKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetSemaphoreWin32HandleKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
    }
    VkResult result = DispatchGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
    for (auto intercept : layer_data->disp_post_rec_GetSemaphoreWin32HandleKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_WIN32_KHR


VKAPI_ATTR VkResult VKAPI_CALL ImportSemaphoreFdKHR(
    VkDevice                                    device,
    const VkImportSemaphoreFdInfoKHR*           pImportSemaphoreFdInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ImportSemaphoreFdKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ImportSemaphoreFdKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
    }
    VkResult result = DispatchImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
    for (auto intercept : layer_data->disp_post_rec_ImportSemaphoreFdKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetSemaphoreFdKHR(
    VkDevice                                    device,
    const VkSemaphoreGetFdInfoKHR*              pGetFdInfo,
    int*                                        pFd) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetSemaphoreFdKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetSemaphoreFdKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
    }
    VkResult result = DispatchGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
    for (auto intercept : layer_data->disp_post_rec_GetSemaphoreFdKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetSemaphoreFdKHR(device, pGetFdInfo, pFd, result);
    }
    return result;
}


VKAPI_ATTR void VKAPI_CALL CmdPushDescriptorSetKHR(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipelineLayout                            layout,
    uint32_t                                    set,
    uint32_t                                    descriptorWriteCount,
    const VkWriteDescriptorSet*                 pDescriptorWrites) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdPushDescriptorSetKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdPushDescriptorSetKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
    }
    DispatchCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
    for (auto intercept : layer_data->disp_post_rec_CmdPushDescriptorSetKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdPushDescriptorSetWithTemplateKHR(
    VkCommandBuffer                             commandBuffer,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    VkPipelineLayout                            layout,
    uint32_t                                    set,
    const void*                                 pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdPushDescriptorSetWithTemplateKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdPushDescriptorSetWithTemplateKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
    }
    DispatchCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
    for (auto intercept : layer_data->disp_post_rec_CmdPushDescriptorSetWithTemplateKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
    }
}





VKAPI_ATTR VkResult VKAPI_CALL CreateDescriptorUpdateTemplateKHR(
    VkDevice                                    device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDescriptorUpdateTemplate*                 pDescriptorUpdateTemplate) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateDescriptorUpdateTemplateKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateDescriptorUpdateTemplateKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
    }
    VkResult result = DispatchCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
    for (auto intercept : layer_data->disp_post_rec_CreateDescriptorUpdateTemplateKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyDescriptorUpdateTemplateKHR(
    VkDevice                                    device,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyDescriptorUpdateTemplateKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyDescriptorUpdateTemplateKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
    }
    DispatchDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyDescriptorUpdateTemplateKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
    }
}

VKAPI_ATTR void VKAPI_CALL UpdateDescriptorSetWithTemplateKHR(
    VkDevice                                    device,
    VkDescriptorSet                             descriptorSet,
    VkDescriptorUpdateTemplate                  descriptorUpdateTemplate,
    const void*                                 pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_UpdateDescriptorSetWithTemplateKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_UpdateDescriptorSetWithTemplateKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
    }
    DispatchUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
    for (auto intercept : layer_data->disp_post_rec_UpdateDescriptorSetWithTemplateKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
    }
}



VKAPI_ATTR VkResult VKAPI_CALL CreateRenderPass2KHR(
    VkDevice                                    device,
    const VkRenderPassCreateInfo2*              pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkRenderPass*                               pRenderPass) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateRenderPass2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateRenderPass2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
    }
    VkResult result = DispatchCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
    for (auto intercept : layer_data->disp_post_rec_CreateRenderPass2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdBeginRenderPass2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkRenderPassBeginInfo*                pRenderPassBegin,
    const VkSubpassBeginInfo*                   pSubpassBeginInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBeginRenderPass2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBeginRenderPass2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
    }
    DispatchCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdBeginRenderPass2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdNextSubpass2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkSubpassBeginInfo*                   pSubpassBeginInfo,
    const VkSubpassEndInfo*                     pSubpassEndInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdNextSubpass2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdNextSubpass2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
    }
    DispatchCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdNextSubpass2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdEndRenderPass2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkSubpassEndInfo*                     pSubpassEndInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdEndRenderPass2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdEndRenderPass2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
    }
    DispatchCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdEndRenderPass2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
    }
}


VKAPI_ATTR VkResult VKAPI_CALL GetSwapchainStatusKHR(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetSwapchainStatusKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetSwapchainStatusKHR(device, swapchain);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetSwapchainStatusKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetSwapchainStatusKHR(device, swapchain);
    }
    VkResult result = DispatchGetSwapchainStatusKHR(device, swapchain);
    for (auto intercept : layer_data->disp_post_rec_GetSwapchainStatusKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetSwapchainStatusKHR(device, swapchain, result);
    }
    return result;
}


VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalFencePropertiesKHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo*    pExternalFenceInfo,
    VkExternalFenceProperties*                  pExternalFenceProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
    }
    DispatchGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
    }
}


#ifdef VK_USE_PLATFORM_WIN32_KHR

VKAPI_ATTR VkResult VKAPI_CALL ImportFenceWin32HandleKHR(
    VkDevice                                    device,
    const VkImportFenceWin32HandleInfoKHR*      pImportFenceWin32HandleInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ImportFenceWin32HandleKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ImportFenceWin32HandleKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
    }
    VkResult result = DispatchImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
    for (auto intercept : layer_data->disp_post_rec_ImportFenceWin32HandleKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetFenceWin32HandleKHR(
    VkDevice                                    device,
    const VkFenceGetWin32HandleInfoKHR*         pGetWin32HandleInfo,
    HANDLE*                                     pHandle) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetFenceWin32HandleKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetFenceWin32HandleKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
    }
    VkResult result = DispatchGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
    for (auto intercept : layer_data->disp_post_rec_GetFenceWin32HandleKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_WIN32_KHR


VKAPI_ATTR VkResult VKAPI_CALL ImportFenceFdKHR(
    VkDevice                                    device,
    const VkImportFenceFdInfoKHR*               pImportFenceFdInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ImportFenceFdKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateImportFenceFdKHR(device, pImportFenceFdInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ImportFenceFdKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordImportFenceFdKHR(device, pImportFenceFdInfo);
    }
    VkResult result = DispatchImportFenceFdKHR(device, pImportFenceFdInfo);
    for (auto intercept : layer_data->disp_post_rec_ImportFenceFdKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordImportFenceFdKHR(device, pImportFenceFdInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetFenceFdKHR(
    VkDevice                                    device,
    const VkFenceGetFdInfoKHR*                  pGetFdInfo,
    int*                                        pFd) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetFenceFdKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetFenceFdKHR(device, pGetFdInfo, pFd);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetFenceFdKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetFenceFdKHR(device, pGetFdInfo, pFd);
    }
    VkResult result = DispatchGetFenceFdKHR(device, pGetFdInfo, pFd);
    for (auto intercept : layer_data->disp_post_rec_GetFenceFdKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetFenceFdKHR(device, pGetFdInfo, pFd, result);
    }
    return result;
}


VKAPI_ATTR VkResult VKAPI_CALL EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    uint32_t*                                   pCounterCount,
    VkPerformanceCounterKHR*                    pCounters,
    VkPerformanceCounterDescriptionKHR*         pCounterDescriptions) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
    }
    VkResult result = DispatchEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
    VkPhysicalDevice                            physicalDevice,
    const VkQueryPoolPerformanceCreateInfoKHR*  pPerformanceQueryCreateInfo,
    uint32_t*                                   pNumPasses) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
    }
    DispatchGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL AcquireProfilingLockKHR(
    VkDevice                                    device,
    const VkAcquireProfilingLockInfoKHR*        pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_AcquireProfilingLockKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateAcquireProfilingLockKHR(device, pInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_AcquireProfilingLockKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordAcquireProfilingLockKHR(device, pInfo);
    }
    VkResult result = DispatchAcquireProfilingLockKHR(device, pInfo);
    for (auto intercept : layer_data->disp_post_rec_AcquireProfilingLockKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordAcquireProfilingLockKHR(device, pInfo, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL ReleaseProfilingLockKHR(
    VkDevice                                    device) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ReleaseProfilingLockKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateReleaseProfilingLockKHR(device);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_ReleaseProfilingLockKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordReleaseProfilingLockKHR(device);
    }
    DispatchReleaseProfilingLockKHR(device);
    for (auto intercept : layer_data->disp_post_rec_ReleaseProfilingLockKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordReleaseProfilingLockKHR(device);
    }
}



VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceSurfaceCapabilities2KHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR*      pSurfaceInfo,
    VkSurfaceCapabilities2KHR*                  pSurfaceCapabilities) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
    }
    VkResult result = DispatchGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceSurfaceFormats2KHR(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR*      pSurfaceInfo,
    uint32_t*                                   pSurfaceFormatCount,
    VkSurfaceFormat2KHR*                        pSurfaceFormats) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
    }
    VkResult result = DispatchGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats, result);
    }
    return result;
}



VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceDisplayProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkDisplayProperties2KHR*                    pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
    }
    VkResult result = DispatchGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceDisplayPlaneProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkDisplayPlaneProperties2KHR*               pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
    }
    VkResult result = DispatchGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetDisplayModeProperties2KHR(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display,
    uint32_t*                                   pPropertyCount,
    VkDisplayModeProperties2KHR*                pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
    }
    VkResult result = DispatchGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetDisplayPlaneCapabilities2KHR(
    VkPhysicalDevice                            physicalDevice,
    const VkDisplayPlaneInfo2KHR*               pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR*             pCapabilities) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
    }
    VkResult result = DispatchGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities, result);
    }
    return result;
}





VKAPI_ATTR void VKAPI_CALL GetImageMemoryRequirements2KHR(
    VkDevice                                    device,
    const VkImageMemoryRequirementsInfo2*       pInfo,
    VkMemoryRequirements2*                      pMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetImageMemoryRequirements2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetImageMemoryRequirements2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
    }
    DispatchGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetImageMemoryRequirements2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
    }
}

VKAPI_ATTR void VKAPI_CALL GetBufferMemoryRequirements2KHR(
    VkDevice                                    device,
    const VkBufferMemoryRequirementsInfo2*      pInfo,
    VkMemoryRequirements2*                      pMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetBufferMemoryRequirements2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetBufferMemoryRequirements2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
    }
    DispatchGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetBufferMemoryRequirements2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
    }
}

VKAPI_ATTR void VKAPI_CALL GetImageSparseMemoryRequirements2KHR(
    VkDevice                                    device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t*                                   pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2*           pSparseMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetImageSparseMemoryRequirements2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetImageSparseMemoryRequirements2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }
    DispatchGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetImageSparseMemoryRequirements2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }
}



VKAPI_ATTR VkResult VKAPI_CALL CreateSamplerYcbcrConversionKHR(
    VkDevice                                    device,
    const VkSamplerYcbcrConversionCreateInfo*   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSamplerYcbcrConversion*                   pYcbcrConversion) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateSamplerYcbcrConversionKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateSamplerYcbcrConversionKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
    }
    VkResult result = DispatchCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
    for (auto intercept : layer_data->disp_post_rec_CreateSamplerYcbcrConversionKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroySamplerYcbcrConversionKHR(
    VkDevice                                    device,
    VkSamplerYcbcrConversion                    ycbcrConversion,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroySamplerYcbcrConversionKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroySamplerYcbcrConversionKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
    }
    DispatchDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroySamplerYcbcrConversionKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
    }
}


VKAPI_ATTR VkResult VKAPI_CALL BindBufferMemory2KHR(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    const VkBindBufferMemoryInfo*               pBindInfos) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_BindBufferMemory2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_BindBufferMemory2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
    }
    VkResult result = DispatchBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
    for (auto intercept : layer_data->disp_post_rec_BindBufferMemory2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordBindBufferMemory2KHR(device, bindInfoCount, pBindInfos, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL BindImageMemory2KHR(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    const VkBindImageMemoryInfo*                pBindInfos) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_BindImageMemory2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_BindImageMemory2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
    }
    VkResult result = DispatchBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
    for (auto intercept : layer_data->disp_post_rec_BindImageMemory2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordBindImageMemory2KHR(device, bindInfoCount, pBindInfos, result);
    }
    return result;
}

#ifdef VK_ENABLE_BETA_EXTENSIONS
#endif // VK_ENABLE_BETA_EXTENSIONS


VKAPI_ATTR void VKAPI_CALL GetDescriptorSetLayoutSupportKHR(
    VkDevice                                    device,
    const VkDescriptorSetLayoutCreateInfo*      pCreateInfo,
    VkDescriptorSetLayoutSupport*               pSupport) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDescriptorSetLayoutSupportKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDescriptorSetLayoutSupportKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
    }
    DispatchGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
    for (auto intercept : layer_data->disp_post_rec_GetDescriptorSetLayoutSupportKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
    }
}


VKAPI_ATTR void VKAPI_CALL CmdDrawIndirectCountKHR(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawIndirectCountKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawIndirectCountKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
    DispatchCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawIndirectCountKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDrawIndexedIndirectCountKHR(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawIndexedIndirectCountKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawIndexedIndirectCountKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
    DispatchCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawIndexedIndirectCountKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
}










VKAPI_ATTR VkResult VKAPI_CALL GetSemaphoreCounterValueKHR(
    VkDevice                                    device,
    VkSemaphore                                 semaphore,
    uint64_t*                                   pValue) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetSemaphoreCounterValueKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetSemaphoreCounterValueKHR(device, semaphore, pValue);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetSemaphoreCounterValueKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetSemaphoreCounterValueKHR(device, semaphore, pValue);
    }
    VkResult result = DispatchGetSemaphoreCounterValueKHR(device, semaphore, pValue);
    for (auto intercept : layer_data->disp_post_rec_GetSemaphoreCounterValueKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetSemaphoreCounterValueKHR(device, semaphore, pValue, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL WaitSemaphoresKHR(
    VkDevice                                    device,
    const VkSemaphoreWaitInfo*                  pWaitInfo,
    uint64_t                                    timeout) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_WaitSemaphoresKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateWaitSemaphoresKHR(device, pWaitInfo, timeout);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_WaitSemaphoresKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordWaitSemaphoresKHR(device, pWaitInfo, timeout);
    }
    VkResult result = DispatchWaitSemaphoresKHR(device, pWaitInfo, timeout);
    for (auto intercept : layer_data->disp_post_rec_WaitSemaphoresKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordWaitSemaphoresKHR(device, pWaitInfo, timeout, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL SignalSemaphoreKHR(
    VkDevice                                    device,
    const VkSemaphoreSignalInfo*                pSignalInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_SignalSemaphoreKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateSignalSemaphoreKHR(device, pSignalInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_SignalSemaphoreKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordSignalSemaphoreKHR(device, pSignalInfo);
    }
    VkResult result = DispatchSignalSemaphoreKHR(device, pSignalInfo);
    for (auto intercept : layer_data->disp_post_rec_SignalSemaphoreKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordSignalSemaphoreKHR(device, pSignalInfo, result);
    }
    return result;
}




VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceFragmentShadingRatesKHR(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pFragmentShadingRateCount,
    VkPhysicalDeviceFragmentShadingRateKHR*     pFragmentShadingRates) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
    }
    VkResult result = DispatchGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdSetFragmentShadingRateKHR(
    VkCommandBuffer                             commandBuffer,
    const VkExtent2D*                           pFragmentSize,
    const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetFragmentShadingRateKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetFragmentShadingRateKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
    }
    DispatchCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
    for (auto intercept : layer_data->disp_post_rec_CmdSetFragmentShadingRateKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
    }
}






VKAPI_ATTR VkDeviceAddress VKAPI_CALL GetBufferDeviceAddressKHR(
    VkDevice                                    device,
    const VkBufferDeviceAddressInfo*            pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetBufferDeviceAddressKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetBufferDeviceAddressKHR(device, pInfo);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetBufferDeviceAddressKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetBufferDeviceAddressKHR(device, pInfo);
    }
    VkDeviceAddress result = DispatchGetBufferDeviceAddressKHR(device, pInfo);
    for (auto intercept : layer_data->disp_post_rec_GetBufferDeviceAddressKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetBufferDeviceAddressKHR(device, pInfo, result);
    }
    return result;
}

VKAPI_ATTR uint64_t VKAPI_CALL GetBufferOpaqueCaptureAddressKHR(
    VkDevice                                    device,
    const VkBufferDeviceAddressInfo*            pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetBufferOpaqueCaptureAddressKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetBufferOpaqueCaptureAddressKHR(device, pInfo);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetBufferOpaqueCaptureAddressKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetBufferOpaqueCaptureAddressKHR(device, pInfo);
    }
    uint64_t result = DispatchGetBufferOpaqueCaptureAddressKHR(device, pInfo);
    for (auto intercept : layer_data->disp_post_rec_GetBufferOpaqueCaptureAddressKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetBufferOpaqueCaptureAddressKHR(device, pInfo);
    }
    return result;
}

VKAPI_ATTR uint64_t VKAPI_CALL GetDeviceMemoryOpaqueCaptureAddressKHR(
    VkDevice                                    device,
    const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceMemoryOpaqueCaptureAddressKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceMemoryOpaqueCaptureAddressKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
    }
    uint64_t result = DispatchGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceMemoryOpaqueCaptureAddressKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
    }
    return result;
}


VKAPI_ATTR VkResult VKAPI_CALL CreateDeferredOperationKHR(
    VkDevice                                    device,
    const VkAllocationCallbacks*                pAllocator,
    VkDeferredOperationKHR*                     pDeferredOperation) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateDeferredOperationKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateDeferredOperationKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
    }
    VkResult result = DispatchCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
    for (auto intercept : layer_data->disp_post_rec_CreateDeferredOperationKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyDeferredOperationKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      operation,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyDeferredOperationKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyDeferredOperationKHR(device, operation, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyDeferredOperationKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyDeferredOperationKHR(device, operation, pAllocator);
    }
    DispatchDestroyDeferredOperationKHR(device, operation, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyDeferredOperationKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyDeferredOperationKHR(device, operation, pAllocator);
    }
}

VKAPI_ATTR uint32_t VKAPI_CALL GetDeferredOperationMaxConcurrencyKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      operation) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeferredOperationMaxConcurrencyKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeferredOperationMaxConcurrencyKHR(device, operation);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeferredOperationMaxConcurrencyKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeferredOperationMaxConcurrencyKHR(device, operation);
    }
    uint32_t result = DispatchGetDeferredOperationMaxConcurrencyKHR(device, operation);
    for (auto intercept : layer_data->disp_post_rec_GetDeferredOperationMaxConcurrencyKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeferredOperationMaxConcurrencyKHR(device, operation);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetDeferredOperationResultKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      operation) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeferredOperationResultKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeferredOperationResultKHR(device, operation);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeferredOperationResultKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeferredOperationResultKHR(device, operation);
    }
    VkResult result = DispatchGetDeferredOperationResultKHR(device, operation);
    for (auto intercept : layer_data->disp_post_rec_GetDeferredOperationResultKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeferredOperationResultKHR(device, operation, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL DeferredOperationJoinKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      operation) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DeferredOperationJoinKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDeferredOperationJoinKHR(device, operation);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_DeferredOperationJoinKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDeferredOperationJoinKHR(device, operation);
    }
    VkResult result = DispatchDeferredOperationJoinKHR(device, operation);
    for (auto intercept : layer_data->disp_post_rec_DeferredOperationJoinKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDeferredOperationJoinKHR(device, operation, result);
    }
    return result;
}


VKAPI_ATTR VkResult VKAPI_CALL GetPipelineExecutablePropertiesKHR(
    VkDevice                                    device,
    const VkPipelineInfoKHR*                    pPipelineInfo,
    uint32_t*                                   pExecutableCount,
    VkPipelineExecutablePropertiesKHR*          pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetPipelineExecutablePropertiesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetPipelineExecutablePropertiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
    }
    VkResult result = DispatchGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
    for (auto intercept : layer_data->disp_post_rec_GetPipelineExecutablePropertiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPipelineExecutableStatisticsKHR(
    VkDevice                                    device,
    const VkPipelineExecutableInfoKHR*          pExecutableInfo,
    uint32_t*                                   pStatisticCount,
    VkPipelineExecutableStatisticKHR*           pStatistics) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetPipelineExecutableStatisticsKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetPipelineExecutableStatisticsKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
    }
    VkResult result = DispatchGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
    for (auto intercept : layer_data->disp_post_rec_GetPipelineExecutableStatisticsKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPipelineExecutableInternalRepresentationsKHR(
    VkDevice                                    device,
    const VkPipelineExecutableInfoKHR*          pExecutableInfo,
    uint32_t*                                   pInternalRepresentationCount,
    VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetPipelineExecutableInternalRepresentationsKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetPipelineExecutableInternalRepresentationsKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
    }
    VkResult result = DispatchGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
    for (auto intercept : layer_data->disp_post_rec_GetPipelineExecutableInternalRepresentationsKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations, result);
    }
    return result;
}




VKAPI_ATTR void VKAPI_CALL CmdCopyBuffer2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkCopyBufferInfo2KHR*                 pCopyBufferInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyBuffer2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyBuffer2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
    }
    DispatchCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyBuffer2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyImage2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkCopyImageInfo2KHR*                  pCopyImageInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyImage2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyImage2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
    }
    DispatchCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyImage2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyBufferToImage2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkCopyBufferToImageInfo2KHR*          pCopyBufferToImageInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyBufferToImage2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyBufferToImage2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
    }
    DispatchCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyBufferToImage2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyImageToBuffer2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkCopyImageToBufferInfo2KHR*          pCopyImageToBufferInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyImageToBuffer2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyImageToBuffer2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
    }
    DispatchCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyImageToBuffer2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBlitImage2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkBlitImageInfo2KHR*                  pBlitImageInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBlitImage2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBlitImage2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
    }
    DispatchCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdBlitImage2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdResolveImage2KHR(
    VkCommandBuffer                             commandBuffer,
    const VkResolveImageInfo2KHR*               pResolveImageInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdResolveImage2KHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdResolveImage2KHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
    }
    DispatchCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdResolveImage2KHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
    }
}


VKAPI_ATTR VkResult VKAPI_CALL CreateDebugReportCallbackEXT(
    VkInstance                                  instance,
    const VkDebugReportCallbackCreateInfoEXT*   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDebugReportCallbackEXT*                   pCallback) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
    }
    VkResult result = DispatchCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
    layer_create_report_callback(layer_data->report_data, false, pCreateInfo, pAllocator, pCallback);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyDebugReportCallbackEXT(
    VkInstance                                  instance,
    VkDebugReportCallbackEXT                    callback,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
    }
    DispatchDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
    layer_destroy_callback(layer_data->report_data, callback, pAllocator);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
    }
}

VKAPI_ATTR void VKAPI_CALL DebugReportMessageEXT(
    VkInstance                                  instance,
    VkDebugReportFlagsEXT                       flags,
    VkDebugReportObjectTypeEXT                  objectType,
    uint64_t                                    object,
    size_t                                      location,
    int32_t                                     messageCode,
    const char*                                 pLayerPrefix,
    const char*                                 pMessage) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
    }
    DispatchDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
    }
}








VKAPI_ATTR VkResult VKAPI_CALL DebugMarkerSetObjectTagEXT(
    VkDevice                                    device,
    const VkDebugMarkerObjectTagInfoEXT*        pTagInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DebugMarkerSetObjectTagEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDebugMarkerSetObjectTagEXT(device, pTagInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_DebugMarkerSetObjectTagEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDebugMarkerSetObjectTagEXT(device, pTagInfo);
    }
    VkResult result = DispatchDebugMarkerSetObjectTagEXT(device, pTagInfo);
    for (auto intercept : layer_data->disp_post_rec_DebugMarkerSetObjectTagEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDebugMarkerSetObjectTagEXT(device, pTagInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL DebugMarkerSetObjectNameEXT(
    VkDevice                                    device,
    const VkDebugMarkerObjectNameInfoEXT*       pNameInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DebugMarkerSetObjectNameEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDebugMarkerSetObjectNameEXT(device, pNameInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_DebugMarkerSetObjectNameEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDebugMarkerSetObjectNameEXT(device, pNameInfo);
    }
    layer_data->report_data->DebugReportSetMarkerObjectName(pNameInfo);
    VkResult result = DispatchDebugMarkerSetObjectNameEXT(device, pNameInfo);
    for (auto intercept : layer_data->disp_post_rec_DebugMarkerSetObjectNameEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDebugMarkerSetObjectNameEXT(device, pNameInfo, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdDebugMarkerBeginEXT(
    VkCommandBuffer                             commandBuffer,
    const VkDebugMarkerMarkerInfoEXT*           pMarkerInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDebugMarkerBeginEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDebugMarkerBeginEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
    }
    DispatchCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdDebugMarkerBeginEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDebugMarkerEndEXT(
    VkCommandBuffer                             commandBuffer) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDebugMarkerEndEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDebugMarkerEndEXT(commandBuffer);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDebugMarkerEndEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDebugMarkerEndEXT(commandBuffer);
    }
    DispatchCmdDebugMarkerEndEXT(commandBuffer);
    for (auto intercept : layer_data->disp_post_rec_CmdDebugMarkerEndEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDebugMarkerEndEXT(commandBuffer);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDebugMarkerInsertEXT(
    VkCommandBuffer                             commandBuffer,
    const VkDebugMarkerMarkerInfoEXT*           pMarkerInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDebugMarkerInsertEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDebugMarkerInsertEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
    }
    DispatchCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdDebugMarkerInsertEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
    }
}




VKAPI_ATTR void VKAPI_CALL CmdBindTransformFeedbackBuffersEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstBinding,
    uint32_t                                    bindingCount,
    const VkBuffer*                             pBuffers,
    const VkDeviceSize*                         pOffsets,
    const VkDeviceSize*                         pSizes) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBindTransformFeedbackBuffersEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBindTransformFeedbackBuffersEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
    }
    DispatchCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
    for (auto intercept : layer_data->disp_post_rec_CmdBindTransformFeedbackBuffersEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBeginTransformFeedbackEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstCounterBuffer,
    uint32_t                                    counterBufferCount,
    const VkBuffer*                             pCounterBuffers,
    const VkDeviceSize*                         pCounterBufferOffsets) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBeginTransformFeedbackEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBeginTransformFeedbackEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
    }
    DispatchCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
    for (auto intercept : layer_data->disp_post_rec_CmdBeginTransformFeedbackEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdEndTransformFeedbackEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstCounterBuffer,
    uint32_t                                    counterBufferCount,
    const VkBuffer*                             pCounterBuffers,
    const VkDeviceSize*                         pCounterBufferOffsets) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdEndTransformFeedbackEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdEndTransformFeedbackEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
    }
    DispatchCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
    for (auto intercept : layer_data->disp_post_rec_CmdEndTransformFeedbackEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBeginQueryIndexedEXT(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query,
    VkQueryControlFlags                         flags,
    uint32_t                                    index) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBeginQueryIndexedEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBeginQueryIndexedEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
    }
    DispatchCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
    for (auto intercept : layer_data->disp_post_rec_CmdBeginQueryIndexedEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdEndQueryIndexedEXT(
    VkCommandBuffer                             commandBuffer,
    VkQueryPool                                 queryPool,
    uint32_t                                    query,
    uint32_t                                    index) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdEndQueryIndexedEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdEndQueryIndexedEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
    }
    DispatchCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
    for (auto intercept : layer_data->disp_post_rec_CmdEndQueryIndexedEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDrawIndirectByteCountEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    instanceCount,
    uint32_t                                    firstInstance,
    VkBuffer                                    counterBuffer,
    VkDeviceSize                                counterBufferOffset,
    uint32_t                                    counterOffset,
    uint32_t                                    vertexStride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawIndirectByteCountEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawIndirectByteCountEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
    }
    DispatchCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawIndirectByteCountEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
    }
}


VKAPI_ATTR uint32_t VKAPI_CALL GetImageViewHandleNVX(
    VkDevice                                    device,
    const VkImageViewHandleInfoNVX*             pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetImageViewHandleNVX) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetImageViewHandleNVX(device, pInfo);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetImageViewHandleNVX) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetImageViewHandleNVX(device, pInfo);
    }
    uint32_t result = DispatchGetImageViewHandleNVX(device, pInfo);
    for (auto intercept : layer_data->disp_post_rec_GetImageViewHandleNVX) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetImageViewHandleNVX(device, pInfo);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetImageViewAddressNVX(
    VkDevice                                    device,
    VkImageView                                 imageView,
    VkImageViewAddressPropertiesNVX*            pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetImageViewAddressNVX) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetImageViewAddressNVX(device, imageView, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetImageViewAddressNVX) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetImageViewAddressNVX(device, imageView, pProperties);
    }
    VkResult result = DispatchGetImageViewAddressNVX(device, imageView, pProperties);
    for (auto intercept : layer_data->disp_post_rec_GetImageViewAddressNVX) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetImageViewAddressNVX(device, imageView, pProperties, result);
    }
    return result;
}


VKAPI_ATTR void VKAPI_CALL CmdDrawIndirectCountAMD(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawIndirectCountAMD) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawIndirectCountAMD) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
    DispatchCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawIndirectCountAMD) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDrawIndexedIndirectCountAMD(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawIndexedIndirectCountAMD) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawIndexedIndirectCountAMD) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
    DispatchCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawIndexedIndirectCountAMD) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
}






VKAPI_ATTR VkResult VKAPI_CALL GetShaderInfoAMD(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    VkShaderStageFlagBits                       shaderStage,
    VkShaderInfoTypeAMD                         infoType,
    size_t*                                     pInfoSize,
    void*                                       pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetShaderInfoAMD) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetShaderInfoAMD) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
    }
    VkResult result = DispatchGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
    for (auto intercept : layer_data->disp_post_rec_GetShaderInfoAMD) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo, result);
    }
    return result;
}


#ifdef VK_USE_PLATFORM_GGP

VKAPI_ATTR VkResult VKAPI_CALL CreateStreamDescriptorSurfaceGGP(
    VkInstance                                  instance,
    const VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_GGP




VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceExternalImageFormatPropertiesNV(
    VkPhysicalDevice                            physicalDevice,
    VkFormat                                    format,
    VkImageType                                 type,
    VkImageTiling                               tiling,
    VkImageUsageFlags                           usage,
    VkImageCreateFlags                          flags,
    VkExternalMemoryHandleTypeFlagsNV           externalHandleType,
    VkExternalImageFormatPropertiesNV*          pExternalImageFormatProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
    }
    VkResult result = DispatchGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties, result);
    }
    return result;
}


#ifdef VK_USE_PLATFORM_WIN32_KHR

VKAPI_ATTR VkResult VKAPI_CALL GetMemoryWin32HandleNV(
    VkDevice                                    device,
    VkDeviceMemory                              memory,
    VkExternalMemoryHandleTypeFlagsNV           handleType,
    HANDLE*                                     pHandle) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetMemoryWin32HandleNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetMemoryWin32HandleNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
    }
    VkResult result = DispatchGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
    for (auto intercept : layer_data->disp_post_rec_GetMemoryWin32HandleNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetMemoryWin32HandleNV(device, memory, handleType, pHandle, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
#endif // VK_USE_PLATFORM_WIN32_KHR


#ifdef VK_USE_PLATFORM_VI_NN

VKAPI_ATTR VkResult VKAPI_CALL CreateViSurfaceNN(
    VkInstance                                  instance,
    const VkViSurfaceCreateInfoNN*              pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_VI_NN






VKAPI_ATTR void VKAPI_CALL CmdBeginConditionalRenderingEXT(
    VkCommandBuffer                             commandBuffer,
    const VkConditionalRenderingBeginInfoEXT*   pConditionalRenderingBegin) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBeginConditionalRenderingEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBeginConditionalRenderingEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
    }
    DispatchCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
    for (auto intercept : layer_data->disp_post_rec_CmdBeginConditionalRenderingEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdEndConditionalRenderingEXT(
    VkCommandBuffer                             commandBuffer) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdEndConditionalRenderingEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdEndConditionalRenderingEXT(commandBuffer);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdEndConditionalRenderingEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdEndConditionalRenderingEXT(commandBuffer);
    }
    DispatchCmdEndConditionalRenderingEXT(commandBuffer);
    for (auto intercept : layer_data->disp_post_rec_CmdEndConditionalRenderingEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdEndConditionalRenderingEXT(commandBuffer);
    }
}


VKAPI_ATTR void VKAPI_CALL CmdSetViewportWScalingNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    const VkViewportWScalingNV*                 pViewportWScalings) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetViewportWScalingNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetViewportWScalingNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
    }
    DispatchCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
    for (auto intercept : layer_data->disp_post_rec_CmdSetViewportWScalingNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
    }
}


VKAPI_ATTR VkResult VKAPI_CALL ReleaseDisplayEXT(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateReleaseDisplayEXT(physicalDevice, display);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordReleaseDisplayEXT(physicalDevice, display);
    }
    VkResult result = DispatchReleaseDisplayEXT(physicalDevice, display);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordReleaseDisplayEXT(physicalDevice, display, result);
    }
    return result;
}

#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT

VKAPI_ATTR VkResult VKAPI_CALL AcquireXlibDisplayEXT(
    VkPhysicalDevice                            physicalDevice,
    Display*                                    dpy,
    VkDisplayKHR                                display) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateAcquireXlibDisplayEXT(physicalDevice, dpy, display);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordAcquireXlibDisplayEXT(physicalDevice, dpy, display);
    }
    VkResult result = DispatchAcquireXlibDisplayEXT(physicalDevice, dpy, display);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordAcquireXlibDisplayEXT(physicalDevice, dpy, display, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetRandROutputDisplayEXT(
    VkPhysicalDevice                            physicalDevice,
    Display*                                    dpy,
    RROutput                                    rrOutput,
    VkDisplayKHR*                               pDisplay) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
    }
    VkResult result = DispatchGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_XLIB_XRANDR_EXT


VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceSurfaceCapabilities2EXT(
    VkPhysicalDevice                            physicalDevice,
    VkSurfaceKHR                                surface,
    VkSurfaceCapabilities2EXT*                  pSurfaceCapabilities) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
    }
    VkResult result = DispatchGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities, result);
    }
    return result;
}


VKAPI_ATTR VkResult VKAPI_CALL DisplayPowerControlEXT(
    VkDevice                                    device,
    VkDisplayKHR                                display,
    const VkDisplayPowerInfoEXT*                pDisplayPowerInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DisplayPowerControlEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_DisplayPowerControlEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
    }
    VkResult result = DispatchDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
    for (auto intercept : layer_data->disp_post_rec_DisplayPowerControlEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDisplayPowerControlEXT(device, display, pDisplayPowerInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL RegisterDeviceEventEXT(
    VkDevice                                    device,
    const VkDeviceEventInfoEXT*                 pDeviceEventInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkFence*                                    pFence) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_RegisterDeviceEventEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_RegisterDeviceEventEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
    }
    VkResult result = DispatchRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
    for (auto intercept : layer_data->disp_post_rec_RegisterDeviceEventEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL RegisterDisplayEventEXT(
    VkDevice                                    device,
    VkDisplayKHR                                display,
    const VkDisplayEventInfoEXT*                pDisplayEventInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkFence*                                    pFence) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_RegisterDisplayEventEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_RegisterDisplayEventEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
    }
    VkResult result = DispatchRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
    for (auto intercept : layer_data->disp_post_rec_RegisterDisplayEventEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetSwapchainCounterEXT(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    VkSurfaceCounterFlagBitsEXT                 counter,
    uint64_t*                                   pCounterValue) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetSwapchainCounterEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetSwapchainCounterEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
    }
    VkResult result = DispatchGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
    for (auto intercept : layer_data->disp_post_rec_GetSwapchainCounterEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue, result);
    }
    return result;
}


VKAPI_ATTR VkResult VKAPI_CALL GetRefreshCycleDurationGOOGLE(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    VkRefreshCycleDurationGOOGLE*               pDisplayTimingProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetRefreshCycleDurationGOOGLE) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetRefreshCycleDurationGOOGLE) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
    }
    VkResult result = DispatchGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
    for (auto intercept : layer_data->disp_post_rec_GetRefreshCycleDurationGOOGLE) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPastPresentationTimingGOOGLE(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain,
    uint32_t*                                   pPresentationTimingCount,
    VkPastPresentationTimingGOOGLE*             pPresentationTimings) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetPastPresentationTimingGOOGLE) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetPastPresentationTimingGOOGLE) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
    }
    VkResult result = DispatchGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
    for (auto intercept : layer_data->disp_post_rec_GetPastPresentationTimingGOOGLE) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings, result);
    }
    return result;
}







VKAPI_ATTR void VKAPI_CALL CmdSetDiscardRectangleEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstDiscardRectangle,
    uint32_t                                    discardRectangleCount,
    const VkRect2D*                             pDiscardRectangles) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetDiscardRectangleEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetDiscardRectangleEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
    }
    DispatchCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
    for (auto intercept : layer_data->disp_post_rec_CmdSetDiscardRectangleEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
    }
}





VKAPI_ATTR void VKAPI_CALL SetHdrMetadataEXT(
    VkDevice                                    device,
    uint32_t                                    swapchainCount,
    const VkSwapchainKHR*                       pSwapchains,
    const VkHdrMetadataEXT*                     pMetadata) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_SetHdrMetadataEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_SetHdrMetadataEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
    }
    DispatchSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
    for (auto intercept : layer_data->disp_post_rec_SetHdrMetadataEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
    }
}

#ifdef VK_USE_PLATFORM_IOS_MVK

VKAPI_ATTR VkResult VKAPI_CALL CreateIOSSurfaceMVK(
    VkInstance                                  instance,
    const VkIOSSurfaceCreateInfoMVK*            pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_IOS_MVK

#ifdef VK_USE_PLATFORM_MACOS_MVK

VKAPI_ATTR VkResult VKAPI_CALL CreateMacOSSurfaceMVK(
    VkInstance                                  instance,
    const VkMacOSSurfaceCreateInfoMVK*          pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_MACOS_MVK




VKAPI_ATTR VkResult VKAPI_CALL SetDebugUtilsObjectNameEXT(
    VkDevice                                    device,
    const VkDebugUtilsObjectNameInfoEXT*        pNameInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_SetDebugUtilsObjectNameEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateSetDebugUtilsObjectNameEXT(device, pNameInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_SetDebugUtilsObjectNameEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordSetDebugUtilsObjectNameEXT(device, pNameInfo);
    }
    layer_data->report_data->DebugReportSetUtilsObjectName(pNameInfo);
    VkResult result = DispatchSetDebugUtilsObjectNameEXT(device, pNameInfo);
    for (auto intercept : layer_data->disp_post_rec_SetDebugUtilsObjectNameEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordSetDebugUtilsObjectNameEXT(device, pNameInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL SetDebugUtilsObjectTagEXT(
    VkDevice                                    device,
    const VkDebugUtilsObjectTagInfoEXT*         pTagInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_SetDebugUtilsObjectTagEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateSetDebugUtilsObjectTagEXT(device, pTagInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_SetDebugUtilsObjectTagEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordSetDebugUtilsObjectTagEXT(device, pTagInfo);
    }
    VkResult result = DispatchSetDebugUtilsObjectTagEXT(device, pTagInfo);
    for (auto intercept : layer_data->disp_post_rec_SetDebugUtilsObjectTagEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordSetDebugUtilsObjectTagEXT(device, pTagInfo, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL QueueBeginDebugUtilsLabelEXT(
    VkQueue                                     queue,
    const VkDebugUtilsLabelEXT*                 pLabelInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(queue), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_QueueBeginDebugUtilsLabelEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_QueueBeginDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
    }
    BeginQueueDebugUtilsLabel(layer_data->report_data, queue, pLabelInfo);
    DispatchQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
    for (auto intercept : layer_data->disp_post_rec_QueueBeginDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL QueueEndDebugUtilsLabelEXT(
    VkQueue                                     queue) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(queue), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_QueueEndDebugUtilsLabelEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateQueueEndDebugUtilsLabelEXT(queue);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_QueueEndDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordQueueEndDebugUtilsLabelEXT(queue);
    }
    DispatchQueueEndDebugUtilsLabelEXT(queue);
    EndQueueDebugUtilsLabel(layer_data->report_data, queue);
    for (auto intercept : layer_data->disp_post_rec_QueueEndDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordQueueEndDebugUtilsLabelEXT(queue);
    }
}

VKAPI_ATTR void VKAPI_CALL QueueInsertDebugUtilsLabelEXT(
    VkQueue                                     queue,
    const VkDebugUtilsLabelEXT*                 pLabelInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(queue), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_QueueInsertDebugUtilsLabelEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_QueueInsertDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
    }
    InsertQueueDebugUtilsLabel(layer_data->report_data, queue, pLabelInfo);
    DispatchQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
    for (auto intercept : layer_data->disp_post_rec_QueueInsertDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBeginDebugUtilsLabelEXT(
    VkCommandBuffer                             commandBuffer,
    const VkDebugUtilsLabelEXT*                 pLabelInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBeginDebugUtilsLabelEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBeginDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
    }
    DispatchCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdBeginDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdEndDebugUtilsLabelEXT(
    VkCommandBuffer                             commandBuffer) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdEndDebugUtilsLabelEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdEndDebugUtilsLabelEXT(commandBuffer);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdEndDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdEndDebugUtilsLabelEXT(commandBuffer);
    }
    DispatchCmdEndDebugUtilsLabelEXT(commandBuffer);
    for (auto intercept : layer_data->disp_post_rec_CmdEndDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdEndDebugUtilsLabelEXT(commandBuffer);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdInsertDebugUtilsLabelEXT(
    VkCommandBuffer                             commandBuffer,
    const VkDebugUtilsLabelEXT*                 pLabelInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdInsertDebugUtilsLabelEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdInsertDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
    }
    DispatchCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdInsertDebugUtilsLabelEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateDebugUtilsMessengerEXT(
    VkInstance                                  instance,
    const VkDebugUtilsMessengerCreateInfoEXT*   pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkDebugUtilsMessengerEXT*                   pMessenger) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
    }
    VkResult result = DispatchCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
    layer_create_messenger_callback(layer_data->report_data, false, pCreateInfo, pAllocator, pMessenger);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyDebugUtilsMessengerEXT(
    VkInstance                                  instance,
    VkDebugUtilsMessengerEXT                    messenger,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
    }
    DispatchDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
    layer_destroy_callback(layer_data->report_data, messenger, pAllocator);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
    }
}

VKAPI_ATTR void VKAPI_CALL SubmitDebugUtilsMessageEXT(
    VkInstance                                  instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT      messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT             messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
    }
    DispatchSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
    }
}

#ifdef VK_USE_PLATFORM_ANDROID_KHR

VKAPI_ATTR VkResult VKAPI_CALL GetAndroidHardwareBufferPropertiesANDROID(
    VkDevice                                    device,
    const struct AHardwareBuffer*               buffer,
    VkAndroidHardwareBufferPropertiesANDROID*   pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetAndroidHardwareBufferPropertiesANDROID) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetAndroidHardwareBufferPropertiesANDROID) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
    }
    VkResult result = DispatchGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
    for (auto intercept : layer_data->disp_post_rec_GetAndroidHardwareBufferPropertiesANDROID) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetMemoryAndroidHardwareBufferANDROID(
    VkDevice                                    device,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
    struct AHardwareBuffer**                    pBuffer) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetMemoryAndroidHardwareBufferANDROID) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetMemoryAndroidHardwareBufferANDROID) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
    }
    VkResult result = DispatchGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
    for (auto intercept : layer_data->disp_post_rec_GetMemoryAndroidHardwareBufferANDROID) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_ANDROID_KHR








VKAPI_ATTR void VKAPI_CALL CmdSetSampleLocationsEXT(
    VkCommandBuffer                             commandBuffer,
    const VkSampleLocationsInfoEXT*             pSampleLocationsInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetSampleLocationsEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetSampleLocationsEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
    }
    DispatchCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdSetSampleLocationsEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMultisamplePropertiesEXT(
    VkPhysicalDevice                            physicalDevice,
    VkSampleCountFlagBits                       samples,
    VkMultisamplePropertiesEXT*                 pMultisampleProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
        if (skip) return;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
    }
    DispatchGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
    }
}








VKAPI_ATTR VkResult VKAPI_CALL GetImageDrmFormatModifierPropertiesEXT(
    VkDevice                                    device,
    VkImage                                     image,
    VkImageDrmFormatModifierPropertiesEXT*      pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetImageDrmFormatModifierPropertiesEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetImageDrmFormatModifierPropertiesEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
    }
    VkResult result = DispatchGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
    for (auto intercept : layer_data->disp_post_rec_GetImageDrmFormatModifierPropertiesEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties, result);
    }
    return result;
}





VKAPI_ATTR void VKAPI_CALL CmdBindShadingRateImageNV(
    VkCommandBuffer                             commandBuffer,
    VkImageView                                 imageView,
    VkImageLayout                               imageLayout) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBindShadingRateImageNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBindShadingRateImageNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
    }
    DispatchCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
    for (auto intercept : layer_data->disp_post_rec_CmdBindShadingRateImageNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetViewportShadingRatePaletteNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstViewport,
    uint32_t                                    viewportCount,
    const VkShadingRatePaletteNV*               pShadingRatePalettes) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetViewportShadingRatePaletteNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetViewportShadingRatePaletteNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
    }
    DispatchCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
    for (auto intercept : layer_data->disp_post_rec_CmdSetViewportShadingRatePaletteNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetCoarseSampleOrderNV(
    VkCommandBuffer                             commandBuffer,
    VkCoarseSampleOrderTypeNV                   sampleOrderType,
    uint32_t                                    customSampleOrderCount,
    const VkCoarseSampleOrderCustomNV*          pCustomSampleOrders) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetCoarseSampleOrderNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetCoarseSampleOrderNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
    }
    DispatchCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
    for (auto intercept : layer_data->disp_post_rec_CmdSetCoarseSampleOrderNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
    }
}


VKAPI_ATTR VkResult VKAPI_CALL CreateAccelerationStructureNV(
    VkDevice                                    device,
    const VkAccelerationStructureCreateInfoNV*  pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkAccelerationStructureNV*                  pAccelerationStructure) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateAccelerationStructureNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateAccelerationStructureNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
    }
    VkResult result = DispatchCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
    for (auto intercept : layer_data->disp_post_rec_CreateAccelerationStructureNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyAccelerationStructureNV(
    VkDevice                                    device,
    VkAccelerationStructureNV                   accelerationStructure,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyAccelerationStructureNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyAccelerationStructureNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
    }
    DispatchDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyAccelerationStructureNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
    }
}

VKAPI_ATTR void VKAPI_CALL GetAccelerationStructureMemoryRequirementsNV(
    VkDevice                                    device,
    const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo,
    VkMemoryRequirements2KHR*                   pMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetAccelerationStructureMemoryRequirementsNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetAccelerationStructureMemoryRequirementsNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
    }
    DispatchGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetAccelerationStructureMemoryRequirementsNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL BindAccelerationStructureMemoryNV(
    VkDevice                                    device,
    uint32_t                                    bindInfoCount,
    const VkBindAccelerationStructureMemoryInfoNV* pBindInfos) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_BindAccelerationStructureMemoryNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_BindAccelerationStructureMemoryNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
    }
    VkResult result = DispatchBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
    for (auto intercept : layer_data->disp_post_rec_BindAccelerationStructureMemoryNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdBuildAccelerationStructureNV(
    VkCommandBuffer                             commandBuffer,
    const VkAccelerationStructureInfoNV*        pInfo,
    VkBuffer                                    instanceData,
    VkDeviceSize                                instanceOffset,
    VkBool32                                    update,
    VkAccelerationStructureNV                   dst,
    VkAccelerationStructureNV                   src,
    VkBuffer                                    scratch,
    VkDeviceSize                                scratchOffset) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBuildAccelerationStructureNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBuildAccelerationStructureNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
    }
    DispatchCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
    for (auto intercept : layer_data->disp_post_rec_CmdBuildAccelerationStructureNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyAccelerationStructureNV(
    VkCommandBuffer                             commandBuffer,
    VkAccelerationStructureNV                   dst,
    VkAccelerationStructureNV                   src,
    VkCopyAccelerationStructureModeKHR          mode) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyAccelerationStructureNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyAccelerationStructureNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
    }
    DispatchCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyAccelerationStructureNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdTraceRaysNV(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    raygenShaderBindingTableBuffer,
    VkDeviceSize                                raygenShaderBindingOffset,
    VkBuffer                                    missShaderBindingTableBuffer,
    VkDeviceSize                                missShaderBindingOffset,
    VkDeviceSize                                missShaderBindingStride,
    VkBuffer                                    hitShaderBindingTableBuffer,
    VkDeviceSize                                hitShaderBindingOffset,
    VkDeviceSize                                hitShaderBindingStride,
    VkBuffer                                    callableShaderBindingTableBuffer,
    VkDeviceSize                                callableShaderBindingOffset,
    VkDeviceSize                                callableShaderBindingStride,
    uint32_t                                    width,
    uint32_t                                    height,
    uint32_t                                    depth) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdTraceRaysNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdTraceRaysNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
    }
    DispatchCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
    for (auto intercept : layer_data->disp_post_rec_CmdTraceRaysNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetRayTracingShaderGroupHandlesKHR(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    firstGroup,
    uint32_t                                    groupCount,
    size_t                                      dataSize,
    void*                                       pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetRayTracingShaderGroupHandlesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetRayTracingShaderGroupHandlesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
    }
    VkResult result = DispatchGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
    for (auto intercept : layer_data->disp_post_rec_GetRayTracingShaderGroupHandlesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetRayTracingShaderGroupHandlesNV(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    firstGroup,
    uint32_t                                    groupCount,
    size_t                                      dataSize,
    void*                                       pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetRayTracingShaderGroupHandlesNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetRayTracingShaderGroupHandlesNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
    }
    VkResult result = DispatchGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
    for (auto intercept : layer_data->disp_post_rec_GetRayTracingShaderGroupHandlesNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetAccelerationStructureHandleNV(
    VkDevice                                    device,
    VkAccelerationStructureNV                   accelerationStructure,
    size_t                                      dataSize,
    void*                                       pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetAccelerationStructureHandleNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetAccelerationStructureHandleNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
    }
    VkResult result = DispatchGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
    for (auto intercept : layer_data->disp_post_rec_GetAccelerationStructureHandleNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdWriteAccelerationStructuresPropertiesNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    accelerationStructureCount,
    const VkAccelerationStructureNV*            pAccelerationStructures,
    VkQueryType                                 queryType,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdWriteAccelerationStructuresPropertiesNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdWriteAccelerationStructuresPropertiesNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
    }
    DispatchCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
    for (auto intercept : layer_data->disp_post_rec_CmdWriteAccelerationStructuresPropertiesNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CompileDeferredNV(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    shader) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CompileDeferredNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCompileDeferredNV(device, pipeline, shader);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CompileDeferredNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCompileDeferredNV(device, pipeline, shader);
    }
    VkResult result = DispatchCompileDeferredNV(device, pipeline, shader);
    for (auto intercept : layer_data->disp_post_rec_CompileDeferredNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCompileDeferredNV(device, pipeline, shader, result);
    }
    return result;
}






VKAPI_ATTR VkResult VKAPI_CALL GetMemoryHostPointerPropertiesEXT(
    VkDevice                                    device,
    VkExternalMemoryHandleTypeFlagBits          handleType,
    const void*                                 pHostPointer,
    VkMemoryHostPointerPropertiesEXT*           pMemoryHostPointerProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetMemoryHostPointerPropertiesEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetMemoryHostPointerPropertiesEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
    }
    VkResult result = DispatchGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
    for (auto intercept : layer_data->disp_post_rec_GetMemoryHostPointerPropertiesEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties, result);
    }
    return result;
}


VKAPI_ATTR void VKAPI_CALL CmdWriteBufferMarkerAMD(
    VkCommandBuffer                             commandBuffer,
    VkPipelineStageFlagBits                     pipelineStage,
    VkBuffer                                    dstBuffer,
    VkDeviceSize                                dstOffset,
    uint32_t                                    marker) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdWriteBufferMarkerAMD) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdWriteBufferMarkerAMD) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
    }
    DispatchCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
    for (auto intercept : layer_data->disp_post_rec_CmdWriteBufferMarkerAMD) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
    }
}



VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceCalibrateableTimeDomainsEXT(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pTimeDomainCount,
    VkTimeDomainEXT*                            pTimeDomains) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
    }
    VkResult result = DispatchGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetCalibratedTimestampsEXT(
    VkDevice                                    device,
    uint32_t                                    timestampCount,
    const VkCalibratedTimestampInfoEXT*         pTimestampInfos,
    uint64_t*                                   pTimestamps,
    uint64_t*                                   pMaxDeviation) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetCalibratedTimestampsEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetCalibratedTimestampsEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
    }
    VkResult result = DispatchGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
    for (auto intercept : layer_data->disp_post_rec_GetCalibratedTimestampsEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation, result);
    }
    return result;
}




#ifdef VK_USE_PLATFORM_GGP
#endif // VK_USE_PLATFORM_GGP





VKAPI_ATTR void VKAPI_CALL CmdDrawMeshTasksNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    taskCount,
    uint32_t                                    firstTask) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawMeshTasksNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawMeshTasksNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
    }
    DispatchCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawMeshTasksNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDrawMeshTasksIndirectNV(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    uint32_t                                    drawCount,
    uint32_t                                    stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawMeshTasksIndirectNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawMeshTasksIndirectNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
    }
    DispatchCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawMeshTasksIndirectNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdDrawMeshTasksIndirectCountNV(
    VkCommandBuffer                             commandBuffer,
    VkBuffer                                    buffer,
    VkDeviceSize                                offset,
    VkBuffer                                    countBuffer,
    VkDeviceSize                                countBufferOffset,
    uint32_t                                    maxDrawCount,
    uint32_t                                    stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdDrawMeshTasksIndirectCountNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdDrawMeshTasksIndirectCountNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
    DispatchCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    for (auto intercept : layer_data->disp_post_rec_CmdDrawMeshTasksIndirectCountNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }
}




VKAPI_ATTR void VKAPI_CALL CmdSetExclusiveScissorNV(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstExclusiveScissor,
    uint32_t                                    exclusiveScissorCount,
    const VkRect2D*                             pExclusiveScissors) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetExclusiveScissorNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetExclusiveScissorNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
    }
    DispatchCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
    for (auto intercept : layer_data->disp_post_rec_CmdSetExclusiveScissorNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
    }
}


VKAPI_ATTR void VKAPI_CALL CmdSetCheckpointNV(
    VkCommandBuffer                             commandBuffer,
    const void*                                 pCheckpointMarker) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetCheckpointNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetCheckpointNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
    }
    DispatchCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
    for (auto intercept : layer_data->disp_post_rec_CmdSetCheckpointNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
    }
}

VKAPI_ATTR void VKAPI_CALL GetQueueCheckpointDataNV(
    VkQueue                                     queue,
    uint32_t*                                   pCheckpointDataCount,
    VkCheckpointDataNV*                         pCheckpointData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(queue), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetQueueCheckpointDataNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetQueueCheckpointDataNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
    }
    DispatchGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
    for (auto intercept : layer_data->disp_post_rec_GetQueueCheckpointDataNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
    }
}



VKAPI_ATTR VkResult VKAPI_CALL InitializePerformanceApiINTEL(
    VkDevice                                    device,
    const VkInitializePerformanceApiInfoINTEL*  pInitializeInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_InitializePerformanceApiINTEL) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateInitializePerformanceApiINTEL(device, pInitializeInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_InitializePerformanceApiINTEL) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordInitializePerformanceApiINTEL(device, pInitializeInfo);
    }
    VkResult result = DispatchInitializePerformanceApiINTEL(device, pInitializeInfo);
    for (auto intercept : layer_data->disp_post_rec_InitializePerformanceApiINTEL) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordInitializePerformanceApiINTEL(device, pInitializeInfo, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL UninitializePerformanceApiINTEL(
    VkDevice                                    device) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_UninitializePerformanceApiINTEL) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateUninitializePerformanceApiINTEL(device);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_UninitializePerformanceApiINTEL) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordUninitializePerformanceApiINTEL(device);
    }
    DispatchUninitializePerformanceApiINTEL(device);
    for (auto intercept : layer_data->disp_post_rec_UninitializePerformanceApiINTEL) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordUninitializePerformanceApiINTEL(device);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CmdSetPerformanceMarkerINTEL(
    VkCommandBuffer                             commandBuffer,
    const VkPerformanceMarkerInfoINTEL*         pMarkerInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetPerformanceMarkerINTEL) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetPerformanceMarkerINTEL) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
    }
    VkResult result = DispatchCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdSetPerformanceMarkerINTEL) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CmdSetPerformanceStreamMarkerINTEL(
    VkCommandBuffer                             commandBuffer,
    const VkPerformanceStreamMarkerInfoINTEL*   pMarkerInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetPerformanceStreamMarkerINTEL) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetPerformanceStreamMarkerINTEL) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
    }
    VkResult result = DispatchCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdSetPerformanceStreamMarkerINTEL) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CmdSetPerformanceOverrideINTEL(
    VkCommandBuffer                             commandBuffer,
    const VkPerformanceOverrideInfoINTEL*       pOverrideInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetPerformanceOverrideINTEL) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetPerformanceOverrideINTEL) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
    }
    VkResult result = DispatchCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdSetPerformanceOverrideINTEL) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL AcquirePerformanceConfigurationINTEL(
    VkDevice                                    device,
    const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo,
    VkPerformanceConfigurationINTEL*            pConfiguration) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_AcquirePerformanceConfigurationINTEL) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_AcquirePerformanceConfigurationINTEL) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
    }
    VkResult result = DispatchAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
    for (auto intercept : layer_data->disp_post_rec_AcquirePerformanceConfigurationINTEL) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL ReleasePerformanceConfigurationINTEL(
    VkDevice                                    device,
    VkPerformanceConfigurationINTEL             configuration) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ReleasePerformanceConfigurationINTEL) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateReleasePerformanceConfigurationINTEL(device, configuration);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ReleasePerformanceConfigurationINTEL) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordReleasePerformanceConfigurationINTEL(device, configuration);
    }
    VkResult result = DispatchReleasePerformanceConfigurationINTEL(device, configuration);
    for (auto intercept : layer_data->disp_post_rec_ReleasePerformanceConfigurationINTEL) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordReleasePerformanceConfigurationINTEL(device, configuration, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL QueueSetPerformanceConfigurationINTEL(
    VkQueue                                     queue,
    VkPerformanceConfigurationINTEL             configuration) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(queue), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_QueueSetPerformanceConfigurationINTEL) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateQueueSetPerformanceConfigurationINTEL(queue, configuration);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_QueueSetPerformanceConfigurationINTEL) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordQueueSetPerformanceConfigurationINTEL(queue, configuration);
    }
    VkResult result = DispatchQueueSetPerformanceConfigurationINTEL(queue, configuration);
    for (auto intercept : layer_data->disp_post_rec_QueueSetPerformanceConfigurationINTEL) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordQueueSetPerformanceConfigurationINTEL(queue, configuration, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetPerformanceParameterINTEL(
    VkDevice                                    device,
    VkPerformanceParameterTypeINTEL             parameter,
    VkPerformanceValueINTEL*                    pValue) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetPerformanceParameterINTEL) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPerformanceParameterINTEL(device, parameter, pValue);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetPerformanceParameterINTEL) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPerformanceParameterINTEL(device, parameter, pValue);
    }
    VkResult result = DispatchGetPerformanceParameterINTEL(device, parameter, pValue);
    for (auto intercept : layer_data->disp_post_rec_GetPerformanceParameterINTEL) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPerformanceParameterINTEL(device, parameter, pValue, result);
    }
    return result;
}



VKAPI_ATTR void VKAPI_CALL SetLocalDimmingAMD(
    VkDevice                                    device,
    VkSwapchainKHR                              swapChain,
    VkBool32                                    localDimmingEnable) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_SetLocalDimmingAMD) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_SetLocalDimmingAMD) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
    }
    DispatchSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
    for (auto intercept : layer_data->disp_post_rec_SetLocalDimmingAMD) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
    }
}

#ifdef VK_USE_PLATFORM_FUCHSIA

VKAPI_ATTR VkResult VKAPI_CALL CreateImagePipeSurfaceFUCHSIA(
    VkInstance                                  instance,
    const VkImagePipeSurfaceCreateInfoFUCHSIA*  pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_METAL_EXT

VKAPI_ATTR VkResult VKAPI_CALL CreateMetalSurfaceEXT(
    VkInstance                                  instance,
    const VkMetalSurfaceCreateInfoEXT*          pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_METAL_EXT













VKAPI_ATTR VkDeviceAddress VKAPI_CALL GetBufferDeviceAddressEXT(
    VkDevice                                    device,
    const VkBufferDeviceAddressInfo*            pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetBufferDeviceAddressEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetBufferDeviceAddressEXT(device, pInfo);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetBufferDeviceAddressEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetBufferDeviceAddressEXT(device, pInfo);
    }
    VkDeviceAddress result = DispatchGetBufferDeviceAddressEXT(device, pInfo);
    for (auto intercept : layer_data->disp_post_rec_GetBufferDeviceAddressEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetBufferDeviceAddressEXT(device, pInfo, result);
    }
    return result;
}





VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pPropertyCount,
    VkCooperativeMatrixPropertiesNV*            pProperties) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
    }
    VkResult result = DispatchGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties, result);
    }
    return result;
}


VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
    VkPhysicalDevice                            physicalDevice,
    uint32_t*                                   pCombinationCount,
    VkFramebufferMixedSamplesCombinationNV*     pCombinations) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
    }
    VkResult result = DispatchGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations, result);
    }
    return result;
}



#ifdef VK_USE_PLATFORM_WIN32_KHR

VKAPI_ATTR VkResult VKAPI_CALL GetPhysicalDeviceSurfacePresentModes2EXT(
    VkPhysicalDevice                            physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR*      pSurfaceInfo,
    uint32_t*                                   pPresentModeCount,
    VkPresentModeKHR*                           pPresentModes) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
    }
    VkResult result = DispatchGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL AcquireFullScreenExclusiveModeEXT(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_AcquireFullScreenExclusiveModeEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateAcquireFullScreenExclusiveModeEXT(device, swapchain);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_AcquireFullScreenExclusiveModeEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordAcquireFullScreenExclusiveModeEXT(device, swapchain);
    }
    VkResult result = DispatchAcquireFullScreenExclusiveModeEXT(device, swapchain);
    for (auto intercept : layer_data->disp_post_rec_AcquireFullScreenExclusiveModeEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordAcquireFullScreenExclusiveModeEXT(device, swapchain, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL ReleaseFullScreenExclusiveModeEXT(
    VkDevice                                    device,
    VkSwapchainKHR                              swapchain) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ReleaseFullScreenExclusiveModeEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateReleaseFullScreenExclusiveModeEXT(device, swapchain);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_ReleaseFullScreenExclusiveModeEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordReleaseFullScreenExclusiveModeEXT(device, swapchain);
    }
    VkResult result = DispatchReleaseFullScreenExclusiveModeEXT(device, swapchain);
    for (auto intercept : layer_data->disp_post_rec_ReleaseFullScreenExclusiveModeEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordReleaseFullScreenExclusiveModeEXT(device, swapchain, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetDeviceGroupSurfacePresentModes2EXT(
    VkDevice                                    device,
    const VkPhysicalDeviceSurfaceInfo2KHR*      pSurfaceInfo,
    VkDeviceGroupPresentModeFlagsKHR*           pModes) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceGroupSurfacePresentModes2EXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceGroupSurfacePresentModes2EXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
    }
    VkResult result = DispatchGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceGroupSurfacePresentModes2EXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_WIN32_KHR


VKAPI_ATTR VkResult VKAPI_CALL CreateHeadlessSurfaceEXT(
    VkInstance                                  instance,
    const VkHeadlessSurfaceCreateInfoEXT*       pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}


VKAPI_ATTR void VKAPI_CALL CmdSetLineStippleEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    lineStippleFactor,
    uint16_t                                    lineStipplePattern) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetLineStippleEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetLineStippleEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
    }
    DispatchCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
    for (auto intercept : layer_data->disp_post_rec_CmdSetLineStippleEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
    }
}



VKAPI_ATTR void VKAPI_CALL ResetQueryPoolEXT(
    VkDevice                                    device,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery,
    uint32_t                                    queryCount) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_ResetQueryPoolEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_ResetQueryPoolEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
    }
    DispatchResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
    for (auto intercept : layer_data->disp_post_rec_ResetQueryPoolEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
    }
}



VKAPI_ATTR void VKAPI_CALL CmdSetCullModeEXT(
    VkCommandBuffer                             commandBuffer,
    VkCullModeFlags                             cullMode) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetCullModeEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetCullModeEXT(commandBuffer, cullMode);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetCullModeEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetCullModeEXT(commandBuffer, cullMode);
    }
    DispatchCmdSetCullModeEXT(commandBuffer, cullMode);
    for (auto intercept : layer_data->disp_post_rec_CmdSetCullModeEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetCullModeEXT(commandBuffer, cullMode);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetFrontFaceEXT(
    VkCommandBuffer                             commandBuffer,
    VkFrontFace                                 frontFace) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetFrontFaceEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetFrontFaceEXT(commandBuffer, frontFace);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetFrontFaceEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetFrontFaceEXT(commandBuffer, frontFace);
    }
    DispatchCmdSetFrontFaceEXT(commandBuffer, frontFace);
    for (auto intercept : layer_data->disp_post_rec_CmdSetFrontFaceEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetFrontFaceEXT(commandBuffer, frontFace);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetPrimitiveTopologyEXT(
    VkCommandBuffer                             commandBuffer,
    VkPrimitiveTopology                         primitiveTopology) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetPrimitiveTopologyEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetPrimitiveTopologyEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
    }
    DispatchCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
    for (auto intercept : layer_data->disp_post_rec_CmdSetPrimitiveTopologyEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetViewportWithCountEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    viewportCount,
    const VkViewport*                           pViewports) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetViewportWithCountEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetViewportWithCountEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
    }
    DispatchCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
    for (auto intercept : layer_data->disp_post_rec_CmdSetViewportWithCountEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetScissorWithCountEXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    scissorCount,
    const VkRect2D*                             pScissors) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetScissorWithCountEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetScissorWithCountEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
    }
    DispatchCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
    for (auto intercept : layer_data->disp_post_rec_CmdSetScissorWithCountEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBindVertexBuffers2EXT(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    firstBinding,
    uint32_t                                    bindingCount,
    const VkBuffer*                             pBuffers,
    const VkDeviceSize*                         pOffsets,
    const VkDeviceSize*                         pSizes,
    const VkDeviceSize*                         pStrides) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBindVertexBuffers2EXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBindVertexBuffers2EXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
    }
    DispatchCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
    for (auto intercept : layer_data->disp_post_rec_CmdBindVertexBuffers2EXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetDepthTestEnableEXT(
    VkCommandBuffer                             commandBuffer,
    VkBool32                                    depthTestEnable) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetDepthTestEnableEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetDepthTestEnableEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
    }
    DispatchCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
    for (auto intercept : layer_data->disp_post_rec_CmdSetDepthTestEnableEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetDepthWriteEnableEXT(
    VkCommandBuffer                             commandBuffer,
    VkBool32                                    depthWriteEnable) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetDepthWriteEnableEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetDepthWriteEnableEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
    }
    DispatchCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
    for (auto intercept : layer_data->disp_post_rec_CmdSetDepthWriteEnableEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetDepthCompareOpEXT(
    VkCommandBuffer                             commandBuffer,
    VkCompareOp                                 depthCompareOp) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetDepthCompareOpEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetDepthCompareOpEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
    }
    DispatchCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
    for (auto intercept : layer_data->disp_post_rec_CmdSetDepthCompareOpEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetDepthBoundsTestEnableEXT(
    VkCommandBuffer                             commandBuffer,
    VkBool32                                    depthBoundsTestEnable) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetDepthBoundsTestEnableEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetDepthBoundsTestEnableEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
    }
    DispatchCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
    for (auto intercept : layer_data->disp_post_rec_CmdSetDepthBoundsTestEnableEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetStencilTestEnableEXT(
    VkCommandBuffer                             commandBuffer,
    VkBool32                                    stencilTestEnable) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetStencilTestEnableEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetStencilTestEnableEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
    }
    DispatchCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
    for (auto intercept : layer_data->disp_post_rec_CmdSetStencilTestEnableEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdSetStencilOpEXT(
    VkCommandBuffer                             commandBuffer,
    VkStencilFaceFlags                          faceMask,
    VkStencilOp                                 failOp,
    VkStencilOp                                 passOp,
    VkStencilOp                                 depthFailOp,
    VkCompareOp                                 compareOp) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetStencilOpEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetStencilOpEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
    }
    DispatchCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
    for (auto intercept : layer_data->disp_post_rec_CmdSetStencilOpEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
    }
}



VKAPI_ATTR void VKAPI_CALL GetGeneratedCommandsMemoryRequirementsNV(
    VkDevice                                    device,
    const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo,
    VkMemoryRequirements2*                      pMemoryRequirements) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetGeneratedCommandsMemoryRequirementsNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetGeneratedCommandsMemoryRequirementsNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
    }
    DispatchGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
    for (auto intercept : layer_data->disp_post_rec_GetGeneratedCommandsMemoryRequirementsNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdPreprocessGeneratedCommandsNV(
    VkCommandBuffer                             commandBuffer,
    const VkGeneratedCommandsInfoNV*            pGeneratedCommandsInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdPreprocessGeneratedCommandsNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdPreprocessGeneratedCommandsNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
    }
    DispatchCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdPreprocessGeneratedCommandsNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdExecuteGeneratedCommandsNV(
    VkCommandBuffer                             commandBuffer,
    VkBool32                                    isPreprocessed,
    const VkGeneratedCommandsInfoNV*            pGeneratedCommandsInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdExecuteGeneratedCommandsNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdExecuteGeneratedCommandsNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
    }
    DispatchCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdExecuteGeneratedCommandsNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBindPipelineShaderGroupNV(
    VkCommandBuffer                             commandBuffer,
    VkPipelineBindPoint                         pipelineBindPoint,
    VkPipeline                                  pipeline,
    uint32_t                                    groupIndex) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBindPipelineShaderGroupNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBindPipelineShaderGroupNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
    }
    DispatchCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
    for (auto intercept : layer_data->disp_post_rec_CmdBindPipelineShaderGroupNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL CreateIndirectCommandsLayoutNV(
    VkDevice                                    device,
    const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkIndirectCommandsLayoutNV*                 pIndirectCommandsLayout) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateIndirectCommandsLayoutNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateIndirectCommandsLayoutNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
    }
    VkResult result = DispatchCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
    for (auto intercept : layer_data->disp_post_rec_CreateIndirectCommandsLayoutNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyIndirectCommandsLayoutNV(
    VkDevice                                    device,
    VkIndirectCommandsLayoutNV                  indirectCommandsLayout,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyIndirectCommandsLayoutNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyIndirectCommandsLayoutNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
    }
    DispatchDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyIndirectCommandsLayoutNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
    }
}








VKAPI_ATTR VkResult VKAPI_CALL CreatePrivateDataSlotEXT(
    VkDevice                                    device,
    const VkPrivateDataSlotCreateInfoEXT*       pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkPrivateDataSlotEXT*                       pPrivateDataSlot) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreatePrivateDataSlotEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreatePrivateDataSlotEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
    }
    VkResult result = DispatchCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
    for (auto intercept : layer_data->disp_post_rec_CreatePrivateDataSlotEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyPrivateDataSlotEXT(
    VkDevice                                    device,
    VkPrivateDataSlotEXT                        privateDataSlot,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyPrivateDataSlotEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyPrivateDataSlotEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
    }
    DispatchDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyPrivateDataSlotEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL SetPrivateDataEXT(
    VkDevice                                    device,
    VkObjectType                                objectType,
    uint64_t                                    objectHandle,
    VkPrivateDataSlotEXT                        privateDataSlot,
    uint64_t                                    data) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_SetPrivateDataEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_SetPrivateDataEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
    }
    VkResult result = DispatchSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
    for (auto intercept : layer_data->disp_post_rec_SetPrivateDataEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL GetPrivateDataEXT(
    VkDevice                                    device,
    VkObjectType                                objectType,
    uint64_t                                    objectHandle,
    VkPrivateDataSlotEXT                        privateDataSlot,
    uint64_t*                                   pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetPrivateDataEXT) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetPrivateDataEXT) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
    }
    DispatchGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
    for (auto intercept : layer_data->disp_post_rec_GetPrivateDataEXT) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
    }
}





VKAPI_ATTR void VKAPI_CALL CmdSetFragmentShadingRateEnumNV(
    VkCommandBuffer                             commandBuffer,
    VkFragmentShadingRateNV                     shadingRate,
    const VkFragmentShadingRateCombinerOpKHR    combinerOps[2]) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetFragmentShadingRateEnumNV) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetFragmentShadingRateEnumNV) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
    }
    DispatchCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
    for (auto intercept : layer_data->disp_post_rec_CmdSetFragmentShadingRateEnumNV) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
    }
}





#ifdef VK_USE_PLATFORM_WIN32_KHR

VKAPI_ATTR VkResult VKAPI_CALL AcquireWinrtDisplayNV(
    VkPhysicalDevice                            physicalDevice,
    VkDisplayKHR                                display) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateAcquireWinrtDisplayNV(physicalDevice, display);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordAcquireWinrtDisplayNV(physicalDevice, display);
    }
    VkResult result = DispatchAcquireWinrtDisplayNV(physicalDevice, display);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordAcquireWinrtDisplayNV(physicalDevice, display, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL GetWinrtDisplayNV(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    deviceRelativeId,
    VkDisplayKHR*                               pDisplay) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
    }
    VkResult result = DispatchGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay, result);
    }
    return result;
}
#endif // VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_DIRECTFB_EXT

VKAPI_ATTR VkResult VKAPI_CALL CreateDirectFBSurfaceEXT(
    VkInstance                                  instance,
    const VkDirectFBSurfaceCreateInfoEXT*       pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkSurfaceKHR*                               pSurface) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(instance), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
    }
    VkResult result = DispatchCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface, result);
    }
    return result;
}

VKAPI_ATTR VkBool32 VKAPI_CALL GetPhysicalDeviceDirectFBPresentationSupportEXT(
    VkPhysicalDevice                            physicalDevice,
    uint32_t                                    queueFamilyIndex,
    IDirectFB*                                  dfb) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(physicalDevice), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
        if (skip) return VK_FALSE;
    }
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
    }
    VkBool32 result = DispatchGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
    for (auto intercept : layer_data->object_dispatch) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
    }
    return result;
}
#endif // VK_USE_PLATFORM_DIRECTFB_EXT



VKAPI_ATTR VkResult VKAPI_CALL CreateAccelerationStructureKHR(
    VkDevice                                    device,
    const VkAccelerationStructureCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks*                pAllocator,
    VkAccelerationStructureKHR*                 pAccelerationStructure) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CreateAccelerationStructureKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CreateAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
    }
    VkResult result = DispatchCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
    for (auto intercept : layer_data->disp_post_rec_CreateAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL DestroyAccelerationStructureKHR(
    VkDevice                                    device,
    VkAccelerationStructureKHR                  accelerationStructure,
    const VkAllocationCallbacks*                pAllocator) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_DestroyAccelerationStructureKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_DestroyAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
    }
    DispatchDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
    for (auto intercept : layer_data->disp_post_rec_DestroyAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBuildAccelerationStructuresKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
    const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBuildAccelerationStructuresKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBuildAccelerationStructuresKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
    }
    DispatchCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
    for (auto intercept : layer_data->disp_post_rec_CmdBuildAccelerationStructuresKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdBuildAccelerationStructuresIndirectKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
    const VkDeviceAddress*                      pIndirectDeviceAddresses,
    const uint32_t*                             pIndirectStrides,
    const uint32_t* const*                      ppMaxPrimitiveCounts) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdBuildAccelerationStructuresIndirectKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdBuildAccelerationStructuresIndirectKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
    }
    DispatchCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
    for (auto intercept : layer_data->disp_post_rec_CmdBuildAccelerationStructuresIndirectKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL BuildAccelerationStructuresKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      deferredOperation,
    uint32_t                                    infoCount,
    const VkAccelerationStructureBuildGeometryInfoKHR* pInfos,
    const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_BuildAccelerationStructuresKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_BuildAccelerationStructuresKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
    }
    VkResult result = DispatchBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
    for (auto intercept : layer_data->disp_post_rec_BuildAccelerationStructuresKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CopyAccelerationStructureKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      deferredOperation,
    const VkCopyAccelerationStructureInfoKHR*   pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CopyAccelerationStructureKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CopyAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
    }
    VkResult result = DispatchCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
    for (auto intercept : layer_data->disp_post_rec_CopyAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCopyAccelerationStructureKHR(device, deferredOperation, pInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CopyAccelerationStructureToMemoryKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      deferredOperation,
    const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CopyAccelerationStructureToMemoryKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CopyAccelerationStructureToMemoryKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
    }
    VkResult result = DispatchCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
    for (auto intercept : layer_data->disp_post_rec_CopyAccelerationStructureToMemoryKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL CopyMemoryToAccelerationStructureKHR(
    VkDevice                                    device,
    VkDeferredOperationKHR                      deferredOperation,
    const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CopyMemoryToAccelerationStructureKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_CopyMemoryToAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
    }
    VkResult result = DispatchCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
    for (auto intercept : layer_data->disp_post_rec_CopyMemoryToAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo, result);
    }
    return result;
}

VKAPI_ATTR VkResult VKAPI_CALL WriteAccelerationStructuresPropertiesKHR(
    VkDevice                                    device,
    uint32_t                                    accelerationStructureCount,
    const VkAccelerationStructureKHR*           pAccelerationStructures,
    VkQueryType                                 queryType,
    size_t                                      dataSize,
    void*                                       pData,
    size_t                                      stride) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_WriteAccelerationStructuresPropertiesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_WriteAccelerationStructuresPropertiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
    }
    VkResult result = DispatchWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
    for (auto intercept : layer_data->disp_post_rec_WriteAccelerationStructuresPropertiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdCopyAccelerationStructureKHR(
    VkCommandBuffer                             commandBuffer,
    const VkCopyAccelerationStructureInfoKHR*   pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyAccelerationStructureKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
    }
    DispatchCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyAccelerationStructureToMemoryKHR(
    VkCommandBuffer                             commandBuffer,
    const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyAccelerationStructureToMemoryKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyAccelerationStructureToMemoryKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
    }
    DispatchCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyAccelerationStructureToMemoryKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
    }
}

VKAPI_ATTR void VKAPI_CALL CmdCopyMemoryToAccelerationStructureKHR(
    VkCommandBuffer                             commandBuffer,
    const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdCopyMemoryToAccelerationStructureKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdCopyMemoryToAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
    }
    DispatchCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
    for (auto intercept : layer_data->disp_post_rec_CmdCopyMemoryToAccelerationStructureKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
    }
}

VKAPI_ATTR VkDeviceAddress VKAPI_CALL GetAccelerationStructureDeviceAddressKHR(
    VkDevice                                    device,
    const VkAccelerationStructureDeviceAddressInfoKHR* pInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetAccelerationStructureDeviceAddressKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetAccelerationStructureDeviceAddressKHR(device, pInfo);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetAccelerationStructureDeviceAddressKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetAccelerationStructureDeviceAddressKHR(device, pInfo);
    }
    VkDeviceAddress result = DispatchGetAccelerationStructureDeviceAddressKHR(device, pInfo);
    for (auto intercept : layer_data->disp_post_rec_GetAccelerationStructureDeviceAddressKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetAccelerationStructureDeviceAddressKHR(device, pInfo, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdWriteAccelerationStructuresPropertiesKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    accelerationStructureCount,
    const VkAccelerationStructureKHR*           pAccelerationStructures,
    VkQueryType                                 queryType,
    VkQueryPool                                 queryPool,
    uint32_t                                    firstQuery) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdWriteAccelerationStructuresPropertiesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdWriteAccelerationStructuresPropertiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
    }
    DispatchCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
    for (auto intercept : layer_data->disp_post_rec_CmdWriteAccelerationStructuresPropertiesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
    }
}

VKAPI_ATTR void VKAPI_CALL GetDeviceAccelerationStructureCompatibilityKHR(
    VkDevice                                    device,
    const VkAccelerationStructureVersionInfoKHR* pVersionInfo,
    VkAccelerationStructureCompatibilityKHR*    pCompatibility) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetDeviceAccelerationStructureCompatibilityKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetDeviceAccelerationStructureCompatibilityKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
    }
    DispatchGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
    for (auto intercept : layer_data->disp_post_rec_GetDeviceAccelerationStructureCompatibilityKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
    }
}

VKAPI_ATTR void VKAPI_CALL GetAccelerationStructureBuildSizesKHR(
    VkDevice                                    device,
    VkAccelerationStructureBuildTypeKHR         buildType,
    const VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo,
    const uint32_t*                             pMaxPrimitiveCounts,
    VkAccelerationStructureBuildSizesInfoKHR*   pSizeInfo) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetAccelerationStructureBuildSizesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetAccelerationStructureBuildSizesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
    }
    DispatchGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
    for (auto intercept : layer_data->disp_post_rec_GetAccelerationStructureBuildSizesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
    }
}


VKAPI_ATTR void VKAPI_CALL CmdTraceRaysKHR(
    VkCommandBuffer                             commandBuffer,
    const VkStridedDeviceAddressRegionKHR*      pRaygenShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR*      pMissShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR*      pHitShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR*      pCallableShaderBindingTable,
    uint32_t                                    width,
    uint32_t                                    height,
    uint32_t                                    depth) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdTraceRaysKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdTraceRaysKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
    }
    DispatchCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
    for (auto intercept : layer_data->disp_post_rec_CmdTraceRaysKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
    }
}

VKAPI_ATTR VkResult VKAPI_CALL GetRayTracingCaptureReplayShaderGroupHandlesKHR(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    firstGroup,
    uint32_t                                    groupCount,
    size_t                                      dataSize,
    void*                                       pData) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetRayTracingCaptureReplayShaderGroupHandlesKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
        if (skip) return VK_ERROR_VALIDATION_FAILED_EXT;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetRayTracingCaptureReplayShaderGroupHandlesKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
    }
    VkResult result = DispatchGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
    for (auto intercept : layer_data->disp_post_rec_GetRayTracingCaptureReplayShaderGroupHandlesKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData, result);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdTraceRaysIndirectKHR(
    VkCommandBuffer                             commandBuffer,
    const VkStridedDeviceAddressRegionKHR*      pRaygenShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR*      pMissShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR*      pHitShaderBindingTable,
    const VkStridedDeviceAddressRegionKHR*      pCallableShaderBindingTable,
    VkDeviceAddress                             indirectDeviceAddress) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdTraceRaysIndirectKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdTraceRaysIndirectKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
    }
    DispatchCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
    for (auto intercept : layer_data->disp_post_rec_CmdTraceRaysIndirectKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
    }
}

VKAPI_ATTR VkDeviceSize VKAPI_CALL GetRayTracingShaderGroupStackSizeKHR(
    VkDevice                                    device,
    VkPipeline                                  pipeline,
    uint32_t                                    group,
    VkShaderGroupShaderKHR                      groupShader) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(device), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_GetRayTracingShaderGroupStackSizeKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
        if (skip) return 0;
    }
    for (auto intercept : layer_data->disp_pre_rec_GetRayTracingShaderGroupStackSizeKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
    }
    VkDeviceSize result = DispatchGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
    for (auto intercept : layer_data->disp_post_rec_GetRayTracingShaderGroupStackSizeKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
    }
    return result;
}

VKAPI_ATTR void VKAPI_CALL CmdSetRayTracingPipelineStackSizeKHR(
    VkCommandBuffer                             commandBuffer,
    uint32_t                                    pipelineStackSize) {
    auto layer_data = GetLayerDataPtr(get_dispatch_key(commandBuffer), layer_data_map);
    bool skip = false;
    for (auto intercept : layer_data->disp_pre_val_CmdSetRayTracingPipelineStackSizeKHR) {
        auto lock = intercept->read_lock();
        skip |= (const_cast<const ValidationObject*>(intercept))->PreCallValidateCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
        if (skip) return;
    }
    for (auto intercept : layer_data->disp_pre_rec_CmdSetRayTracingPipelineStackSizeKHR) {
        auto lock = intercept->write_lock();
        intercept->PreCallRecordCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
    }
    DispatchCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
    for (auto intercept : layer_data->disp_post_rec_CmdSetRayTracingPipelineStackSizeKHR) {
        auto lock = intercept->write_lock();
        intercept->PostCallRecordCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
    }
}


// Map of intercepted ApiName to its associated function data
#ifdef _MSC_VER
#pragma warning( suppress: 6262 ) // VS analysis: this uses more than 16 kiB, which is fine here at global scope
#endif
const std::unordered_map<std::string, function_data> name_to_funcptr_map = {
    {"vkCreateInstance", {kFuncTypeInst, (void*)CreateInstance}},
    {"vkDestroyInstance", {kFuncTypeInst, (void*)DestroyInstance}},
    {"vkEnumeratePhysicalDevices", {kFuncTypeInst, (void*)EnumeratePhysicalDevices}},
    {"vkGetPhysicalDeviceFeatures", {kFuncTypePdev, (void*)GetPhysicalDeviceFeatures}},
    {"vkGetPhysicalDeviceFormatProperties", {kFuncTypePdev, (void*)GetPhysicalDeviceFormatProperties}},
    {"vkGetPhysicalDeviceImageFormatProperties", {kFuncTypePdev, (void*)GetPhysicalDeviceImageFormatProperties}},
    {"vkGetPhysicalDeviceProperties", {kFuncTypePdev, (void*)GetPhysicalDeviceProperties}},
    {"vkGetPhysicalDeviceQueueFamilyProperties", {kFuncTypePdev, (void*)GetPhysicalDeviceQueueFamilyProperties}},
    {"vkGetPhysicalDeviceMemoryProperties", {kFuncTypePdev, (void*)GetPhysicalDeviceMemoryProperties}},
    {"vkGetInstanceProcAddr", {kFuncTypeInst, (void*)GetInstanceProcAddr}},
    {"vkGetDeviceProcAddr", {kFuncTypeDev, (void*)GetDeviceProcAddr}},
    {"vkCreateDevice", {kFuncTypePdev, (void*)CreateDevice}},
    {"vkDestroyDevice", {kFuncTypeDev, (void*)DestroyDevice}},
    {"vkEnumerateInstanceExtensionProperties", {kFuncTypeInst, (void*)EnumerateInstanceExtensionProperties}},
    {"vkEnumerateDeviceExtensionProperties", {kFuncTypePdev, (void*)EnumerateDeviceExtensionProperties}},
    {"vkEnumerateInstanceLayerProperties", {kFuncTypeInst, (void*)EnumerateInstanceLayerProperties}},
    {"vkEnumerateDeviceLayerProperties", {kFuncTypePdev, (void*)EnumerateDeviceLayerProperties}},
    {"vkGetDeviceQueue", {kFuncTypeDev, (void*)GetDeviceQueue}},
    {"vkQueueSubmit", {kFuncTypeDev, (void*)QueueSubmit}},
    {"vkQueueWaitIdle", {kFuncTypeDev, (void*)QueueWaitIdle}},
    {"vkDeviceWaitIdle", {kFuncTypeDev, (void*)DeviceWaitIdle}},
    {"vkAllocateMemory", {kFuncTypeDev, (void*)AllocateMemory}},
    {"vkFreeMemory", {kFuncTypeDev, (void*)FreeMemory}},
    {"vkMapMemory", {kFuncTypeDev, (void*)MapMemory}},
    {"vkUnmapMemory", {kFuncTypeDev, (void*)UnmapMemory}},
    {"vkFlushMappedMemoryRanges", {kFuncTypeDev, (void*)FlushMappedMemoryRanges}},
    {"vkInvalidateMappedMemoryRanges", {kFuncTypeDev, (void*)InvalidateMappedMemoryRanges}},
    {"vkGetDeviceMemoryCommitment", {kFuncTypeDev, (void*)GetDeviceMemoryCommitment}},
    {"vkBindBufferMemory", {kFuncTypeDev, (void*)BindBufferMemory}},
    {"vkBindImageMemory", {kFuncTypeDev, (void*)BindImageMemory}},
    {"vkGetBufferMemoryRequirements", {kFuncTypeDev, (void*)GetBufferMemoryRequirements}},
    {"vkGetImageMemoryRequirements", {kFuncTypeDev, (void*)GetImageMemoryRequirements}},
    {"vkGetImageSparseMemoryRequirements", {kFuncTypeDev, (void*)GetImageSparseMemoryRequirements}},
    {"vkGetPhysicalDeviceSparseImageFormatProperties", {kFuncTypePdev, (void*)GetPhysicalDeviceSparseImageFormatProperties}},
    {"vkQueueBindSparse", {kFuncTypeDev, (void*)QueueBindSparse}},
    {"vkCreateFence", {kFuncTypeDev, (void*)CreateFence}},
    {"vkDestroyFence", {kFuncTypeDev, (void*)DestroyFence}},
    {"vkResetFences", {kFuncTypeDev, (void*)ResetFences}},
    {"vkGetFenceStatus", {kFuncTypeDev, (void*)GetFenceStatus}},
    {"vkWaitForFences", {kFuncTypeDev, (void*)WaitForFences}},
    {"vkCreateSemaphore", {kFuncTypeDev, (void*)CreateSemaphore}},
    {"vkDestroySemaphore", {kFuncTypeDev, (void*)DestroySemaphore}},
    {"vkCreateEvent", {kFuncTypeDev, (void*)CreateEvent}},
    {"vkDestroyEvent", {kFuncTypeDev, (void*)DestroyEvent}},
    {"vkGetEventStatus", {kFuncTypeDev, (void*)GetEventStatus}},
    {"vkSetEvent", {kFuncTypeDev, (void*)SetEvent}},
    {"vkResetEvent", {kFuncTypeDev, (void*)ResetEvent}},
    {"vkCreateQueryPool", {kFuncTypeDev, (void*)CreateQueryPool}},
    {"vkDestroyQueryPool", {kFuncTypeDev, (void*)DestroyQueryPool}},
    {"vkGetQueryPoolResults", {kFuncTypeDev, (void*)GetQueryPoolResults}},
    {"vkCreateBuffer", {kFuncTypeDev, (void*)CreateBuffer}},
    {"vkDestroyBuffer", {kFuncTypeDev, (void*)DestroyBuffer}},
    {"vkCreateBufferView", {kFuncTypeDev, (void*)CreateBufferView}},
    {"vkDestroyBufferView", {kFuncTypeDev, (void*)DestroyBufferView}},
    {"vkCreateImage", {kFuncTypeDev, (void*)CreateImage}},
    {"vkDestroyImage", {kFuncTypeDev, (void*)DestroyImage}},
    {"vkGetImageSubresourceLayout", {kFuncTypeDev, (void*)GetImageSubresourceLayout}},
    {"vkCreateImageView", {kFuncTypeDev, (void*)CreateImageView}},
    {"vkDestroyImageView", {kFuncTypeDev, (void*)DestroyImageView}},
    {"vkCreateShaderModule", {kFuncTypeDev, (void*)CreateShaderModule}},
    {"vkDestroyShaderModule", {kFuncTypeDev, (void*)DestroyShaderModule}},
    {"vkCreatePipelineCache", {kFuncTypeDev, (void*)CreatePipelineCache}},
    {"vkDestroyPipelineCache", {kFuncTypeDev, (void*)DestroyPipelineCache}},
    {"vkGetPipelineCacheData", {kFuncTypeDev, (void*)GetPipelineCacheData}},
    {"vkMergePipelineCaches", {kFuncTypeDev, (void*)MergePipelineCaches}},
    {"vkCreateGraphicsPipelines", {kFuncTypeDev, (void*)CreateGraphicsPipelines}},
    {"vkCreateComputePipelines", {kFuncTypeDev, (void*)CreateComputePipelines}},
    {"vkDestroyPipeline", {kFuncTypeDev, (void*)DestroyPipeline}},
    {"vkCreatePipelineLayout", {kFuncTypeDev, (void*)CreatePipelineLayout}},
    {"vkDestroyPipelineLayout", {kFuncTypeDev, (void*)DestroyPipelineLayout}},
    {"vkCreateSampler", {kFuncTypeDev, (void*)CreateSampler}},
    {"vkDestroySampler", {kFuncTypeDev, (void*)DestroySampler}},
    {"vkCreateDescriptorSetLayout", {kFuncTypeDev, (void*)CreateDescriptorSetLayout}},
    {"vkDestroyDescriptorSetLayout", {kFuncTypeDev, (void*)DestroyDescriptorSetLayout}},
    {"vkCreateDescriptorPool", {kFuncTypeDev, (void*)CreateDescriptorPool}},
    {"vkDestroyDescriptorPool", {kFuncTypeDev, (void*)DestroyDescriptorPool}},
    {"vkResetDescriptorPool", {kFuncTypeDev, (void*)ResetDescriptorPool}},
    {"vkAllocateDescriptorSets", {kFuncTypeDev, (void*)AllocateDescriptorSets}},
    {"vkFreeDescriptorSets", {kFuncTypeDev, (void*)FreeDescriptorSets}},
    {"vkUpdateDescriptorSets", {kFuncTypeDev, (void*)UpdateDescriptorSets}},
    {"vkCreateFramebuffer", {kFuncTypeDev, (void*)CreateFramebuffer}},
    {"vkDestroyFramebuffer", {kFuncTypeDev, (void*)DestroyFramebuffer}},
    {"vkCreateRenderPass", {kFuncTypeDev, (void*)CreateRenderPass}},
    {"vkDestroyRenderPass", {kFuncTypeDev, (void*)DestroyRenderPass}},
    {"vkGetRenderAreaGranularity", {kFuncTypeDev, (void*)GetRenderAreaGranularity}},
    {"vkCreateCommandPool", {kFuncTypeDev, (void*)CreateCommandPool}},
    {"vkDestroyCommandPool", {kFuncTypeDev, (void*)DestroyCommandPool}},
    {"vkResetCommandPool", {kFuncTypeDev, (void*)ResetCommandPool}},
    {"vkAllocateCommandBuffers", {kFuncTypeDev, (void*)AllocateCommandBuffers}},
    {"vkFreeCommandBuffers", {kFuncTypeDev, (void*)FreeCommandBuffers}},
    {"vkBeginCommandBuffer", {kFuncTypeDev, (void*)BeginCommandBuffer}},
    {"vkEndCommandBuffer", {kFuncTypeDev, (void*)EndCommandBuffer}},
    {"vkResetCommandBuffer", {kFuncTypeDev, (void*)ResetCommandBuffer}},
    {"vkCmdBindPipeline", {kFuncTypeDev, (void*)CmdBindPipeline}},
    {"vkCmdSetViewport", {kFuncTypeDev, (void*)CmdSetViewport}},
    {"vkCmdSetScissor", {kFuncTypeDev, (void*)CmdSetScissor}},
    {"vkCmdSetLineWidth", {kFuncTypeDev, (void*)CmdSetLineWidth}},
    {"vkCmdSetDepthBias", {kFuncTypeDev, (void*)CmdSetDepthBias}},
    {"vkCmdSetBlendConstants", {kFuncTypeDev, (void*)CmdSetBlendConstants}},
    {"vkCmdSetDepthBounds", {kFuncTypeDev, (void*)CmdSetDepthBounds}},
    {"vkCmdSetStencilCompareMask", {kFuncTypeDev, (void*)CmdSetStencilCompareMask}},
    {"vkCmdSetStencilWriteMask", {kFuncTypeDev, (void*)CmdSetStencilWriteMask}},
    {"vkCmdSetStencilReference", {kFuncTypeDev, (void*)CmdSetStencilReference}},
    {"vkCmdBindDescriptorSets", {kFuncTypeDev, (void*)CmdBindDescriptorSets}},
    {"vkCmdBindIndexBuffer", {kFuncTypeDev, (void*)CmdBindIndexBuffer}},
    {"vkCmdBindVertexBuffers", {kFuncTypeDev, (void*)CmdBindVertexBuffers}},
    {"vkCmdDraw", {kFuncTypeDev, (void*)CmdDraw}},
    {"vkCmdDrawIndexed", {kFuncTypeDev, (void*)CmdDrawIndexed}},
    {"vkCmdDrawIndirect", {kFuncTypeDev, (void*)CmdDrawIndirect}},
    {"vkCmdDrawIndexedIndirect", {kFuncTypeDev, (void*)CmdDrawIndexedIndirect}},
    {"vkCmdDispatch", {kFuncTypeDev, (void*)CmdDispatch}},
    {"vkCmdDispatchIndirect", {kFuncTypeDev, (void*)CmdDispatchIndirect}},
    {"vkCmdCopyBuffer", {kFuncTypeDev, (void*)CmdCopyBuffer}},
    {"vkCmdCopyImage", {kFuncTypeDev, (void*)CmdCopyImage}},
    {"vkCmdBlitImage", {kFuncTypeDev, (void*)CmdBlitImage}},
    {"vkCmdCopyBufferToImage", {kFuncTypeDev, (void*)CmdCopyBufferToImage}},
    {"vkCmdCopyImageToBuffer", {kFuncTypeDev, (void*)CmdCopyImageToBuffer}},
    {"vkCmdUpdateBuffer", {kFuncTypeDev, (void*)CmdUpdateBuffer}},
    {"vkCmdFillBuffer", {kFuncTypeDev, (void*)CmdFillBuffer}},
    {"vkCmdClearColorImage", {kFuncTypeDev, (void*)CmdClearColorImage}},
    {"vkCmdClearDepthStencilImage", {kFuncTypeDev, (void*)CmdClearDepthStencilImage}},
    {"vkCmdClearAttachments", {kFuncTypeDev, (void*)CmdClearAttachments}},
    {"vkCmdResolveImage", {kFuncTypeDev, (void*)CmdResolveImage}},
    {"vkCmdSetEvent", {kFuncTypeDev, (void*)CmdSetEvent}},
    {"vkCmdResetEvent", {kFuncTypeDev, (void*)CmdResetEvent}},
    {"vkCmdWaitEvents", {kFuncTypeDev, (void*)CmdWaitEvents}},
    {"vkCmdPipelineBarrier", {kFuncTypeDev, (void*)CmdPipelineBarrier}},
    {"vkCmdBeginQuery", {kFuncTypeDev, (void*)CmdBeginQuery}},
    {"vkCmdEndQuery", {kFuncTypeDev, (void*)CmdEndQuery}},
    {"vkCmdResetQueryPool", {kFuncTypeDev, (void*)CmdResetQueryPool}},
    {"vkCmdWriteTimestamp", {kFuncTypeDev, (void*)CmdWriteTimestamp}},
    {"vkCmdCopyQueryPoolResults", {kFuncTypeDev, (void*)CmdCopyQueryPoolResults}},
    {"vkCmdPushConstants", {kFuncTypeDev, (void*)CmdPushConstants}},
    {"vkCmdBeginRenderPass", {kFuncTypeDev, (void*)CmdBeginRenderPass}},
    {"vkCmdNextSubpass", {kFuncTypeDev, (void*)CmdNextSubpass}},
    {"vkCmdEndRenderPass", {kFuncTypeDev, (void*)CmdEndRenderPass}},
    {"vkCmdExecuteCommands", {kFuncTypeDev, (void*)CmdExecuteCommands}},
    {"vkBindBufferMemory2", {kFuncTypeDev, (void*)BindBufferMemory2}},
    {"vkBindImageMemory2", {kFuncTypeDev, (void*)BindImageMemory2}},
    {"vkGetDeviceGroupPeerMemoryFeatures", {kFuncTypeDev, (void*)GetDeviceGroupPeerMemoryFeatures}},
    {"vkCmdSetDeviceMask", {kFuncTypeDev, (void*)CmdSetDeviceMask}},
    {"vkCmdDispatchBase", {kFuncTypeDev, (void*)CmdDispatchBase}},
    {"vkEnumeratePhysicalDeviceGroups", {kFuncTypeInst, (void*)EnumeratePhysicalDeviceGroups}},
    {"vkGetImageMemoryRequirements2", {kFuncTypeDev, (void*)GetImageMemoryRequirements2}},
    {"vkGetBufferMemoryRequirements2", {kFuncTypeDev, (void*)GetBufferMemoryRequirements2}},
    {"vkGetImageSparseMemoryRequirements2", {kFuncTypeDev, (void*)GetImageSparseMemoryRequirements2}},
    {"vkGetPhysicalDeviceFeatures2", {kFuncTypePdev, (void*)GetPhysicalDeviceFeatures2}},
    {"vkGetPhysicalDeviceProperties2", {kFuncTypePdev, (void*)GetPhysicalDeviceProperties2}},
    {"vkGetPhysicalDeviceFormatProperties2", {kFuncTypePdev, (void*)GetPhysicalDeviceFormatProperties2}},
    {"vkGetPhysicalDeviceImageFormatProperties2", {kFuncTypePdev, (void*)GetPhysicalDeviceImageFormatProperties2}},
    {"vkGetPhysicalDeviceQueueFamilyProperties2", {kFuncTypePdev, (void*)GetPhysicalDeviceQueueFamilyProperties2}},
    {"vkGetPhysicalDeviceMemoryProperties2", {kFuncTypePdev, (void*)GetPhysicalDeviceMemoryProperties2}},
    {"vkGetPhysicalDeviceSparseImageFormatProperties2", {kFuncTypePdev, (void*)GetPhysicalDeviceSparseImageFormatProperties2}},
    {"vkTrimCommandPool", {kFuncTypeDev, (void*)TrimCommandPool}},
    {"vkGetDeviceQueue2", {kFuncTypeDev, (void*)GetDeviceQueue2}},
    {"vkCreateSamplerYcbcrConversion", {kFuncTypeDev, (void*)CreateSamplerYcbcrConversion}},
    {"vkDestroySamplerYcbcrConversion", {kFuncTypeDev, (void*)DestroySamplerYcbcrConversion}},
    {"vkCreateDescriptorUpdateTemplate", {kFuncTypeDev, (void*)CreateDescriptorUpdateTemplate}},
    {"vkDestroyDescriptorUpdateTemplate", {kFuncTypeDev, (void*)DestroyDescriptorUpdateTemplate}},
    {"vkUpdateDescriptorSetWithTemplate", {kFuncTypeDev, (void*)UpdateDescriptorSetWithTemplate}},
    {"vkGetPhysicalDeviceExternalBufferProperties", {kFuncTypePdev, (void*)GetPhysicalDeviceExternalBufferProperties}},
    {"vkGetPhysicalDeviceExternalFenceProperties", {kFuncTypePdev, (void*)GetPhysicalDeviceExternalFenceProperties}},
    {"vkGetPhysicalDeviceExternalSemaphoreProperties", {kFuncTypePdev, (void*)GetPhysicalDeviceExternalSemaphoreProperties}},
    {"vkGetDescriptorSetLayoutSupport", {kFuncTypeDev, (void*)GetDescriptorSetLayoutSupport}},
    {"vkCmdDrawIndirectCount", {kFuncTypeDev, (void*)CmdDrawIndirectCount}},
    {"vkCmdDrawIndexedIndirectCount", {kFuncTypeDev, (void*)CmdDrawIndexedIndirectCount}},
    {"vkCreateRenderPass2", {kFuncTypeDev, (void*)CreateRenderPass2}},
    {"vkCmdBeginRenderPass2", {kFuncTypeDev, (void*)CmdBeginRenderPass2}},
    {"vkCmdNextSubpass2", {kFuncTypeDev, (void*)CmdNextSubpass2}},
    {"vkCmdEndRenderPass2", {kFuncTypeDev, (void*)CmdEndRenderPass2}},
    {"vkResetQueryPool", {kFuncTypeDev, (void*)ResetQueryPool}},
    {"vkGetSemaphoreCounterValue", {kFuncTypeDev, (void*)GetSemaphoreCounterValue}},
    {"vkWaitSemaphores", {kFuncTypeDev, (void*)WaitSemaphores}},
    {"vkSignalSemaphore", {kFuncTypeDev, (void*)SignalSemaphore}},
    {"vkGetBufferDeviceAddress", {kFuncTypeDev, (void*)GetBufferDeviceAddress}},
    {"vkGetBufferOpaqueCaptureAddress", {kFuncTypeDev, (void*)GetBufferOpaqueCaptureAddress}},
    {"vkGetDeviceMemoryOpaqueCaptureAddress", {kFuncTypeDev, (void*)GetDeviceMemoryOpaqueCaptureAddress}},
    {"vkDestroySurfaceKHR", {kFuncTypeInst, (void*)DestroySurfaceKHR}},
    {"vkGetPhysicalDeviceSurfaceSupportKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceSurfaceSupportKHR}},
    {"vkGetPhysicalDeviceSurfaceCapabilitiesKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceSurfaceCapabilitiesKHR}},
    {"vkGetPhysicalDeviceSurfaceFormatsKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceSurfaceFormatsKHR}},
    {"vkGetPhysicalDeviceSurfacePresentModesKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceSurfacePresentModesKHR}},
    {"vkCreateSwapchainKHR", {kFuncTypeDev, (void*)CreateSwapchainKHR}},
    {"vkDestroySwapchainKHR", {kFuncTypeDev, (void*)DestroySwapchainKHR}},
    {"vkGetSwapchainImagesKHR", {kFuncTypeDev, (void*)GetSwapchainImagesKHR}},
    {"vkAcquireNextImageKHR", {kFuncTypeDev, (void*)AcquireNextImageKHR}},
    {"vkQueuePresentKHR", {kFuncTypeDev, (void*)QueuePresentKHR}},
    {"vkGetDeviceGroupPresentCapabilitiesKHR", {kFuncTypeDev, (void*)GetDeviceGroupPresentCapabilitiesKHR}},
    {"vkGetDeviceGroupSurfacePresentModesKHR", {kFuncTypeDev, (void*)GetDeviceGroupSurfacePresentModesKHR}},
    {"vkGetPhysicalDevicePresentRectanglesKHR", {kFuncTypePdev, (void*)GetPhysicalDevicePresentRectanglesKHR}},
    {"vkAcquireNextImage2KHR", {kFuncTypeDev, (void*)AcquireNextImage2KHR}},
    {"vkGetPhysicalDeviceDisplayPropertiesKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceDisplayPropertiesKHR}},
    {"vkGetPhysicalDeviceDisplayPlanePropertiesKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceDisplayPlanePropertiesKHR}},
    {"vkGetDisplayPlaneSupportedDisplaysKHR", {kFuncTypePdev, (void*)GetDisplayPlaneSupportedDisplaysKHR}},
    {"vkGetDisplayModePropertiesKHR", {kFuncTypePdev, (void*)GetDisplayModePropertiesKHR}},
    {"vkCreateDisplayModeKHR", {kFuncTypePdev, (void*)CreateDisplayModeKHR}},
    {"vkGetDisplayPlaneCapabilitiesKHR", {kFuncTypePdev, (void*)GetDisplayPlaneCapabilitiesKHR}},
    {"vkCreateDisplayPlaneSurfaceKHR", {kFuncTypeInst, (void*)CreateDisplayPlaneSurfaceKHR}},
    {"vkCreateSharedSwapchainsKHR", {kFuncTypeDev, (void*)CreateSharedSwapchainsKHR}},
#ifdef VK_USE_PLATFORM_XLIB_KHR
    {"vkCreateXlibSurfaceKHR", {kFuncTypeInst, (void*)CreateXlibSurfaceKHR}},
#endif
#ifdef VK_USE_PLATFORM_XLIB_KHR
    {"vkGetPhysicalDeviceXlibPresentationSupportKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceXlibPresentationSupportKHR}},
#endif
#ifdef VK_USE_PLATFORM_XCB_KHR
    {"vkCreateXcbSurfaceKHR", {kFuncTypeInst, (void*)CreateXcbSurfaceKHR}},
#endif
#ifdef VK_USE_PLATFORM_XCB_KHR
    {"vkGetPhysicalDeviceXcbPresentationSupportKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceXcbPresentationSupportKHR}},
#endif
#ifdef VK_USE_PLATFORM_WAYLAND_KHR
    {"vkCreateWaylandSurfaceKHR", {kFuncTypeInst, (void*)CreateWaylandSurfaceKHR}},
#endif
#ifdef VK_USE_PLATFORM_WAYLAND_KHR
    {"vkGetPhysicalDeviceWaylandPresentationSupportKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceWaylandPresentationSupportKHR}},
#endif
#ifdef VK_USE_PLATFORM_ANDROID_KHR
    {"vkCreateAndroidSurfaceKHR", {kFuncTypeInst, (void*)CreateAndroidSurfaceKHR}},
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkCreateWin32SurfaceKHR", {kFuncTypeInst, (void*)CreateWin32SurfaceKHR}},
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkGetPhysicalDeviceWin32PresentationSupportKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceWin32PresentationSupportKHR}},
#endif
    {"vkGetPhysicalDeviceFeatures2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceFeatures2KHR}},
    {"vkGetPhysicalDeviceProperties2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceProperties2KHR}},
    {"vkGetPhysicalDeviceFormatProperties2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceFormatProperties2KHR}},
    {"vkGetPhysicalDeviceImageFormatProperties2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceImageFormatProperties2KHR}},
    {"vkGetPhysicalDeviceQueueFamilyProperties2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceQueueFamilyProperties2KHR}},
    {"vkGetPhysicalDeviceMemoryProperties2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceMemoryProperties2KHR}},
    {"vkGetPhysicalDeviceSparseImageFormatProperties2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceSparseImageFormatProperties2KHR}},
    {"vkGetDeviceGroupPeerMemoryFeaturesKHR", {kFuncTypeDev, (void*)GetDeviceGroupPeerMemoryFeaturesKHR}},
    {"vkCmdSetDeviceMaskKHR", {kFuncTypeDev, (void*)CmdSetDeviceMaskKHR}},
    {"vkCmdDispatchBaseKHR", {kFuncTypeDev, (void*)CmdDispatchBaseKHR}},
    {"vkTrimCommandPoolKHR", {kFuncTypeDev, (void*)TrimCommandPoolKHR}},
    {"vkEnumeratePhysicalDeviceGroupsKHR", {kFuncTypeInst, (void*)EnumeratePhysicalDeviceGroupsKHR}},
    {"vkGetPhysicalDeviceExternalBufferPropertiesKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceExternalBufferPropertiesKHR}},
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkGetMemoryWin32HandleKHR", {kFuncTypeDev, (void*)GetMemoryWin32HandleKHR}},
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkGetMemoryWin32HandlePropertiesKHR", {kFuncTypeDev, (void*)GetMemoryWin32HandlePropertiesKHR}},
#endif
    {"vkGetMemoryFdKHR", {kFuncTypeDev, (void*)GetMemoryFdKHR}},
    {"vkGetMemoryFdPropertiesKHR", {kFuncTypeDev, (void*)GetMemoryFdPropertiesKHR}},
    {"vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceExternalSemaphorePropertiesKHR}},
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkImportSemaphoreWin32HandleKHR", {kFuncTypeDev, (void*)ImportSemaphoreWin32HandleKHR}},
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkGetSemaphoreWin32HandleKHR", {kFuncTypeDev, (void*)GetSemaphoreWin32HandleKHR}},
#endif
    {"vkImportSemaphoreFdKHR", {kFuncTypeDev, (void*)ImportSemaphoreFdKHR}},
    {"vkGetSemaphoreFdKHR", {kFuncTypeDev, (void*)GetSemaphoreFdKHR}},
    {"vkCmdPushDescriptorSetKHR", {kFuncTypeDev, (void*)CmdPushDescriptorSetKHR}},
    {"vkCmdPushDescriptorSetWithTemplateKHR", {kFuncTypeDev, (void*)CmdPushDescriptorSetWithTemplateKHR}},
    {"vkCreateDescriptorUpdateTemplateKHR", {kFuncTypeDev, (void*)CreateDescriptorUpdateTemplateKHR}},
    {"vkDestroyDescriptorUpdateTemplateKHR", {kFuncTypeDev, (void*)DestroyDescriptorUpdateTemplateKHR}},
    {"vkUpdateDescriptorSetWithTemplateKHR", {kFuncTypeDev, (void*)UpdateDescriptorSetWithTemplateKHR}},
    {"vkCreateRenderPass2KHR", {kFuncTypeDev, (void*)CreateRenderPass2KHR}},
    {"vkCmdBeginRenderPass2KHR", {kFuncTypeDev, (void*)CmdBeginRenderPass2KHR}},
    {"vkCmdNextSubpass2KHR", {kFuncTypeDev, (void*)CmdNextSubpass2KHR}},
    {"vkCmdEndRenderPass2KHR", {kFuncTypeDev, (void*)CmdEndRenderPass2KHR}},
    {"vkGetSwapchainStatusKHR", {kFuncTypeDev, (void*)GetSwapchainStatusKHR}},
    {"vkGetPhysicalDeviceExternalFencePropertiesKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceExternalFencePropertiesKHR}},
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkImportFenceWin32HandleKHR", {kFuncTypeDev, (void*)ImportFenceWin32HandleKHR}},
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkGetFenceWin32HandleKHR", {kFuncTypeDev, (void*)GetFenceWin32HandleKHR}},
#endif
    {"vkImportFenceFdKHR", {kFuncTypeDev, (void*)ImportFenceFdKHR}},
    {"vkGetFenceFdKHR", {kFuncTypeDev, (void*)GetFenceFdKHR}},
    {"vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", {kFuncTypePdev, (void*)EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR}},
    {"vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR}},
    {"vkAcquireProfilingLockKHR", {kFuncTypeDev, (void*)AcquireProfilingLockKHR}},
    {"vkReleaseProfilingLockKHR", {kFuncTypeDev, (void*)ReleaseProfilingLockKHR}},
    {"vkGetPhysicalDeviceSurfaceCapabilities2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceSurfaceCapabilities2KHR}},
    {"vkGetPhysicalDeviceSurfaceFormats2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceSurfaceFormats2KHR}},
    {"vkGetPhysicalDeviceDisplayProperties2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceDisplayProperties2KHR}},
    {"vkGetPhysicalDeviceDisplayPlaneProperties2KHR", {kFuncTypePdev, (void*)GetPhysicalDeviceDisplayPlaneProperties2KHR}},
    {"vkGetDisplayModeProperties2KHR", {kFuncTypePdev, (void*)GetDisplayModeProperties2KHR}},
    {"vkGetDisplayPlaneCapabilities2KHR", {kFuncTypePdev, (void*)GetDisplayPlaneCapabilities2KHR}},
    {"vkGetImageMemoryRequirements2KHR", {kFuncTypeDev, (void*)GetImageMemoryRequirements2KHR}},
    {"vkGetBufferMemoryRequirements2KHR", {kFuncTypeDev, (void*)GetBufferMemoryRequirements2KHR}},
    {"vkGetImageSparseMemoryRequirements2KHR", {kFuncTypeDev, (void*)GetImageSparseMemoryRequirements2KHR}},
    {"vkCreateSamplerYcbcrConversionKHR", {kFuncTypeDev, (void*)CreateSamplerYcbcrConversionKHR}},
    {"vkDestroySamplerYcbcrConversionKHR", {kFuncTypeDev, (void*)DestroySamplerYcbcrConversionKHR}},
    {"vkBindBufferMemory2KHR", {kFuncTypeDev, (void*)BindBufferMemory2KHR}},
    {"vkBindImageMemory2KHR", {kFuncTypeDev, (void*)BindImageMemory2KHR}},
    {"vkGetDescriptorSetLayoutSupportKHR", {kFuncTypeDev, (void*)GetDescriptorSetLayoutSupportKHR}},
    {"vkCmdDrawIndirectCountKHR", {kFuncTypeDev, (void*)CmdDrawIndirectCountKHR}},
    {"vkCmdDrawIndexedIndirectCountKHR", {kFuncTypeDev, (void*)CmdDrawIndexedIndirectCountKHR}},
    {"vkGetSemaphoreCounterValueKHR", {kFuncTypeDev, (void*)GetSemaphoreCounterValueKHR}},
    {"vkWaitSemaphoresKHR", {kFuncTypeDev, (void*)WaitSemaphoresKHR}},
    {"vkSignalSemaphoreKHR", {kFuncTypeDev, (void*)SignalSemaphoreKHR}},
    {"vkGetPhysicalDeviceFragmentShadingRatesKHR", {kFuncTypePdev, (void*)GetPhysicalDeviceFragmentShadingRatesKHR}},
    {"vkCmdSetFragmentShadingRateKHR", {kFuncTypeDev, (void*)CmdSetFragmentShadingRateKHR}},
    {"vkGetBufferDeviceAddressKHR", {kFuncTypeDev, (void*)GetBufferDeviceAddressKHR}},
    {"vkGetBufferOpaqueCaptureAddressKHR", {kFuncTypeDev, (void*)GetBufferOpaqueCaptureAddressKHR}},
    {"vkGetDeviceMemoryOpaqueCaptureAddressKHR", {kFuncTypeDev, (void*)GetDeviceMemoryOpaqueCaptureAddressKHR}},
    {"vkCreateDeferredOperationKHR", {kFuncTypeDev, (void*)CreateDeferredOperationKHR}},
    {"vkDestroyDeferredOperationKHR", {kFuncTypeDev, (void*)DestroyDeferredOperationKHR}},
    {"vkGetDeferredOperationMaxConcurrencyKHR", {kFuncTypeDev, (void*)GetDeferredOperationMaxConcurrencyKHR}},
    {"vkGetDeferredOperationResultKHR", {kFuncTypeDev, (void*)GetDeferredOperationResultKHR}},
    {"vkDeferredOperationJoinKHR", {kFuncTypeDev, (void*)DeferredOperationJoinKHR}},
    {"vkGetPipelineExecutablePropertiesKHR", {kFuncTypeDev, (void*)GetPipelineExecutablePropertiesKHR}},
    {"vkGetPipelineExecutableStatisticsKHR", {kFuncTypeDev, (void*)GetPipelineExecutableStatisticsKHR}},
    {"vkGetPipelineExecutableInternalRepresentationsKHR", {kFuncTypeDev, (void*)GetPipelineExecutableInternalRepresentationsKHR}},
    {"vkCmdCopyBuffer2KHR", {kFuncTypeDev, (void*)CmdCopyBuffer2KHR}},
    {"vkCmdCopyImage2KHR", {kFuncTypeDev, (void*)CmdCopyImage2KHR}},
    {"vkCmdCopyBufferToImage2KHR", {kFuncTypeDev, (void*)CmdCopyBufferToImage2KHR}},
    {"vkCmdCopyImageToBuffer2KHR", {kFuncTypeDev, (void*)CmdCopyImageToBuffer2KHR}},
    {"vkCmdBlitImage2KHR", {kFuncTypeDev, (void*)CmdBlitImage2KHR}},
    {"vkCmdResolveImage2KHR", {kFuncTypeDev, (void*)CmdResolveImage2KHR}},
    {"vkCreateDebugReportCallbackEXT", {kFuncTypeInst, (void*)CreateDebugReportCallbackEXT}},
    {"vkDestroyDebugReportCallbackEXT", {kFuncTypeInst, (void*)DestroyDebugReportCallbackEXT}},
    {"vkDebugReportMessageEXT", {kFuncTypeInst, (void*)DebugReportMessageEXT}},
    {"vkDebugMarkerSetObjectTagEXT", {kFuncTypeDev, (void*)DebugMarkerSetObjectTagEXT}},
    {"vkDebugMarkerSetObjectNameEXT", {kFuncTypeDev, (void*)DebugMarkerSetObjectNameEXT}},
    {"vkCmdDebugMarkerBeginEXT", {kFuncTypeDev, (void*)CmdDebugMarkerBeginEXT}},
    {"vkCmdDebugMarkerEndEXT", {kFuncTypeDev, (void*)CmdDebugMarkerEndEXT}},
    {"vkCmdDebugMarkerInsertEXT", {kFuncTypeDev, (void*)CmdDebugMarkerInsertEXT}},
    {"vkCmdBindTransformFeedbackBuffersEXT", {kFuncTypeDev, (void*)CmdBindTransformFeedbackBuffersEXT}},
    {"vkCmdBeginTransformFeedbackEXT", {kFuncTypeDev, (void*)CmdBeginTransformFeedbackEXT}},
    {"vkCmdEndTransformFeedbackEXT", {kFuncTypeDev, (void*)CmdEndTransformFeedbackEXT}},
    {"vkCmdBeginQueryIndexedEXT", {kFuncTypeDev, (void*)CmdBeginQueryIndexedEXT}},
    {"vkCmdEndQueryIndexedEXT", {kFuncTypeDev, (void*)CmdEndQueryIndexedEXT}},
    {"vkCmdDrawIndirectByteCountEXT", {kFuncTypeDev, (void*)CmdDrawIndirectByteCountEXT}},
    {"vkGetImageViewHandleNVX", {kFuncTypeDev, (void*)GetImageViewHandleNVX}},
    {"vkGetImageViewAddressNVX", {kFuncTypeDev, (void*)GetImageViewAddressNVX}},
    {"vkCmdDrawIndirectCountAMD", {kFuncTypeDev, (void*)CmdDrawIndirectCountAMD}},
    {"vkCmdDrawIndexedIndirectCountAMD", {kFuncTypeDev, (void*)CmdDrawIndexedIndirectCountAMD}},
    {"vkGetShaderInfoAMD", {kFuncTypeDev, (void*)GetShaderInfoAMD}},
#ifdef VK_USE_PLATFORM_GGP
    {"vkCreateStreamDescriptorSurfaceGGP", {kFuncTypeInst, (void*)CreateStreamDescriptorSurfaceGGP}},
#endif
    {"vkGetPhysicalDeviceExternalImageFormatPropertiesNV", {kFuncTypePdev, (void*)GetPhysicalDeviceExternalImageFormatPropertiesNV}},
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkGetMemoryWin32HandleNV", {kFuncTypeDev, (void*)GetMemoryWin32HandleNV}},
#endif
#ifdef VK_USE_PLATFORM_VI_NN
    {"vkCreateViSurfaceNN", {kFuncTypeInst, (void*)CreateViSurfaceNN}},
#endif
    {"vkCmdBeginConditionalRenderingEXT", {kFuncTypeDev, (void*)CmdBeginConditionalRenderingEXT}},
    {"vkCmdEndConditionalRenderingEXT", {kFuncTypeDev, (void*)CmdEndConditionalRenderingEXT}},
    {"vkCmdSetViewportWScalingNV", {kFuncTypeDev, (void*)CmdSetViewportWScalingNV}},
    {"vkReleaseDisplayEXT", {kFuncTypePdev, (void*)ReleaseDisplayEXT}},
#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
    {"vkAcquireXlibDisplayEXT", {kFuncTypePdev, (void*)AcquireXlibDisplayEXT}},
#endif
#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
    {"vkGetRandROutputDisplayEXT", {kFuncTypePdev, (void*)GetRandROutputDisplayEXT}},
#endif
    {"vkGetPhysicalDeviceSurfaceCapabilities2EXT", {kFuncTypePdev, (void*)GetPhysicalDeviceSurfaceCapabilities2EXT}},
    {"vkDisplayPowerControlEXT", {kFuncTypeDev, (void*)DisplayPowerControlEXT}},
    {"vkRegisterDeviceEventEXT", {kFuncTypeDev, (void*)RegisterDeviceEventEXT}},
    {"vkRegisterDisplayEventEXT", {kFuncTypeDev, (void*)RegisterDisplayEventEXT}},
    {"vkGetSwapchainCounterEXT", {kFuncTypeDev, (void*)GetSwapchainCounterEXT}},
    {"vkGetRefreshCycleDurationGOOGLE", {kFuncTypeDev, (void*)GetRefreshCycleDurationGOOGLE}},
    {"vkGetPastPresentationTimingGOOGLE", {kFuncTypeDev, (void*)GetPastPresentationTimingGOOGLE}},
    {"vkCmdSetDiscardRectangleEXT", {kFuncTypeDev, (void*)CmdSetDiscardRectangleEXT}},
    {"vkSetHdrMetadataEXT", {kFuncTypeDev, (void*)SetHdrMetadataEXT}},
#ifdef VK_USE_PLATFORM_IOS_MVK
    {"vkCreateIOSSurfaceMVK", {kFuncTypeInst, (void*)CreateIOSSurfaceMVK}},
#endif
#ifdef VK_USE_PLATFORM_MACOS_MVK
    {"vkCreateMacOSSurfaceMVK", {kFuncTypeInst, (void*)CreateMacOSSurfaceMVK}},
#endif
    {"vkSetDebugUtilsObjectNameEXT", {kFuncTypeDev, (void*)SetDebugUtilsObjectNameEXT}},
    {"vkSetDebugUtilsObjectTagEXT", {kFuncTypeDev, (void*)SetDebugUtilsObjectTagEXT}},
    {"vkQueueBeginDebugUtilsLabelEXT", {kFuncTypeDev, (void*)QueueBeginDebugUtilsLabelEXT}},
    {"vkQueueEndDebugUtilsLabelEXT", {kFuncTypeDev, (void*)QueueEndDebugUtilsLabelEXT}},
    {"vkQueueInsertDebugUtilsLabelEXT", {kFuncTypeDev, (void*)QueueInsertDebugUtilsLabelEXT}},
    {"vkCmdBeginDebugUtilsLabelEXT", {kFuncTypeDev, (void*)CmdBeginDebugUtilsLabelEXT}},
    {"vkCmdEndDebugUtilsLabelEXT", {kFuncTypeDev, (void*)CmdEndDebugUtilsLabelEXT}},
    {"vkCmdInsertDebugUtilsLabelEXT", {kFuncTypeDev, (void*)CmdInsertDebugUtilsLabelEXT}},
    {"vkCreateDebugUtilsMessengerEXT", {kFuncTypeInst, (void*)CreateDebugUtilsMessengerEXT}},
    {"vkDestroyDebugUtilsMessengerEXT", {kFuncTypeInst, (void*)DestroyDebugUtilsMessengerEXT}},
    {"vkSubmitDebugUtilsMessageEXT", {kFuncTypeInst, (void*)SubmitDebugUtilsMessageEXT}},
#ifdef VK_USE_PLATFORM_ANDROID_KHR
    {"vkGetAndroidHardwareBufferPropertiesANDROID", {kFuncTypeDev, (void*)GetAndroidHardwareBufferPropertiesANDROID}},
#endif
#ifdef VK_USE_PLATFORM_ANDROID_KHR
    {"vkGetMemoryAndroidHardwareBufferANDROID", {kFuncTypeDev, (void*)GetMemoryAndroidHardwareBufferANDROID}},
#endif
    {"vkCmdSetSampleLocationsEXT", {kFuncTypeDev, (void*)CmdSetSampleLocationsEXT}},
    {"vkGetPhysicalDeviceMultisamplePropertiesEXT", {kFuncTypePdev, (void*)GetPhysicalDeviceMultisamplePropertiesEXT}},
    {"vkGetImageDrmFormatModifierPropertiesEXT", {kFuncTypeDev, (void*)GetImageDrmFormatModifierPropertiesEXT}},
    {"vkCreateValidationCacheEXT", {kFuncTypeDev, (void*)CreateValidationCacheEXT}},
    {"vkDestroyValidationCacheEXT", {kFuncTypeDev, (void*)DestroyValidationCacheEXT}},
    {"vkMergeValidationCachesEXT", {kFuncTypeDev, (void*)MergeValidationCachesEXT}},
    {"vkGetValidationCacheDataEXT", {kFuncTypeDev, (void*)GetValidationCacheDataEXT}},
    {"vkCmdBindShadingRateImageNV", {kFuncTypeDev, (void*)CmdBindShadingRateImageNV}},
    {"vkCmdSetViewportShadingRatePaletteNV", {kFuncTypeDev, (void*)CmdSetViewportShadingRatePaletteNV}},
    {"vkCmdSetCoarseSampleOrderNV", {kFuncTypeDev, (void*)CmdSetCoarseSampleOrderNV}},
    {"vkCreateAccelerationStructureNV", {kFuncTypeDev, (void*)CreateAccelerationStructureNV}},
    {"vkDestroyAccelerationStructureNV", {kFuncTypeDev, (void*)DestroyAccelerationStructureNV}},
    {"vkGetAccelerationStructureMemoryRequirementsNV", {kFuncTypeDev, (void*)GetAccelerationStructureMemoryRequirementsNV}},
    {"vkBindAccelerationStructureMemoryNV", {kFuncTypeDev, (void*)BindAccelerationStructureMemoryNV}},
    {"vkCmdBuildAccelerationStructureNV", {kFuncTypeDev, (void*)CmdBuildAccelerationStructureNV}},
    {"vkCmdCopyAccelerationStructureNV", {kFuncTypeDev, (void*)CmdCopyAccelerationStructureNV}},
    {"vkCmdTraceRaysNV", {kFuncTypeDev, (void*)CmdTraceRaysNV}},
    {"vkCreateRayTracingPipelinesNV", {kFuncTypeDev, (void*)CreateRayTracingPipelinesNV}},
    {"vkGetRayTracingShaderGroupHandlesKHR", {kFuncTypeDev, (void*)GetRayTracingShaderGroupHandlesKHR}},
    {"vkGetRayTracingShaderGroupHandlesNV", {kFuncTypeDev, (void*)GetRayTracingShaderGroupHandlesNV}},
    {"vkGetAccelerationStructureHandleNV", {kFuncTypeDev, (void*)GetAccelerationStructureHandleNV}},
    {"vkCmdWriteAccelerationStructuresPropertiesNV", {kFuncTypeDev, (void*)CmdWriteAccelerationStructuresPropertiesNV}},
    {"vkCompileDeferredNV", {kFuncTypeDev, (void*)CompileDeferredNV}},
    {"vkGetMemoryHostPointerPropertiesEXT", {kFuncTypeDev, (void*)GetMemoryHostPointerPropertiesEXT}},
    {"vkCmdWriteBufferMarkerAMD", {kFuncTypeDev, (void*)CmdWriteBufferMarkerAMD}},
    {"vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", {kFuncTypePdev, (void*)GetPhysicalDeviceCalibrateableTimeDomainsEXT}},
    {"vkGetCalibratedTimestampsEXT", {kFuncTypeDev, (void*)GetCalibratedTimestampsEXT}},
    {"vkCmdDrawMeshTasksNV", {kFuncTypeDev, (void*)CmdDrawMeshTasksNV}},
    {"vkCmdDrawMeshTasksIndirectNV", {kFuncTypeDev, (void*)CmdDrawMeshTasksIndirectNV}},
    {"vkCmdDrawMeshTasksIndirectCountNV", {kFuncTypeDev, (void*)CmdDrawMeshTasksIndirectCountNV}},
    {"vkCmdSetExclusiveScissorNV", {kFuncTypeDev, (void*)CmdSetExclusiveScissorNV}},
    {"vkCmdSetCheckpointNV", {kFuncTypeDev, (void*)CmdSetCheckpointNV}},
    {"vkGetQueueCheckpointDataNV", {kFuncTypeDev, (void*)GetQueueCheckpointDataNV}},
    {"vkInitializePerformanceApiINTEL", {kFuncTypeDev, (void*)InitializePerformanceApiINTEL}},
    {"vkUninitializePerformanceApiINTEL", {kFuncTypeDev, (void*)UninitializePerformanceApiINTEL}},
    {"vkCmdSetPerformanceMarkerINTEL", {kFuncTypeDev, (void*)CmdSetPerformanceMarkerINTEL}},
    {"vkCmdSetPerformanceStreamMarkerINTEL", {kFuncTypeDev, (void*)CmdSetPerformanceStreamMarkerINTEL}},
    {"vkCmdSetPerformanceOverrideINTEL", {kFuncTypeDev, (void*)CmdSetPerformanceOverrideINTEL}},
    {"vkAcquirePerformanceConfigurationINTEL", {kFuncTypeDev, (void*)AcquirePerformanceConfigurationINTEL}},
    {"vkReleasePerformanceConfigurationINTEL", {kFuncTypeDev, (void*)ReleasePerformanceConfigurationINTEL}},
    {"vkQueueSetPerformanceConfigurationINTEL", {kFuncTypeDev, (void*)QueueSetPerformanceConfigurationINTEL}},
    {"vkGetPerformanceParameterINTEL", {kFuncTypeDev, (void*)GetPerformanceParameterINTEL}},
    {"vkSetLocalDimmingAMD", {kFuncTypeDev, (void*)SetLocalDimmingAMD}},
#ifdef VK_USE_PLATFORM_FUCHSIA
    {"vkCreateImagePipeSurfaceFUCHSIA", {kFuncTypeInst, (void*)CreateImagePipeSurfaceFUCHSIA}},
#endif
#ifdef VK_USE_PLATFORM_METAL_EXT
    {"vkCreateMetalSurfaceEXT", {kFuncTypeInst, (void*)CreateMetalSurfaceEXT}},
#endif
    {"vkGetBufferDeviceAddressEXT", {kFuncTypeDev, (void*)GetBufferDeviceAddressEXT}},
    {"vkGetPhysicalDeviceToolPropertiesEXT", {kFuncTypePdev, (void*)GetPhysicalDeviceToolPropertiesEXT}},
    {"vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", {kFuncTypePdev, (void*)GetPhysicalDeviceCooperativeMatrixPropertiesNV}},
    {"vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV", {kFuncTypePdev, (void*)GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV}},
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkGetPhysicalDeviceSurfacePresentModes2EXT", {kFuncTypePdev, (void*)GetPhysicalDeviceSurfacePresentModes2EXT}},
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkAcquireFullScreenExclusiveModeEXT", {kFuncTypeDev, (void*)AcquireFullScreenExclusiveModeEXT}},
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkReleaseFullScreenExclusiveModeEXT", {kFuncTypeDev, (void*)ReleaseFullScreenExclusiveModeEXT}},
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkGetDeviceGroupSurfacePresentModes2EXT", {kFuncTypeDev, (void*)GetDeviceGroupSurfacePresentModes2EXT}},
#endif
    {"vkCreateHeadlessSurfaceEXT", {kFuncTypeInst, (void*)CreateHeadlessSurfaceEXT}},
    {"vkCmdSetLineStippleEXT", {kFuncTypeDev, (void*)CmdSetLineStippleEXT}},
    {"vkResetQueryPoolEXT", {kFuncTypeDev, (void*)ResetQueryPoolEXT}},
    {"vkCmdSetCullModeEXT", {kFuncTypeDev, (void*)CmdSetCullModeEXT}},
    {"vkCmdSetFrontFaceEXT", {kFuncTypeDev, (void*)CmdSetFrontFaceEXT}},
    {"vkCmdSetPrimitiveTopologyEXT", {kFuncTypeDev, (void*)CmdSetPrimitiveTopologyEXT}},
    {"vkCmdSetViewportWithCountEXT", {kFuncTypeDev, (void*)CmdSetViewportWithCountEXT}},
    {"vkCmdSetScissorWithCountEXT", {kFuncTypeDev, (void*)CmdSetScissorWithCountEXT}},
    {"vkCmdBindVertexBuffers2EXT", {kFuncTypeDev, (void*)CmdBindVertexBuffers2EXT}},
    {"vkCmdSetDepthTestEnableEXT", {kFuncTypeDev, (void*)CmdSetDepthTestEnableEXT}},
    {"vkCmdSetDepthWriteEnableEXT", {kFuncTypeDev, (void*)CmdSetDepthWriteEnableEXT}},
    {"vkCmdSetDepthCompareOpEXT", {kFuncTypeDev, (void*)CmdSetDepthCompareOpEXT}},
    {"vkCmdSetDepthBoundsTestEnableEXT", {kFuncTypeDev, (void*)CmdSetDepthBoundsTestEnableEXT}},
    {"vkCmdSetStencilTestEnableEXT", {kFuncTypeDev, (void*)CmdSetStencilTestEnableEXT}},
    {"vkCmdSetStencilOpEXT", {kFuncTypeDev, (void*)CmdSetStencilOpEXT}},
    {"vkGetGeneratedCommandsMemoryRequirementsNV", {kFuncTypeDev, (void*)GetGeneratedCommandsMemoryRequirementsNV}},
    {"vkCmdPreprocessGeneratedCommandsNV", {kFuncTypeDev, (void*)CmdPreprocessGeneratedCommandsNV}},
    {"vkCmdExecuteGeneratedCommandsNV", {kFuncTypeDev, (void*)CmdExecuteGeneratedCommandsNV}},
    {"vkCmdBindPipelineShaderGroupNV", {kFuncTypeDev, (void*)CmdBindPipelineShaderGroupNV}},
    {"vkCreateIndirectCommandsLayoutNV", {kFuncTypeDev, (void*)CreateIndirectCommandsLayoutNV}},
    {"vkDestroyIndirectCommandsLayoutNV", {kFuncTypeDev, (void*)DestroyIndirectCommandsLayoutNV}},
    {"vkCreatePrivateDataSlotEXT", {kFuncTypeDev, (void*)CreatePrivateDataSlotEXT}},
    {"vkDestroyPrivateDataSlotEXT", {kFuncTypeDev, (void*)DestroyPrivateDataSlotEXT}},
    {"vkSetPrivateDataEXT", {kFuncTypeDev, (void*)SetPrivateDataEXT}},
    {"vkGetPrivateDataEXT", {kFuncTypeDev, (void*)GetPrivateDataEXT}},
    {"vkCmdSetFragmentShadingRateEnumNV", {kFuncTypeDev, (void*)CmdSetFragmentShadingRateEnumNV}},
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkAcquireWinrtDisplayNV", {kFuncTypePdev, (void*)AcquireWinrtDisplayNV}},
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    {"vkGetWinrtDisplayNV", {kFuncTypePdev, (void*)GetWinrtDisplayNV}},
#endif
#ifdef VK_USE_PLATFORM_DIRECTFB_EXT
    {"vkCreateDirectFBSurfaceEXT", {kFuncTypeInst, (void*)CreateDirectFBSurfaceEXT}},
#endif
#ifdef VK_USE_PLATFORM_DIRECTFB_EXT
    {"vkGetPhysicalDeviceDirectFBPresentationSupportEXT", {kFuncTypePdev, (void*)GetPhysicalDeviceDirectFBPresentationSupportEXT}},
#endif
    {"vkCreateAccelerationStructureKHR", {kFuncTypeDev, (void*)CreateAccelerationStructureKHR}},
    {"vkDestroyAccelerationStructureKHR", {kFuncTypeDev, (void*)DestroyAccelerationStructureKHR}},
    {"vkCmdBuildAccelerationStructuresKHR", {kFuncTypeDev, (void*)CmdBuildAccelerationStructuresKHR}},
    {"vkCmdBuildAccelerationStructuresIndirectKHR", {kFuncTypeDev, (void*)CmdBuildAccelerationStructuresIndirectKHR}},
    {"vkBuildAccelerationStructuresKHR", {kFuncTypeDev, (void*)BuildAccelerationStructuresKHR}},
    {"vkCopyAccelerationStructureKHR", {kFuncTypeDev, (void*)CopyAccelerationStructureKHR}},
    {"vkCopyAccelerationStructureToMemoryKHR", {kFuncTypeDev, (void*)CopyAccelerationStructureToMemoryKHR}},
    {"vkCopyMemoryToAccelerationStructureKHR", {kFuncTypeDev, (void*)CopyMemoryToAccelerationStructureKHR}},
    {"vkWriteAccelerationStructuresPropertiesKHR", {kFuncTypeDev, (void*)WriteAccelerationStructuresPropertiesKHR}},
    {"vkCmdCopyAccelerationStructureKHR", {kFuncTypeDev, (void*)CmdCopyAccelerationStructureKHR}},
    {"vkCmdCopyAccelerationStructureToMemoryKHR", {kFuncTypeDev, (void*)CmdCopyAccelerationStructureToMemoryKHR}},
    {"vkCmdCopyMemoryToAccelerationStructureKHR", {kFuncTypeDev, (void*)CmdCopyMemoryToAccelerationStructureKHR}},
    {"vkGetAccelerationStructureDeviceAddressKHR", {kFuncTypeDev, (void*)GetAccelerationStructureDeviceAddressKHR}},
    {"vkCmdWriteAccelerationStructuresPropertiesKHR", {kFuncTypeDev, (void*)CmdWriteAccelerationStructuresPropertiesKHR}},
    {"vkGetDeviceAccelerationStructureCompatibilityKHR", {kFuncTypeDev, (void*)GetDeviceAccelerationStructureCompatibilityKHR}},
    {"vkGetAccelerationStructureBuildSizesKHR", {kFuncTypeDev, (void*)GetAccelerationStructureBuildSizesKHR}},
    {"vkCmdTraceRaysKHR", {kFuncTypeDev, (void*)CmdTraceRaysKHR}},
    {"vkCreateRayTracingPipelinesKHR", {kFuncTypeDev, (void*)CreateRayTracingPipelinesKHR}},
    {"vkGetRayTracingCaptureReplayShaderGroupHandlesKHR", {kFuncTypeDev, (void*)GetRayTracingCaptureReplayShaderGroupHandlesKHR}},
    {"vkCmdTraceRaysIndirectKHR", {kFuncTypeDev, (void*)CmdTraceRaysIndirectKHR}},
    {"vkGetRayTracingShaderGroupStackSizeKHR", {kFuncTypeDev, (void*)GetRayTracingShaderGroupStackSizeKHR}},
    {"vkCmdSetRayTracingPipelineStackSizeKHR", {kFuncTypeDev, (void*)CmdSetRayTracingPipelineStackSizeKHR}},
};


} // namespace vulkan_layer_chassis

// loader-layer interface v0, just wrappers since there is only a layer

VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateInstanceExtensionProperties(const char *pLayerName, uint32_t *pCount,
                                                                                      VkExtensionProperties *pProperties) {
    return vulkan_layer_chassis::EnumerateInstanceExtensionProperties(pLayerName, pCount, pProperties);
}

VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateInstanceLayerProperties(uint32_t *pCount,
                                                                                  VkLayerProperties *pProperties) {
    return vulkan_layer_chassis::EnumerateInstanceLayerProperties(pCount, pProperties);
}

VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t *pCount,
                                                                                VkLayerProperties *pProperties) {
    // the layer command handles VK_NULL_HANDLE just fine internally
    assert(physicalDevice == VK_NULL_HANDLE);
    return vulkan_layer_chassis::EnumerateDeviceLayerProperties(VK_NULL_HANDLE, pCount, pProperties);
}

VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice,
                                                                                    const char *pLayerName, uint32_t *pCount,
                                                                                    VkExtensionProperties *pProperties) {
    // the layer command handles VK_NULL_HANDLE just fine internally
    assert(physicalDevice == VK_NULL_HANDLE);
    return vulkan_layer_chassis::EnumerateDeviceExtensionProperties(VK_NULL_HANDLE, pLayerName, pCount, pProperties);
}

VK_LAYER_EXPORT VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vkGetDeviceProcAddr(VkDevice dev, const char *funcName) {
    return vulkan_layer_chassis::GetDeviceProcAddr(dev, funcName);
}

VK_LAYER_EXPORT VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vkGetInstanceProcAddr(VkInstance instance, const char *funcName) {
    return vulkan_layer_chassis::GetInstanceProcAddr(instance, funcName);
}

VK_LAYER_EXPORT VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vk_layerGetPhysicalDeviceProcAddr(VkInstance instance,
                                                                                           const char *funcName) {
    return vulkan_layer_chassis::GetPhysicalDeviceProcAddr(instance, funcName);
}

VK_LAYER_EXPORT VKAPI_ATTR VkResult VKAPI_CALL vkNegotiateLoaderLayerInterfaceVersion(VkNegotiateLayerInterface *pVersionStruct) {
    assert(pVersionStruct != NULL);
    assert(pVersionStruct->sType == LAYER_NEGOTIATE_INTERFACE_STRUCT);

    // Fill in the function pointers if our version is at least capable of having the structure contain them.
    if (pVersionStruct->loaderLayerInterfaceVersion >= 2) {
        pVersionStruct->pfnGetInstanceProcAddr = vkGetInstanceProcAddr;
        pVersionStruct->pfnGetDeviceProcAddr = vkGetDeviceProcAddr;
        pVersionStruct->pfnGetPhysicalDeviceProcAddr = vk_layerGetPhysicalDeviceProcAddr;
    }

    return VK_SUCCESS;
}
